[
  {
    "objectID": "index.en.html",
    "href": "index.en.html",
    "title": "Introduction to urban accessibility",
    "section": "",
<<<<<<< Updated upstream
    "text": "Apresentação\nAcessibilidade é a facilidade com que as pessoas conseguem alcançar lugares e oportunidades como empregos, serviços de saúde e educação, atividades culturais, áreas verdes etc. As condições de acessibilidade em uma cidade ou bairro dependem da eficiência e conectividade da rede de transportes e da proximidade entre pessoas e atividades. O tema da acessibilidade tem recebido cada vez mais atenção de agências de transporte, instituições de financiamento, tomadores de decisão e pesquisadores da área de planejamento urbano e de transportes (Papa et al. 2015; Boisjoly e El-Geneidy 2017). Com isso, existe um crescente número de artigos científicos (Miller 2018; van Wee 2021) e livros (Levine, Grengs, e Merlin 2019; Levinson e King 2020) que trazem rico material para discussão e aprofundamento sobre questões relacionadas à acessibilidade urbana. No entanto, atualmente não existem livros ou artigos que sirvam simultaneamente de material didático introdutório sobre o tema e de manual prático de metodologia para calcular e analisar dados de acessibilidade. A ausência desse tipo de material explica, ao menos em parte, por que diversas agências de transporte e analistas ainda enfrentam desafios para incorporar questões e indicadores de acessibilidade no dia a dia do planejamento e da pesquisa (Silva et al. 2017; Büttner 2021).\nO objetivo deste livro é equipar seus leitores com os conceitos fundamentais e as ferramentas de análise e processamento de dados necessários para realizar análises de acessibilidade urbana e conduzir avaliações de impacto de projetos e políticas de transporte. O livro foi escrito pensando nas necessidades de trabalho de gestores públicos, analistas, alunos e pesquisadores de planejamento e transporte urbano, e, por isso, possui caráter prático. Todo o material do livro é apresentado com exemplos reproduzíveis e dados abertos, utilizando para isso a linguagem de programação R."
=======
    "text": "Accessibility is the ease with which people can reach places and opportunities such as jobs, health and education services, cultural activities, green areas, etc. The accessibility conditions of a city or neighborhood depend on the efficiency and connectivity of the transport network and on the proximity between people and activities. The topic of accessibility has been receiving increasing attention from transportation agencies, funding institutions, decision makers and researchers in the fields of urban and transport planning (Papa et al. 2015; Boisjoly and El-Geneidy 2017). In the last few years, we have seen a growing number of scientific papers (Miller 2018; van Wee 2021) and books (Levine, Grengs, and Merlin 2019; Levinson and King 2020) that deepen our understanding of urban accessibility issues. However, there are currently no books or articles that serve simultaneously as introductory material to the subject and as a practical manual to teach computational methods to calculate and analyze accessibility data. The lack of this type of material helps to explain, at least in part, why several transportation agencies and analysts still face challenges to incorporate accessibility issues and indicators into the day-to-day planning and research practice (Silva et al. 2017; Büttner 2021).\nThe aim of this book is to equip its readers with the fundamental concepts, the data analysis skills and the processing tools needed to perform urban accessibility analyses and transportation projects impact assessments. The book was written with the problems faced by public managers, policy makers, students and researchers working on urban and transportation planning in mind. Hence, the book is essentially practical. All the material in the book is presented with reproducible examples using open data sets and the R programming language.\n\n\n\n\n\n\nThis book assumes the reader has a basic knowledge of the R programming language. If you want to familiarize yourself with it, we recommend the books below:\n\nR for Data Science\nGeocomputation with R\nData Science in R [Portuguese]\n\n\n\n\n\n\nThis book is divided into 5 sections:\n\n\n\n\n\nSection\nDescription\n\n\n\n\n1: Introduction to urban accessibility\nThe first section presents the concept of urban accessibility, clarifies the differences between accessibility and mobility, and presents the main indicators used in the literature to measure urban accessibility.\n\n\n2: How to measure urban accessibility\nThe second section teaches how to calculate urban accessibility estimates in R using open data and the {r5r} and {accessibility} packages, and how to visualize the results with maps and charts.\n\n\n3: Public transport data\nThe third section presents the GTFS specification of public transport data, and shows how to work and analyze GTFS data using the {gtfstools} package.\n\n\n4: Impact assessment of transportation projects\nThe fourth section brings a case study to illustrate how the combined knowledge of previous chapters can be used to assess the impact of transportation policies on urban accessibility conditions.\n\n\n5: Data from the Access to Opportunity Project\nFinally, the fifth section shows how to download, analyze and visualize the data of the Access to Opportunities Project (AOP), which brings detailed data on land-use patterns & accessibility for Brazilian cities.\n\n\n\n\n\n\n\n\nTo reproduce the book in your local machine, you must first download its source code. This can be done with git or manually, by clicking on the following link: https://github.com/ipeaGIT/intro_access_book/archive/refs/heads/main.zip. If you choose the second approach, you must also unzip the contents of the .zip file to a new folder.\n\n\n\n\n\n\nThis book was written with the Quarto publishing system. All the code used to write and publish it can be found in this repository.\n\n\n\nTo render the book, you must have Quarto installed on your computer. Reproducing the chapters also requires the {renv} R package, which manages the book dependencies.\nAfter installing book dependencies, you can render each chapter as you would normally render any Quarto/Rmarkdown file. To run all chapters at once, use one of the following commands:\nquarto::quarto_preview()\n\nquarto::quarto_render()\nFor more details on how to install the book dependencies and or how to run the book content locally, please see the installation instructions in the book repository.\n\n\n\nA binder is a tool that allows one to use a browser, such as Chrome and Firefox, to run code in the cloud. The book is set up so that its code can be run using a server published by mybinder. To do this, click the icon below: after a few moments, an RStudio Cloud session will start running on your browser. This session includes all the files and data needed to run the code.\n\n\nPlease note that mybinder sessions are limited to 2 GB of RAM. This restriction can prevent Chapter 6 from running properly. If you use binder, we suggest that you do not attempt to render the entire book with the Quarto, as shown above.\n\n\n\n The material in this book may be reproduced and displayed for educational or informational purposes, provided credit is given to the original authors and the original work is cited. This book can be shared on websites and free and open online repositories only if it is made clear to users the terms of use of this material and who the copyright holder is, the Institute for Applied Economic Research (Ipea). Any commercial or for-profit use is prohibited. The creation of derivative works is prohibited. This license is based on studies about the Brazilian Copyright Law (Law 9.610/1998).\n\n\n\nIf you use the material in this book, please cite the book using the following reference:\n\nPereira, Rafael H. M. & Herszenhut, Daniel. (2023) Introduction to urban accessibility: a practical guide with R. Ipea - Institute of Applied Economic Research.\n\n\n\n\nThis book was written under a partnership between the Institute for Applied Economic Research (Ipea) and the Secretariat of Mobility and Regional and Urban Development (SMDRU) of the Ministry of Regional Development (MDR) of the Brazilian federal government. The authors are grateful for the comments and suggestions from Lucas Mation. The authors would also like to thank the contributions of Anna Grigolon, Benjamin Büttner and Aaron Nichols for proofreading the English version of the book. Any remaining errors are the sole responsibility of the authors.\n\n\n\n\nBoisjoly, Geneviève, and Ahmed M. El-Geneidy. 2017. “How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans.” Transport Policy 55 (April): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nBüttner, Benjamin. 2021. “Accessibility Tools for Transport Policy and Planning.” In International Encyclopedia of Transportation, edited by Roger Vickerman, 83–86. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10618-9.\n\n\nLevine, Jonathan, Joe Grengs, and Louis A. Merlin. 2019. From Mobility to Accessibility: Transforming Urban Transportation and Land-Use Planning. Cornell University Press.\n\n\nLevinson, David, and David King. 2020. Transport Access Manual: A Guide for Measuring Connection Between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nMiller, Eric J. 2018. “Accessibility: Measurement and Application in Transportation Planning.” Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, and Angela Hull. 2015. “Accessibility Instruments for Planning Practice: A Review of European Experiences.” Journal of Transport and Land Use, June. https://doi.org/10.5198/jtlu.2015.585.\n\n\nSilva, Cecília, Luca Bertolini, Marco te Brömmelstroet, Dimitris Milakis, and Enrica Papa. 2017. “Accessibility Instruments in Planning Practice: Bridging the Implementation Gap.” Transport Policy 53 (January): 135–45. https://doi.org/10.1016/j.tranpol.2016.09.006.\n\n\nvan Wee, Bert. 2021. “Transport Modes and Accessibility.” In International Encyclopedia of Transportation, edited by Roger Vickerman, 32–37. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10402-6."
>>>>>>> Stashed changes
  },
  {
    "objectID": "s1_intro.en.html",
    "href": "s1_intro.en.html",
    "title": "SECTION 1: Introduction to urban accessibility",
    "section": "",
    "text": "How many jobs can a person in a given location reach within an hour of travel using public transport? How long does it take for this person to get to the health center or the school closest to her home? The answers to these questions directly depend on local transport and urban development policies. These policies determine the urban accessibility conditions in each city - that is, the ease with which individuals can access opportunities such as employment, health and education services, cultural and leisure activities, among other types of activities. Accessibility, therefore, is simultaneously a result of the connectivity and performance of transport systems and the organization of cities in terms of the spatial distribution of their population, economic activities, and public services. Moving to accessibility-focused transport planning can help promote more sustainable and inclusive urban development. Throughout this section, we will look at the concept of urban accessibility in more detail, show why this concept is important to understand how cities function and present the indicators most commonly used to measure accessibility levels."
  },
  {
    "objectID": "1_conceito.en.html",
    "href": "1_conceito.en.html",
    "title": "1  What is accessibility?",
    "section": "",
    "text": "Accessibility is the ease with which people can reach places and opportunities – or, conversely, a characteristic of places and opportunities in terms of how easily they can be reached by the population (Geurs and van Wee 2004; Neutens et al. 2010).\nAccessibility conditions are influenced both by the spatial co-distribution of the population, economic activities and public services, as well as by the configuration and performance of the transport network. In this sense, urban accessibility plays a fundamental role in shaping people’s ability to move in order to access opportunities, such as jobs, schools, etc.\nUrban accessibility levels, therefore, are determined by three distinct components:\n\nInfrastructure: how easy it is to access activities depends on existing infrastructure and transportation services. This includes, for example, the spatial coverage and connectivity of the public transport and street networks, the existence of rapid transit services such as trains and subways, etc. Here, both the efficiency and the spatial and temporal connectivity of the transport network are of utmost importance.\nLand use: how easily activities can be accessed also depends on the spatial co-distribution of people and activities, such as schools, health services, leisure areas, etc. This component is related to the geographical proximity between people and opportunities: the further away an activity is, the more difficult it is to access it.\nPeople: finally, it is important to note that the individuals’ ability to access activities is also affected by their personal characteristics. Factors such as motor and cognitive difficulties, age, gender, race, and income, for example, can significantly influence people’s ability to get around, use certain transport modes, and move around the city without fear of some kind of violence or discrimination.\n\nThis last component can be of critical importance for equity and social inclusion analyses. However, the influence of people’s personal characteristics on accessibility conditions is usually better assessed through qualitative surveys: due to operational and computational challenges, this dimension of accessibility usually receives little attention from impact assessments of large-scale transportation projects. Chapter 2 discusses the operational, theoretical and communication advantages and disadvantages of different accessibility measures."
  },
  {
    "objectID": "1_conceito.en.html#difference-between-micro-accessibility-and-urban-accessibility",
    "href": "1_conceito.en.html#difference-between-micro-accessibility-and-urban-accessibility",
    "title": "1  What is accessibility?",
    "section": "1.2 Difference between micro-accessibility and urban accessibility",
    "text": "1.2 Difference between micro-accessibility and urban accessibility\nIn order to clarify the concepts we use throughout the book, it is important to distinguish between what we mean by urban accessibility and what is the colloquial use of the term accessibility.\nThe term accessibility is commonly used to refer to issues of universal design standards and regulations, as well as construction and planning practices aimed at the inclusion of people with different degrees of motor and cognitive challenges. This is usually understood as micro-accessibility, because it covers issues of access to services and activities at the micro scale - i.e. how the planning of public and private spaces, and the design of vehicles and buildings, for example, affect the ability of individuals to access places, services, products, etc.\nUrban accessibility, on the other hand, can be understood as macro-accessibility, because it deals with a broader understanding of access. When we talk about urban accessibility, we focus on how structural issues of planning and urban development, such as the configuration of transport corridors and the spatial distribution of people and activities, affect people’s ability to access opportunities. Urban accessibility addresses how the ability to access activities is influenced by people’s ability to use transportation technologies, by the spatial co-distribution of people and activities, and by the spatial coverage and connectivity of transportation networks.\nMicro-accessibility and macro-accessibility are complementary elements of a broader notion of accessibility. Micro-accessibility conditions, for example, directly affect the ability of people to board and use different modes of transport, to move safely on sidewalks, to cross streets, etc. It is of little use for a person to live in a region served by various transport modes if, for example, she has limited mobility and the transport network and vehicles are not adapted to these challenges. In this book, we will focus only on urban accessibility analyses and will often use the term accessibility as a synonym of macro-accessibility. It is important to recognize, however, that macro-accessibility alone provides only a limited account of one’s accessibility conditions, and a more nuanced understanding of accessibility requires a closer inspection of micro-accessibility conditions as well [Grisé et al. (2019); buliung2021more]."
  },
  {
    "objectID": "1_conceito.en.html#why-does-urban-accessibility-matter",
    "href": "1_conceito.en.html#why-does-urban-accessibility-matter",
    "title": "1  What is accessibility?",
    "section": "1.3 Why does urban accessibility matter?",
    "text": "1.3 Why does urban accessibility matter?\nThe concept of accessibility is critical to transport and planning studies for different reasons. First, it explicitly articulates how the interaction between transport, urban development and land use policies impact people’s ability to access opportunities dispersed in space. Moreover, access to opportunities and activities, such as jobs, education, and health services, plays a fundamental role satisfying individual and social needs and promoting social inclusion (Pereira and Karner 2021; Luz and Portugal 2022). Good accessibility is also a necessary condition, although not sufficient on its own, to expand people’s freedom of choice (Church, Frost, and Sullivan 2000; Lucas et al. 2016; van Wee 2022). Therefore, the concept of accessibility helps us understand how transport and land use investments relate to elements that constitute the notions of social exclusion and wellbeing, such as freedom and one’s satisfaction of basic needs.\nAdditionally, the idea of accessibility brings attention to the spatial dimension of inequality of opportunities, a central social justice problem. Urban accessibility helps to explicitly incorporate the notion of space into policy design to address inequalities (Farrington and Farrington 2005; Pereira, Schwanen, and Banister 2017). Thus, accessibility is a fundamental concept when thinking about the equity implications of public policies and when evaluating which social groups and localities benefit from them.\nAs mentioned before, the accessibility levels in a city are a joint result of each person’s ability to use transportation technologies, the spatial co-distribution of activities and population in the city, and the spatial and temporal connectivity of the transport network (Miller 2018; Páez, Scott, and Morency 2012). As such, accessibility-oriented planning seeks to promote the integration between land use and the transport systems, getting people and activities closer together and reducing the dependence on motorized modes of transport (Banister 2011). Planning cities and transport systems to improve accessibility conditions is therefore essential to promote more inclusive and sustainable cities."
  },
  {
<<<<<<< Updated upstream
    "objectID": "index.html#agradecimentos",
    "href": "index.html#agradecimentos",
    "title": "Introdução à acessibilidade urbana",
    "section": "Agradecimentos",
    "text": "Agradecimentos\nEste livro foi elaborado pelo Instituto de Pesquisa Econômica Aplicada (Ipea) no âmbito da parceria entre Ipea e a Secretaria de Mobilidade e Desenvolvimento Regional e Urbano (SMDRU) do Ministério do Desenvolvimento Regional (MDR). Os autores agradecem aos comentários e sugestões de Lucas Mation.\n\n\n\n\nBoisjoly, Geneviève, e Ahmed M. El-Geneidy. 2017. «How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans». Transport Policy 55 (abril): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nBüttner, Benjamin. 2021. «Accessibility Tools for Transport Policy and Planning». Em International Encyclopedia of Transportation, editado por Roger Vickerman, 83–86. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10618-9.\n\n\nLevine, Jonathan, Joe Grengs, e Louis A. Merlin. 2019. From Mobility to Accessibility: Transforming Urban Transportation and Land-Use Planning. Cornell University Press.\n\n\nLevinson, David, e David King. 2020. Transport Access Manual: A Guide for Measuring Connection between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nMiller, Eric J. 2018. «Accessibility: Measurement and Application in Transportation Planning». Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, e Angela Hull. 2015. «Accessibility Instruments for Planning Practice: A Review of European Experiences». Journal of Transport and Land Use, junho. https://doi.org/10.5198/jtlu.2015.585.\n\n\nSilva, Cecília, Luca Bertolini, Marco te Brömmelstroet, Dimitris Milakis, e Enrica Papa. 2017. «Accessibility Instruments in Planning Practice: Bridging the Implementation Gap». Transport Policy 53 (janeiro): 135–45. https://doi.org/10.1016/j.tranpol.2016.09.006.\n\n\nvan Wee, Bert. 2021. «Transport Modes and Accessibility». Em International Encyclopedia of Transportation, editado por Roger Vickerman, 32–37. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10402-6."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Introdução à acessibilidade urbana",
    "section": "",
    "text": "Para baixar o código-fonte manualmente, use o link a seguir: https://github.com/ipeaGIT/intro_access_book/archive/refs/heads/main.zip.↩︎"
=======
    "objectID": "1_conceito.en.html#difference-between-accessibility-and-mobility",
    "href": "1_conceito.en.html#difference-between-accessibility-and-mobility",
    "title": "1  What is accessibility?",
    "section": "1.4 Difference between accessibility and mobility",
    "text": "1.4 Difference between accessibility and mobility\nIt is important to clarify the difference between accessibility and another concept widely used in our daily life: mobility. Unfortunately, the difference between these concepts is often ignored, even by researchers and planners who deal with these topics on a daily basis.\nAfter all, there is a large intersection between accessibility and what is meant by “urban mobility” as a broad field of research and public policy: a field that deals with people’s daily mobility patterns and which is related to the planning of public and individual transport systems, to the planning of cycling and pedestrian networks, etc. In this context, it is not uncommon to hear, for example, that a given socioeconomic group has “less mobility” than another, when it’s actually meant that this group has worse accessibility conditions. So what is the difference between accessibility and mobility?\nIn the urban and transport planning literature, the concept of mobility refers to people’s daily travel behavior patterns – for example, how many trips are taken, which transport modes are used, the average trip distance and how much time people spend on commute.\nMobility data is commonly collected through household travel surveys. More recently, new technologies have been enabling the use of new data sources, such as mobile phones location services and smart cards, to examine daily mobility patterns (Anda, Erath, and Fourie 2017; Kandt and Batty 2021). Mobility data and analyses provide information on how transport systems are used and on the travel behavior of people from different socioeconomic groups, which reflect important aspects of the economic and environmental performance of cities and of the well-being of the population.\nAccessibility, however, refers to the potential ability to reach activities and opportunities. While a mobility analysis would focus, for example, on the time people spend commuting, an accessibility analysis would examine, for example, the quantity and variety of jobs one could potentially reach within a reasonable travel cost. Accessibility addresses how easy/feasible it is to reach a location, while mobility is concerned with the means of movement used to reach a location. Accessibility levels are, therefore, potential measures, while mobility data describe observed travel behavior.\nTraditionally, urban and transport planning focuses on mobility (Banister 2011; Vasconcellos 2018; Levinson and King 2020). Even today, the focus on mobility leads to the implementation of policies that prioritize private automobiles and that increase traffic flow and speed as a means to tackle congestion and reduce travel times (Levine, Grengs, and Merlin 2019). These policies tend to concentrate on the quantitative side of mobility, focusing on increasing the number of trips, increasing the average speed, decreasing congestion, etc.\nFrom this perspective, mobility is understood as an end in itself, and the solutions to “improve” it would purely depend on technical solutions that “optimize” the quantitative aspects mentioned before. Mobility, however, cannot be seen as an end in itself. People seldom travel for the sake of moving around. On the contrary, people most oftenly travel as a means to access the activities or people they want to engage with at the trip destination.\nIn this sense, there is growing consensus among researchers and transportation agencies that the goal of a transport policy is to improve people’s access to opportunities (Pereira, Schwanen, and Banister 2017; Martens 2012; Bertolini, le Clercq, and Kapoen 2005). If what people want is to access activities, we need to rethink how urban, land use and transport planning practices could be redesigned to improve accessibility without necessarily increasing traffic speeds or the dependence on motorized vehicles, which are known to cause negative economic, environmental and public health externalities.\nThere is a call for a paradigm shift in urban and transport planning in which the pursuit for more sustainable travel patterns requires changing the focus from mobility to accessibility (Banister 2008; Cervero 2005; Levine, Grengs, and Merlin 2019). Policies that aim to increase traffic speed and road capacity, for example, could be replaced by policies that bring people and activities closer together and that encourage a more diverse land use mix, promoting the integration between transport and land use planning. Thus, the focus shift from mobility to accessibility opens up a wider range of possible public policy instruments and actions that aim to contribute to an urban development based on sustainability and social inclusion principles (Banister 2011; Levine, Grengs, and Merlin 2019).\n\n\n\n\nAnda, Cuauhtemoc, Alexander Erath, and Pieter Jacobus Fourie. 2017. “Transport Modelling in the Age of Big Data.” International Journal of Urban Sciences 21 (sup1): 19–42. https://doi.org/10.1080/12265934.2017.1281150.\n\n\nBanister, David. 2008. “The Sustainable Mobility Paradigm.” Transport Policy 15 (2): 73–80. https://doi.org/10.1016/j.tranpol.2007.10.005.\n\n\n———. 2011. “The Trilogy of Distance, Speed and Time.” Journal of Transport Geography 19 (4): 950–59. https://doi.org/10.1016/j.jtrangeo.2010.12.004.\n\n\nBertolini, L., F. le Clercq, and L. Kapoen. 2005. “Sustainable Accessibility: A Conceptual Framework to Integrate Transport and Land Use Plan-Making. Two Test-Applications in the Netherlands and a Reflection on the Way Forward.” Transport Policy 12 (3): 207–20. https://doi.org/10.1016/j.tranpol.2005.01.006.\n\n\nCervero, Robert. 2005. “Accessible Cities and Regions: A Framework for Sustainable Transport and Urbanism in the 21st Century.” Center for Future Urban Transport Working Paper, no. UCB-ITS-VWP-2005-3 (August).\n\n\nChurch, A, M Frost, and K Sullivan. 2000. “Transport and Social Exclusion in London.” Transport Policy 7 (3): 195–205. https://doi.org/10.1016/S0967-070X(00)00024-X.\n\n\nFarrington, John, and Conor Farrington. 2005. “Rural Accessibility, Social Inclusion and Social Justice: Towards Conceptualisation.” Journal of Transport Geography 13 (1): 1–12. https://doi.org/10.1016/j.jtrangeo.2004.10.002.\n\n\nGeurs, Karst, and Bert van Wee. 2004. “Accessibility Evaluation of Land-Use and Transport Strategies: Review and Research Directions.” Journal of Transport Geography 12 (2): 127–40. https://doi.org/10.1016/j.jtrangeo.2003.10.005.\n\n\nGrisé, Emily, Geneviève Boisjoly, Meadhbh Maguire, and Ahmed El-Geneidy. 2019. “Elevating Access: Comparing Accessibility to Jobs by Public Transport for Individuals with and Without a Physical Disability.” Transportation Research Part A: Policy and Practice 125 (July): 280–93. https://doi.org/10.1016/j.tra.2018.02.017.\n\n\nKandt, Jens, and Michael Batty. 2021. “Smart Cities, Big Data and Urban Policy: Towards Urban Analytics for the Long Run.” Cities 109 (February): 102992. https://doi.org/10.1016/j.cities.2020.102992.\n\n\nLevine, Jonathan, Joe Grengs, and Louis A. Merlin. 2019. From Mobility to Accessibility: Transforming Urban Transportation and Land-Use Planning. Cornell University Press.\n\n\nLevinson, David, and David King. 2020. Transport Access Manual: A Guide for Measuring Connection Between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nLucas, Karen, Giulio Mattioli, Ersilia Verlinghieri, and Alvaro Guzman. 2016. “Transport Poverty and Its Adverse Social Consequences.” Proceedings of the Institution of Civil Engineers - Transport 169 (6): 353–65. https://doi.org/10.1680/jtran.15.00073.\n\n\nLuz, Gregório, and Licinio Portugal. 2022. “Understanding Transport-Related Social Exclusion Through the Lens of Capabilities Approach.” Transport Reviews 42 (4): 503–25. https://doi.org/10.1080/01441647.2021.2005183.\n\n\nMartens, Karel. 2012. “Justice in Transport as Justice in Accessibility: Applying Walzer’s ‘Spheres of Justice’ to the Transport Sector.” Transportation 39 (6): 1035–53. https://doi.org/10.1007/s11116-012-9388-7.\n\n\nMiller, Eric J. 2018. “Accessibility: Measurement and Application in Transportation Planning.” Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nNeutens, Tijs, Tim Schwanen, Frank Witlox, and Philippe De Maeyer. 2010. “Equity of Urban Service Delivery: A Comparison of Different Accessibility Measures.” Environment and Planning A: Economy and Space 42 (7): 1613–35. https://doi.org/10.1068/a4230.\n\n\nPáez, Antonio, Darren M. Scott, and Catherine Morency. 2012. “Measuring Accessibility: Positive and Normative Implementations of Various Accessibility Indicators.” Journal of Transport Geography 25 (November): 141–53. https://doi.org/10.1016/j.jtrangeo.2012.03.016.\n\n\nPereira, Rafael H. M., and Alex Karner. 2021. “Transportation Equity.” In International Encyclopedia of Transportation, edited by Roger Vickerman, 271–77. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10053-3.\n\n\nPereira, Rafael H. M., Tim Schwanen, and David Banister. 2017. “Distributive Justice and Equity in Transportation.” Transport Reviews 37 (2): 170–91. https://doi.org/10.1080/01441647.2016.1257660.\n\n\nvan Wee, Bert. 2022. “Accessibility and Equity: A Conceptual Framework and Research Agenda.” Journal of Transport Geography 104 (October): 103421. https://doi.org/10.1016/j.jtrangeo.2022.103421.\n\n\nVasconcellos, Eduardo Alcantara. 2018. “Urban Transport Policies in Brazil: The Creation of a Discriminatory Mobility System.” Journal of Transport Geography 67 (February): 85–91. https://doi.org/10.1016/j.jtrangeo.2017.08.014."
>>>>>>> Stashed changes
  },
  {
    "objectID": "2_indicadores.en.html",
    "href": "2_indicadores.en.html",
    "title": "2  Accessibility measures",
    "section": "",
    "text": "Promoting a paradigm shift in urban and transport planning towards accessibility-oriented planning entails a few challenges. Among them, there is the need to develop and apply methods to measure the urban accessibility conditions in cities. The search for accessibility metrics that are easy to communicate, methodologically robust and computationally tractable lead researchers to develop a large number of different measures (Páez, Scott, and Morency 2012). These measures can be divided into two major groups: place-based measures and person-based measures (Dijst, de Jong, and van Eck 2002)."
  },
  {
    "objectID": "2_indicadores.en.html#place-based-measures",
    "href": "2_indicadores.en.html#place-based-measures",
    "title": "2  Accessibility measures",
    "section": "2.1 Place-based measures",
    "text": "2.1 Place-based measures\nPlace-based metrics measure accessibility as a characteristic of a particular location. By simplification, these indicators assume that all people who are in the same place can equally access the activities distributed throughout the city. That is, if an accessibility analysis uses a place-based metric to calculate accessibility and divides the study area into a hexagonal grid, each cell of this grid (a hexagon) will have an accessibility value associated with it, which is equally assigned to all individuals residing within the cell. These measures are sensitive to land use and transport factors related to the spatial distribution of activities and to the configuration and performance of the transport network, but do not take into account people’s individual characteristics.\nThese measures are the most widely used by transport agencies and researchers (Boisjoly and El-Geneidy 2017; Papa et al. 2015). This is largely because they require less data and tend to be considerably easier to calculate and interpret than person-based measures. For this reason, the examples and case studies presented in this chapter and in the rest of the book focus only on place-based measures.\nPlace-based accessibility measures account for trip costs, usually expressed in terms of travel time (El-Geneidy et al. 2016; Venter 2016) - i.e., if one location can be reached from another in half an hour, the cost to make this trip is 30 minutes. However, it is possible to consider other types of costs, such as the distance of the trip, its monetary cost and the passengers’ perception of comfort (Arbex and Cunha 2020; Herszenhut et al. 2022). We present below some of the place-based accessibility metrics most commonly used in the scientific literature and by transport agencies. Here, the term “cost” is used broadly, and can refer to any type of cost unit used to quantify the impedance of a trip, be it travel time, monetary cost or other alternatives.\n\n2.1.1 Minimum travel cost\nOne of the simplest accessibility metrics, indicating the lowest cost required to reach the nearest opportunity from a given origin. It allows one to estimate, for example, the travel time from each block of the city to the closest health center. The indicator is calculated with the following formula:\n\\[A_i = min(c_{i1}, c_{i2}, \\dots, c_{ij}, \\dots, c_{i(n-1)}, c_{in}) \\iff O_j \\geq 1\\]\nin which \\(A_i\\) is the accessibility at origin \\(i\\), \\(c_{ij}\\) is the travel cost between origin \\(i\\) and destination \\(j\\), \\(n\\) is the total number of destinations in the study area and \\(O_j\\) is the number of opportunities at destination \\(j\\).\nAdvantages and disadvantages: the advantages of this measure are that it requires little data and it is easy to calculate and to communicate. Two disadvantages, however, are that it does not consider the amount of accessible opportunities at destinations and it does not take competition for opportunities into account. For example, even if a person lives very close to a hospital, this proximity does not necessarily guarantee good access to health services if that is the only hospital is subject to high demand peaks that overload the services beyond their capacities.\n\n\n2.1.2 Cumulative opportunity measures\nComputes the number of opportunities that can be reached within a given travel cost limit. For example, this indicator can be used to measure the number of jobs accessible by public transport in up to 60 minutes, or the number of schools accessible within 30 minutes of walking. It is calculated using the following formula:\n\\[A_i = \\sum_{j=1}^{n}{O_j \\times f(c_{ij})}\\]\n\\[\nf(c_{ij}) =\n  \\begin{cases}\n    1 & \\text{se } c_{ij} \\leq C\\\\\n    0 & \\text{otherwise}\n  \\end{cases}\n\\]\nin which \\(A_i\\) is accessibility at origin \\(i\\), \\(O_j\\) is the number of opportunities at destination \\(j\\), \\(n\\) is the total number of destinations in the study area, \\(f(c_{ij})\\) is a binary function that assumes the values 0 or 1, depending on the travel cost \\(c_{ij}\\) between origin \\(i\\) and destination \\(j\\) and \\(C\\) is the travel cost threshold.\nAdvantages and disadvantages: the cumulative opportunities measure also requires little data and is easy to calculate and communicate. This helps explain why this is one of the indicators most commonly used by transport and funding agencies in accessibility analyses (Papa et al. 2015; Boisjoly and El-Geneidy 2017). Among its disadvantages are the fact that this indicator does not consider the competition for opportunities and that it requires the choice of a single cut-off point as a travel cost limit. Moreover, this measure assumes that all opportunities that can be reached within the travel cost limit are equally desirable and accessible. For example, if we consider a 60-minute travel time limit, an opportunity that is 40 minutes away from an origin is considered as accessible as another one that is just 10 minutes away.\n\n\n2.1.3 Gravity measures\nMore than a specific type of accessibility metric, we can understand gravity-based accessibility as a family of measures. As in the case of the cumulative opportunities measure, gravity-based metrics consider the sum of opportunities that can be reached from a given location. However, the number of opportunities in each destination is gradually discounted as travel costs become higher. In other words, opportunities that are easier to access are considered to be more valuable, and the weight of each opportunity decreases as it gets more difficult to reach it from the trip origin.\nThe rate at which this weight decreases is determined by a decay function. For example, the linear decay function considers that the weight of each opportunity decreases linearly up to a certain cost limit, after which the weight becomes zero. The negative exponential function, on the other hand, considers that the weight of each opportunity is divided by a factor that grows exponentially, causing the weight to decrease rapidly at low travel costs and to approach 0 at high costs. The equations below present the generic formulation of a gravitational measure, as well as the linear and negative exponential decay functions mentioned above.\n\\[A_i = \\sum_{j=1}^{n}{O_j \\times f(c_{ij})}\\]\n\\[\nf_{lin}(c_{ij}) =\n  \\begin{cases}\n    1-c_{ij}/C & \\text{se } c_{ij} \\leq C\\\\\n    0 & \\text{otherwise}\n  \\end{cases}\n\\]\n\\[f_{exp}(c_{ij}) = e^{-\\beta c_{ij}}\\]\nin which \\(A_i\\) is the accessibility at origin \\(i\\), \\(O_j\\) is the number of opportunities at destination \\(j\\), \\(n\\) is the total number of destinations in the study area, \\(f(c_{ij})\\) is a decay function whose result varies with the travel cost \\(c_{ij}\\) between origin \\(i\\) and destination \\(j\\), \\(f_{lin}(c_{ij})\\) is the linear decay function, \\(C\\) is travel cost limit, \\(f_{exp}(c_{ij})\\) is the negative exponential decay function and \\(\\beta\\) is a parameter that dictates the decay speed.\nThere are numerous types of decay functions that can be used when calculating gravity-based accessibility measures. The cumulative opportunities measure, for example, can be understood as a special case of a gravity-based measure in which the weight of each opportunity is set by a binary function, rather than a function that decays gradually. Levinson and King (2020, 49) present a list of decay functions often used by transport agencies and researchers in analyses involving gravity measures.\nAdvantages and disadvantages: the main advantage of gravity-based accessibility measures is that, by discounting the weight of opportunities by travel cost, these measures reflect to some extent how people perceive access to opportunities: services and activities that are closer to them tend to be perceived as more valuable, all else equal. This indicator, however, has at least two disadvantages. The first is that the estimated accessibility levels are difficult to interpret because of the way in which the number of opportunities is discounted by travel costs. Additionally, the decay rate of the impedance function (the \\(\\beta\\) parameter of the negative exponential function, for example) needs to be calibrated if one wants the accessibility estimates to be representative of people’s travel behavior. Therefore, gravity-based metrics require additional travel behavior data to be used in the calibration process, coming, for example, from household travel surveys or mobile phone services.\n\n\n2.1.4 Accessibility measures with competition: floating catchment area\nIn many cases, access to opportunities is affected not only by geographical proximity and transportation costs, but also by the competition of many people trying to access the same opportunity. This is very common, for example, in the cases of access to health services, schools and jobs. A job opening can only be occupied by one person at a time, and the same goes for an intensive care unit (ICU) bed or a school seat.\nThere are various measures that seek to account for competition effects in accessibility estimates. Some of the most widely used are those in the floating catchment area (FCA) family of indicators. For example, these indicators try to take into account how the same person can potentially access multiple ICU beds and, simultaneously, how each ICU bed can potentially be accessed by multiple people. Thus, a person’s access to ICU beds is influenced both by transportation costs and by the availability of beds, given the potential competing demand for them.\nWithin the FCA measures’ family, the most commonly used is the 2-Step Floating Catchment Area (2SFCA), originally proposed by Luo and Wang (2003). One limitation of 2SFCA is that it considers that the same person can demand multiple services / opportunities at the same time and that the same service can be used by multiple people at the same time. These issues are known as the demand and supply inflation problems, respectively, and can generate biased or inaccurate accessibility estimates (Paez, Higgins, and Vivona 2019). To deal with these problems, Paez, Higgins, and Vivona (2019) proposed the Balanced Floating Catchment Area (BFCA), one of the most recent measures of the FCA family.\nAdvantages and disadvantages: Different FCA measures have different advantages and disadvantages, to a greater or lesser extent. However, in general, the main advantage of measures from this family is their ability to incorporate aspects of competition into accessibility estimates. The main disadvantage, on the other hand, is the difficulty to interpret and communicate their results."
  },
  {
    "objectID": "2_indicadores.en.html#person-based-measures",
    "href": "2_indicadores.en.html#person-based-measures",
    "title": "2  Accessibility measures",
    "section": "2.2 Person-based measures",
    "text": "2.2 Person-based measures\nPerson-based accessibility measures are sensitive not only to the spatial distribution of activities and to the configuration and performance of transportation networks. Indicators in this group also take into account how the individual characteristics of each person (such as gender, age, physical disability, etc), and even the participation in certain activities and personal commitments, can affect people’s ability to access opportunities. This category includes, for example, activity-based indicators (Dong et al. 2006) and space-time measures (Kim and Kwan 2003; Neutens et al. 2012).\nAdvantages and disadvantages: Although person-based accessibility measures are more sophisticated, they often require large amounts of data, such as travel diary records, household travel surveys, etc. Therefore, the calculation of these measures is computationally more intensive, which makes them less frequently used than place-based measures (Neutens et al. 2010; Miller 2018). In contrast to place-based measures, which yield a single accessibility estimate for all individuals in the same place, person-based measures results associate one accessibility estimate to each person in the study area. While this allows for more nuanced accessibility analyses, as the resultant accessibility estimates take the particularities of each individual into account, this also makes the communication and interpretation of results more complex.\n\n\n\n\nArbex, Renato, and Claudio B. Cunha. 2020. “Estimating the Influence of Crowding and Travel Time Variability on Accessibility to Jobs in a Large Public Transport Network Using Smart Card Big Data.” Journal of Transport Geography 85 (May): 102671. https://doi.org/10.1016/j.jtrangeo.2020.102671.\n\n\nBoisjoly, Geneviève, and Ahmed M. El-Geneidy. 2017. “How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans.” Transport Policy 55 (April): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nDijst, Martin, Tom de Jong, and Jan Ritsema van Eck. 2002. “Opportunities for Transport Mode Change: An Exploration of a Disaggregated Approach.” Environment and Planning B: Planning and Design 29 (3): 413–30. https://doi.org/10.1068/b12811.\n\n\nDong, Xiaojing, Moshe E. Ben-Akiva, John L. Bowman, and Joan L. Walker. 2006. “Moving from Trip-Based to Activity-Based Measures of Accessibility.” Transportation Research Part A: Policy and Practice 40 (2): 163–80. https://doi.org/10.1016/j.tra.2005.05.002.\n\n\nEl-Geneidy, Ahmed, David Levinson, Ehab Diab, Genevieve Boisjoly, David Verbich, and Charis Loong. 2016. “The Cost of Equity: Assessing Transit Accessibility and Social Disparity Using Total Travel Cost.” Transportation Research Part A: Policy and Practice 91 (September): 302–16. https://doi.org/10.1016/j.tra.2016.07.003.\n\n\nHerszenhut, Daniel, Rafael H. M. Pereira, Licinio da Silva Portugal, and Matheus Henrique de Sousa Oliveira. 2022. “The Impact of Transit Monetary Costs on Transport Inequality.” Journal of Transport Geography 99 (February): 103309. https://doi.org/10.1016/j.jtrangeo.2022.103309.\n\n\nKim, Hyun-Mi, and Mei-Po Kwan. 2003. “Space-Time Accessibility Measures: A Geocomputational Algorithm with a Focus on the Feasible Opportunity Set and Possible Activity Duration.” Journal of Geographical Systems 5 (1): 71–91. https://doi.org/10.1007/s101090300104.\n\n\nLevinson, David, and David King. 2020. Transport Access Manual: A Guide for Measuring Connection Between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nLuo, Wei, and Fahui Wang. 2003. “Measures of Spatial Accessibility to Health Care in a GIS Environment: Synthesis and a Case Study in the Chicago Region.” Environment and Planning B: Planning and Design 30 (6): 865–84. https://doi.org/10.1068/b29120.\n\n\nMiller, Eric J. 2018. “Accessibility: Measurement and Application in Transportation Planning.” Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nNeutens, Tijs, Matthias Delafontaine, Darren M. Scott, and Philippe De Maeyer. 2012. “An Analysis of Day-to-Day Variations in Individual Spacetime Accessibility.” Journal of Transport Geography, Special Issue on Time Geography, 23 (July): 81–91. https://doi.org/10.1016/j.jtrangeo.2012.04.001.\n\n\nNeutens, Tijs, Tim Schwanen, Frank Witlox, and Philippe De Maeyer. 2010. “Equity of Urban Service Delivery: A Comparison of Different Accessibility Measures.” Environment and Planning A: Economy and Space 42 (7): 1613–35. https://doi.org/10.1068/a4230.\n\n\nPaez, Antonio, Christopher D. Higgins, and Salvatore F. Vivona. 2019. “Demand and Level of Service Inflation in Floating Catchment Area (FCA) Methods.” Edited by Tayyab Ikram Shah. PLOS ONE 14 (6): e0218773. https://doi.org/10.1371/journal.pone.0218773.\n\n\nPáez, Antonio, Darren M. Scott, and Catherine Morency. 2012. “Measuring Accessibility: Positive and Normative Implementations of Various Accessibility Indicators.” Journal of Transport Geography 25 (November): 141–53. https://doi.org/10.1016/j.jtrangeo.2012.03.016.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, and Angela Hull. 2015. “Accessibility Instruments for Planning Practice: A Review of European Experiences.” Journal of Transport and Land Use, June. https://doi.org/10.5198/jtlu.2015.585.\n\n\nVenter, Christoffel. 2016. “Assessing the Potential of Bus Rapid Transit-Led Network Restructuring for Enhancing Affordable Access to Employment The Case of Johannesburg’s Corridors of Freedom.” Research in Transportation Economics 59 (November): 441–49. https://doi.org/10.1016/j.retrec.2016.05.006."
  },
  {
    "objectID": "s2_calculo.en.html",
    "href": "s2_calculo.en.html",
    "title": "SECTION 2: How to measure urban accessibility",
    "section": "",
    "text": "Calculating accessibility levels in a study area involves two major steps: first, we need to calculate a travel cost matrix between the origins and destinations of this area; next, we calculate the accessibility from each origin, taking into consideration the transport costs between origin-destination pairs and the number of opportunities in each destination. In this section, we will learn how to execute both of these steps using the R programming language. We will also learn about the data required in each step and the pros and cons of the different methods that can be used to generate accessibility estimates."
  },
  {
<<<<<<< Updated upstream
    "objectID": "1_conceito.html#diferença-entre-acessibilidade-e-mobilidade",
    "href": "1_conceito.html#diferença-entre-acessibilidade-e-mobilidade",
    "title": "1  O que é acessibilidade?",
    "section": "1.4 Diferença entre acessibilidade e mobilidade",
    "text": "1.4 Diferença entre acessibilidade e mobilidade\nÉ importante esclarecer a diferença entre a acessibilidade e outro conceito muito presente em nosso dia a dia: a mobilidade. Infelizmente, a diferença entre esses conceitos é frequentemente ignorada, mesmo por pesquisadores e planejadores que lidam com esses temas diariamente.\nAfinal de contas, existe uma grande intersecção temática entre a acessibilidade e o que se entende por “mobilidade urbana” enquanto área de pesquisa e política pública: uma área que lida com os deslocamentos das pessoas e que está relacionada ao planejamento de sistemas de transporte coletivo e individual, ao planejamento de redes cicloviárias e de pedestres etc. Nesse contexto, não é raro, por exemplo, ouvir que um determinado grupo “tem menos mobilidade” do que outro, quando, na verdade, o correto seria dizer que esse grupo apresenta piores condições de acessibilidade. Qual é, então, a diferença entre acessibilidade e mobilidade?\nNa literatura científica e de planejamento urbano e de transportes, o conceito de mobilidade diz respeito aos padrões de viagens que as pessoas efetivamente fazem no seu dia a dia. Por exemplo, quantas viagens foram feitas, quais modos de transporte foram usados, qual a distância média das viagens, quanto tempo se gasta no deslocamento casa-trabalho etc.\nInformações de mobilidade são tradicionalmente captadas por meio de pesquisas domiciliares origem-destino. Recentemente, com o surgimento de novas tecnologias digitais, dados de GPS de telefones celulares, de cartões de bilhetagem eletrônica, de radares e semáforos urbanos, entre outros, também vêm sendo usados com a finalidade de descrever os deslocamentos diários da população (Anda, Erath, e Fourie 2017; Kandt e Batty 2021). Dados e análises de mobilidade trazem informações sobre o uso do sistema de transportes e sobre os padrões de viagens de indivíduos de diferentes grupos socioeconômicos, o que nos permite captar importantes aspectos do desempenho econômico e ambiental das cidades e do bem-estar da população.\nO conceito de acessibilidade, por sua vez, está intrinsecamente relacionado ao potencial que as pessoas têm de alcançar atividades e oportunidades. Enquanto uma análise de mobilidade foca, por exemplo, no tempo que as pessoas levam diariamente de sua casa ao seu trabalho, uma análise de acessibilidade tenta identificar questões como a quantidade de empregos que podem ser alcançados dentro de um determinado custo de viagem, ou se as pessoas conseguiriam alcançar serviços públicos em um tempo de viagem tido como razoável.\nA acessibilidade trata do quão fácil/factível é alcançar um local, enquanto a mobilidade trata dos meios de deslocamento efetivamente utilizados para chegar até ele. Níveis de acessibilidade são, portanto, medidas potenciais, ao passo que os dados de mobilidade descrevem padrões reais, realizados.\nTradicionalmente, o planejamento urbano e de transportes tem como foco a mobilidade (Banister 2011; Vasconcellos 2018; Levinson e King 2020). Ainda hoje, o foco na mobilidade motiva políticas que priorizam a circulação de automóveis e visam aumentar a velocidade e a fluidez de trânsito para reduzir congestionamentos e, consequentemente, tempos de deslocamento (Levine, Grengs, e Merlin 2019). Essas políticas, no entanto, tendem a dar um enfoque quantitativo na mobilidade: aumentar o número de viagens, aumentar a velocidade média, diminuir o tempo de congestionamento etc.\nNesse contexto, portanto, a mobilidade é vista como um fim em si mesma, e “melhorá-la” depende de políticas com soluções puramente técnicas que devem “otimizar” os aspectos quantitativos mencionados anteriormente. A mobilidade, no entanto, não pode ser encarada como uma finalidade em si. As pessoas raramente se deslocam pelo simples prazer de se deslocar. Ao contrário, na grande maioria das vezes as pessoas se locomovem para acessar as atividades localizadas no destino da viagem.\nNesse sentido, tem-se observado um crescente consenso entre pesquisadores e agências de transporte de que o objetivo de uma política de transportes é melhorar o acesso da população a bens e oportunidades (Pereira, Schwanen, e Banister 2017; Martens 2012; Bertolini, le Clercq, e Kapoen 2005). Se o que as pessoas querem é acessar atividades, precisamos pensar em formas de planejamento que resultem em políticas que facilitem seu acesso a tais atividades sem necessariamente promover a motorização e o aumento da velocidade no trânsito, que implicam o crescimento de externalidades econômicas, ambientais, de saúde pública, entre outras.\nO que observamos, portanto, é uma mudança de paradigma no planejamento urbano e de transportes: a busca por padrões de viagem mais sustentáveis implica a mudança do foco da mobilidade para a acessibilidade (Banister 2008; Cervero 2005; Levine, Grengs, e Merlin 2019).\nDesse modo, políticas de aumento de velocidade nas vias e de expansão de faixas, por exemplo, podem ser substituídas por políticas de promoção de maior mix de uso do solo e de aproximação de pessoas e atividades, promovendo maior integração entre planejamento de transportes e de uso do solo. Assim, a mudança de foco da mobilidade para a acessibilidade urbana abre um leque maior de possíveis instrumentos e ações de políticas públicas que buscam promover um desenvolvimento urbano mais integrado e calcado na promoção da sustentabilidade e da inclusão social (Banister 2011; Levine, Grengs, e Merlin 2019).\n\n\n\n\nAnda, Cuauhtemoc, Alexander Erath, e Pieter Jacobus Fourie. 2017. «Transport Modelling in the Age of Big Data». International Journal of Urban Sciences 21 (sup1): 19–42. https://doi.org/10.1080/12265934.2017.1281150.\n\n\nBanister, David. 2008. «The Sustainable Mobility Paradigm». Transport Policy 15 (2): 73–80. https://doi.org/10.1016/j.tranpol.2007.10.005.\n\n\n———. 2011. «The Trilogy of Distance, Speed and Time». Journal of Transport Geography 19 (4): 950–59. https://doi.org/10.1016/j.jtrangeo.2010.12.004.\n\n\nBertolini, L., F. le Clercq, e L. Kapoen. 2005. «Sustainable Accessibility: A Conceptual Framework to Integrate Transport and Land Use Plan-Making. Two Test-Applications in the Netherlands and a Reflection on the Way Forward». Transport Policy 12 (3): 207–20. https://doi.org/10.1016/j.tranpol.2005.01.006.\n\n\nCervero, Robert. 2005. «Accessible Cities and Regions: A Framework for Sustainable Transport and Urbanism in the 21st Century». Center for Future Urban Transport Working Paper, n.º UCB-ITS-VWP-2005-3 (agosto).\n\n\nChurch, A, M Frost, e K Sullivan. 2000. «Transport and Social Exclusion in London». Transport Policy 7 (3): 195–205. https://doi.org/10.1016/S0967-070X(00)00024-X.\n\n\nFarrington, John, e Conor Farrington. 2005. «Rural Accessibility, Social Inclusion and Social Justice: Towards Conceptualisation». Journal of Transport Geography 13 (1): 1–12. https://doi.org/10.1016/j.jtrangeo.2004.10.002.\n\n\nGeurs, Karst, e Bert van Wee. 2004. «Accessibility Evaluation of Land-Use and Transport Strategies: Review and Research Directions». Journal of Transport Geography 12 (2): 127–40. https://doi.org/10.1016/j.jtrangeo.2003.10.005.\n\n\nKandt, Jens, e Michael Batty. 2021. «Smart Cities, Big Data and Urban Policy: Towards Urban Analytics for the Long Run». Cities 109 (fevereiro): 102992. https://doi.org/10.1016/j.cities.2020.102992.\n\n\nLevine, Jonathan, Joe Grengs, e Louis A. Merlin. 2019. From Mobility to Accessibility: Transforming Urban Transportation and Land-Use Planning. Cornell University Press.\n\n\nLevinson, David, e David King. 2020. Transport Access Manual: A Guide for Measuring Connection between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nLucas, Karen, Giulio Mattioli, Ersilia Verlinghieri, e Alvaro Guzman. 2016. «Transport Poverty and Its Adverse Social Consequences». Proceedings of the Institution of Civil Engineers - Transport 169 (6): 353–65. https://doi.org/10.1680/jtran.15.00073.\n\n\nLuz, Gregório, e Licinio Portugal. 2022. «Understanding Transport-Related Social Exclusion through the Lens of Capabilities Approach». Transport Reviews 42 (4): 503–25. https://doi.org/10.1080/01441647.2021.2005183.\n\n\nMartens, Karel. 2012. «Justice in Transport as Justice in Accessibility: Applying Walzer’s “Spheres of Justice” to the Transport Sector». Transportation 39 (6): 1035–53. https://doi.org/10.1007/s11116-012-9388-7.\n\n\nMiller, Eric J. 2018. «Accessibility: Measurement and Application in Transportation Planning». Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nNeutens, Tijs, Tim Schwanen, Frank Witlox, e Philippe De Maeyer. 2010. «Equity of Urban Service Delivery: A Comparison of Different Accessibility Measures». Environment and Planning A: Economy and Space 42 (7): 1613–35. https://doi.org/10.1068/a4230.\n\n\nPáez, Antonio, Darren M. Scott, e Catherine Morency. 2012. «Measuring Accessibility: Positive and Normative Implementations of Various Accessibility Indicators». Journal of Transport Geography 25 (novembro): 141–53. https://doi.org/10.1016/j.jtrangeo.2012.03.016.\n\n\nPereira, Rafael H. M., e Alex Karner. 2021. «Transportation Equity». Em International Encyclopedia of Transportation, editado por Roger Vickerman, 271–77. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10053-3.\n\n\nPereira, Rafael H. M., Tim Schwanen, e David Banister. 2017. «Distributive Justice and Equity in Transportation». Transport Reviews 37 (2): 170–91. https://doi.org/10.1080/01441647.2016.1257660.\n\n\nvan Wee, Bert. 2022. «Accessibility and Equity: A Conceptual Framework and Research Agenda». Journal of Transport Geography 104 (outubro): 103421. https://doi.org/10.1016/j.jtrangeo.2022.103421.\n\n\nVasconcellos, Eduardo Alcantara. 2018. «Urban Transport Policies in Brazil: The Creation of a Discriminatory Mobility System». Journal of Transport Geography 67 (fevereiro): 85–91. https://doi.org/10.1016/j.jtrangeo.2017.08.014."
=======
    "objectID": "3_calculando_acesso.en.html",
    "href": "3_calculando_acesso.en.html",
    "title": "3  Calculating accessibility estimates in R",
    "section": "",
    "text": "The first step to estimate the accessibility levels in a study area is to calculate the travel cost matrix between the various origins and destinations that make up this area. As previously mentioned, this cost is generally represented by the travel time between two points in the scientific literature and in transport planning practice (El-Geneidy et al. 2016; Venter 2016), although recent studies have also considered other factors, such as trip monetary costs and the comfort of a trip between origins and destinations (Arbex and Cunha 2020; Herszenhut et al. 2022). In this book, we will focus on travel time matrices as they are the most widely used in the literature and in practice, and we will cover other types of costs in a future book on advanced accessibility analysis in R.\nCurrently, the easiest and fastest way to generate a travel time matrix in R is using the {r5r} package (Pereira et al. 2021), developed by the Access to Opportunities Project team. The package provides a simple and friendly interface to the R5 multimodal transport routing engine, developed by Conveyal1.\n\n\nInstalling {r5r} works the same as installing any other R package (all code snippets from this point onward must be run in an R session).\n\ninstall.packages(\"r5r\")\n\nIn addition to R, {r5r} also requires installing Java 112. Use the command below to check the version of Java installed in your computer.\n\ncat(processx::run(\"java\", args = \"-version\")$stderr)\n\nopenjdk version \"11.0.18\" 2023-01-17\nOpenJDK Runtime Environment (build 11.0.18+10-post-Ubuntu-0ubuntu120.04.1)\nOpenJDK 64-Bit Server VM (build 11.0.18+10-post-Ubuntu-0ubuntu120.04.1, mixed mode, sharing)\n\n\nAs we can see, the version installed in the book is compatible with {r5r}. If the version installed in your machine is not compatible (i.e. if running the code above results in an output mentioning version 12 or 1.8.0, for example), please install Java 11.\n\n\n\nUsing {r5r} requires different types of data. The list below describes the required and optional data sets and indicates where you could obtain these data:\n\nStreet network (required): a file in .pbf format containing the street network and pedestrian infrastructure as described by OpenStreetMap. It can be downloaded using:\n\nosmextract, R package;\nGeofabrik, website;\nHOT Export Tool, website;\nBBBike Extract Service, website.\n\n\n\n\n\n\n\n\nOpenStreetMap data quality\n\n\n\nOpenStreetMap (OSM) is a geographic database that provides information about street networks, buildings, parks, etc. OSM is maintained by a community of volunteers, so the coverage and quality of its data can widely vary between regions (Barrington-Leigh and Millard-Ball 2017). OSM data tend to have better coverage and quality in more developed regions and in urban areas with large populations (Barrington-Leigh and Millard-Ball 2017; Camboim, Bravo, and Sluter 2015).\n\n\n\nPublic transport network (optional): one or more GTFS files describing the public transport network of the study area. If absent, public transport trips are not considered in the travel time matrix. This type of data can be downloaded using:\n\n{tidytransit}, R package;\nTransitland, website;\nIn Chapter 4 (Table 4.9) we also show where to download the GTFS files of Brazilian cities that share their data publicly.\n\nTopography (optional): a raster file containing the Digital Elevation Model data of the study area in .tif/.tiff format. This data set is required if you wish to consider the effects of topography on walking and cycling travel times. It can be downloaded using:\n\nelevatr, R package;\nNasa’s SRTMGL1, website.\n\n\nThese data sets should be saved in a single directory, which should preferably not contain any other files. As we will see below, {r5r} combines all the data saved in this directory to create a multimodal transport network that is used for routing trips between origin-destination pairs and, consequently, for calculating travel time matrices. Please note that you can have more than one GTFS file in the same directory, in which case {r5r} considers the public transport networks of all feeds together. The street network and the topography of the study area, however, must be each one described by a single file. Assuming that R scripts are saved in a directory called R, a possible file structure is shown below:\n\n\n/tmp/RtmpGtdk2w/accessibility_project\n├── R\n│   ├── script1.R\n│   └── script2.R\n└── r5\n    ├── public_transport_network.zip\n    ├── street_network.osm.pbf\n    └── topography.tif\n\n\nTo illustrate the features of {r5r}, we will use a small data sample from the city of Porto Alegre, Brazil. These data are available within {r5r} itself, and its path can be accessed with the following command:\n\ndata_path <- system.file(\"extdata/poa\", package = \"r5r\")\ndata_path\n\n[1] \"/home/dhersz/Documents/repos/intro_access_book/renv/library/R-4.3/x86_64-pc-linux-gnu/r5r/extdata/poa\"\n\n\n\nfs::dir_tree(data_path)\n\n\n\n/home/dhersz/Documents/repos/intro_access_book/renv/library/R-4.3/x86_64-pc-linux-gnu/r5r/extdata/poa\n├── poa_elevation.tif\n├── poa_eptc.zip\n├── poa_hexgrid.csv\n├── poa_osm.pbf\n├── poa_points_of_interest.csv\n└── poa_trensurb.zip\n\n\nThis directory contains four files that we will use throughout this chapter: - An OpenStreetMap’s street network: poa_osm.pbf; - A GTFS feed describing some of the city’s bus routes: poa_eptc.zip; - A GTFS feed describing some of the city’s train route: poa_trensurb.zip; - The digital elevation model of the city: poa_elevation.tif; - The poa_hexgrid.csv file, containing the geographic coordinates of the centroids of a regular hexagonal grid covering the entire study area and information about the number of residents, jobs, health care facilities and schools in each grid cell. These points will be used as the origins and destinations when calculating the travel time matrix.\n\n\n\nBefore calculating the travel time matrix, we need to increase the memory available to run Java processes, used by the underlying R5 routing engine. This is necessary because R allocates only 512 MB of memory to Java processes by default, which is often not enough to calculate large matrices with {r5r}. To increase the available memory to 2 GB, for example, we use the following command at the beginning of the script, even before loading the R packages that will be used in our analysis:\n\noptions(java.parameters = \"-Xmx2G\")\n\nWe can then proceed with the travel time matrix calculation, which we carry out in two steps. First, we need to generate a multimodal transport network that will be used to route trips between origin-destination pairs. To do this, we load {r5r} and use the setup_r5() function, which downloads the R5 routing engine and uses it to build the network. This function receives the path to the directory where the input data is saved. The function saves to this directory some files describing the routing network, and it outputs a connection to R5, which we named r5r_core in this example. This connection is responsible for linking the function calls with the transport network and is used to calculate the travel time matrix.\n\nlibrary(r5r)\n\nr5r_core <- setup_r5(data_path, verbose = FALSE)\n\nfs::dir_tree(data_path)\n\n/home/dhersz/Documents/repos/intro_access_book/renv/library/R-4.3/x86_64-pc-linux-gnu/r5r/extdata/poa\n├── fares\n│   └── fares_poa.zip\n├── network.dat\n├── network_settings.json\n├── poa_elevation.tif\n├── poa_eptc.zip\n├── poa_hexgrid.csv\n├── poa_osm.pbf\n├── poa_osm.pbf.mapdb\n├── poa_osm.pbf.mapdb.p\n├── poa_points_of_interest.csv\n└── poa_trensurb.zip\n\n\nThe second and final step is to actually calculate the travel time matrix with the travel_time_matrix() function. As basic inputs, the function receives the connection with R5 created above, origin and destination points as data.frames with columns id, lon and lat, the mode of transport considered, the departure time, the maximum walking time allowed when accessing public transport stations from the origin and when egressing from the last stop to the destination, and the maximum travel time allowed for trips. The function also accepts several other inputs, such as the walking speed and the maximum number of public transport legs allowed, among others. For more information on each parameter, please refer to the function documentation in an R session (with the commands ?travel_time_matrix or help(\"travel_time_matrix”)) or on {r5r} website.\n\n# read data.frame with grid centroids\npoints <- data.table::fread(file.path(data_path, \"poa_hexgrid.csv\"))\n\nttm <- travel_time_matrix(\n  r5r_core,\n  origins = points,\n  destinations = points,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"13-05-2019 14:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 120,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(ttm)\n\n           from_id           to_id travel_time_p50\n1: 89a901291abffff 89a901291abffff               1\n2: 89a901291abffff 89a9012a3cfffff              71\n3: 89a901291abffff 89a901295b7ffff              41\n4: 89a901291abffff 89a901284a3ffff              57\n5: 89a901291abffff 89a9012809bffff              43\n6: 89a901291abffff 89a901285cfffff              35\n\n\nIn practice, travel_time_matrix() finds the fastest route from each origin to all possible destinations taking into account the transport mode, the departure time and the other inputs set by the user. For this, {r5r} considers door-to-door travel times: in the case of a trip by public transport, for example, the total travel time includes a) the walking time from the origin to the public transport stop; (b) the waiting time at the stop; c) the in-vehicle time; and d) the walking time from the last public transport stop to the destination. When more than one public transport route is used, {r5r} also considers the time spent on transfers, which consist of walking between stops and waiting for the next vehicle.\n\n\n\n\n\n\nThe travel_time_matrix() function uses an extension of the RAPTOR routing algorithm (Conway, Byrd, and van der Linden 2017), making R5 extremely fast. Depending on the number of origin-destination pairs, {r5r} can calculate travel time matrices between 6 and 200 times faster than other multimodal routing softwares (Higgins et al. 2022)."
>>>>>>> Stashed changes
  },
  {
    "objectID": "3_calculando_acesso.en.html#calculating-accessibility",
    "href": "3_calculando_acesso.en.html#calculating-accessibility",
    "title": "3  Calculating accessibility estimates in R",
    "section": "3.2 Calculating accessibility",
    "text": "3.2 Calculating accessibility\nHaving calculated the travel time matrix between the origins and destinations, we need to use this travel matrix to calculate accessibility levels in the study area. For this, we will use the {accessibility}3 package, also developed by the Access to Opportunities Project team, which provides several functions to calculate many accessibility measures. As basic inputs, all functions require a pre-calculated cost matrix (in our case, the travel time matrix calculated in the previous section) and some land use data, such as the number of opportunities in each cell that covers the study area.\n\n3.2.1 Cumulative opportunities measure\nThe cumulative_cutoff() function is used to calculate cumulative opportunity accessibility metrics, and it indicates the number of opportunities that can be reached within a given travel cost limit. In the example below, we first load the {accessibility} package and then calculate the number of schools that can be reached in 30 minutes from each origin.\n\nlibrary(accessibility)\n\n# rename column to use package {accessibility}\ndata.table::setnames(ttm, \"travel_time_p50\", \"travel_time\")\n\ncum_opportunities <- cumulative_cutoff(\n  ttm,\n  land_use_data = points,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  cutoff = 30\n)\n\nhead(cum_opportunities)\n\n                id schools\n1: 89a901291abffff      23\n2: 89a9012a3cfffff       0\n3: 89a901295b7ffff      18\n4: 89a901284a3ffff       4\n5: 89a9012809bffff      20\n6: 89a901285cfffff      84\n\n\n\n\n3.2.2 Minimum travel cost\nThe cost_to_closest() function, on the other hand, calculates the minimum travel cost required to reach a certain number of opportunities. With the code below, for example, we calculate the minimum travel time to reach the nearest hospital from each origin.\n\nmin_time <- cost_to_closest(\n  ttm,\n  land_use_data = points,\n  opportunity = \"healthcare\",\n  travel_cost = \"travel_time\"\n)\n\nhead(min_time)\n\n                id travel_time\n1: 89a9012124fffff         Inf\n2: 89a9012126bffff          19\n3: 89a9012127bffff          16\n4: 89a90128003ffff          14\n5: 89a90128007ffff          11\n6: 89a9012800bffff          13\n\n\n\n\n3.2.3 Gravity measures\nThe gravity() function calculates gravity measures of accessibility - those in which the weight of each opportunity gradually decreases with the increase of travel cost. As many different decay functions can be used to calculate gravity measures, such as negative exponential, inverse power, etc, this function receives an additional input: the decay function that should be considered. The example below calculates accessibility to schools using a negative exponential gravity measure with a decay parameter of 0.2.\n\nnegative_exp_grav <- gravity(\n  ttm,\n  land_use_data = points,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  decay_function = decay_exponential(0.2)\n)\n\nhead(negative_exp_grav)\n\n                id     schools\n1: 89a901291abffff 0.428108826\n2: 89a9012a3cfffff 0.003987477\n3: 89a901295b7ffff 0.606786304\n4: 89a901284a3ffff 0.079661746\n5: 89a9012809bffff 0.494632773\n6: 89a901285cfffff 1.987657134\n\n\n\n\n3.2.4 Competitive measures\nFinally, the floating_catchment_area() function calculates accessibility levels considering the competition for opportunities using different floating catchment area (FCA) methods. Because several FCA methods can be used, the function requires users to indicate which method should be used. In addition, just like the gravity() function, the decay function must also be defined by the user. The following code shows an example of how to calculate accessibility to health facilities using the Balanced Floating Catchment Area (BFCA) method (Paez, Higgins, and Vivona 2019) and an exponential decay function with a decay parameter of 0.05.\n\nbfca_competition <- floating_catchment_area(\n  ttm,\n  land_use_data = points,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  demand = \"population\",\n  method = \"bfca\",\n  decay_function = decay_exponential(0.05)\n)\n\nhead(bfca_competition)\n\n                id      schools\n1: 89a901291abffff 2.628973e-04\n2: 89a9012a3cfffff 5.875302e-05\n3: 89a901295b7ffff 2.123543e-04\n4: 89a901284a3ffff 1.414356e-04\n5: 89a9012809bffff 2.254543e-04\n6: 89a901285cfffff 3.901031e-04\n\n\nThe functions presented in this section can also receive other inputs not explicitly mentioned here. For more information on each parameter, please refer to the documentation of the {accessibility} package on its website.\n\n\n3.2.5 Calculating accessibility with {r5r}\nIn the previous two sections, we learned how to calculate accessibility levels step-by-step. For didactic purposes, it is important to understand that calculating accessibility first requires calculating a travel cost matrix which is then used to estimate accessibility levels. However, {r5r} also includes an accessibility() function that calculates accessibility levels in a single call, which is much faster and does not require intermediate steps.\nSimilar to the travel time matrix function, accessibility() receives as inputs a connection to R5, origins, destinations, transport mode, departure time, among other arguments. Additionally, it also requires that users list which opportunities and decay function should be considered, as well as the value of the cost threshold/decay parameter, depending on the decay function. The example below shows how to use this function to calculate a cumulative opportunity metric (decay_function = \"step\"). In this example, we calculate the number of schools accessible by walking and public transport in 30 minutes (cutoffs = 30).\n\nr5r_access <- accessibility(\n  r5r_core,\n  origins = points,\n  destinations = points,\n  opportunities_colname = \"schools\",\n  decay_function = \"step\",\n  cutoffs = 30,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"13-05-2019 14:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 120,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(r5r_access)\n\n                id opportunity percentile cutoff accessibility\n1: 89a901291abffff     schools         50     30            21\n2: 89a9012a3cfffff     schools         50     30             0\n3: 89a901295b7ffff     schools         50     30            16\n4: 89a901284a3ffff     schools         50     30             4\n5: 89a9012809bffff     schools         50     30            17\n6: 89a901285cfffff     schools         50     30            78\n\n\nThere is one small difference between r5r::accessibility() and accessibility::cumulative_cutoff(). In r5r::accessibility(), the function only considers trips below the travel time threshold, while accessibility::cumulative_cutoff() considers trips with costs equal or below the maximum threshold. That is, to perform the same operation above but with cumulative_cutoff() we need to set a cutoff of 29 minutes, not 30. We compare the results of the two functions with the code below.\n\ncum_cutoff_29 <- cumulative_cutoff(\n    ttm,\n    land_use_data = points,\n    opportunity = \"schools\",\n    travel_cost = \"travel_time\",\n    cutoff = 29\n)\n\naccess_comparison <- merge(\n  r5r_access,\n  cum_cutoff_29,\n  by = \"id\"\n)\n\ndata.table::setnames(\n  access_comparison,\n  old = c(\"accessibility\", \"schools\"),\n  new = c(\"r5r_access\", \"accessibility_access\")\n)\n\nhead(access_comparison[, .(id, r5r_access, accessibility_access)])\n\n                id r5r_access accessibility_access\n1: 89a9012124fffff          1                    1\n2: 89a9012126bffff         12                   12\n3: 89a9012127bffff         14                   14\n4: 89a90128003ffff         30                   30\n5: 89a90128007ffff         21                   21\n6: 89a9012800bffff         29                   29\n\n\nAs we can see, the results of the two functions are identical after this small adjustment. The main difference between the two methods, however, is that the “intermediate” information of travel time between origins and destinations is not available when using r5r::accessibility(). Still, this workflow can be a good alternative for people who are solely interested in the accessibility levels and do not require the travel time between points in their analyses. Also, note that the {accessibility} package has a wider range of accessibility indicators and it gives more flexibility for users to define any decay function.\n\n\n\n\n\n\nConsidering other types of travel costs when calculating accessibility\n\n\n\nAnother difference between {r5r} accessibility function and {accessibility} functions is the fact that the latter can work with various types of travel costs, such as time, monetary cost, comfort, etc. {r5r} function, however, is less flexible, and only considers travel time constraints."
  },
  {
<<<<<<< Updated upstream
    "objectID": "2_indicadores.html#medidas-baseadas-em-pessoas",
    "href": "2_indicadores.html#medidas-baseadas-em-pessoas",
    "title": "2  Medidas de acessibilidade",
    "section": "2.2 Medidas baseadas em pessoas",
    "text": "2.2 Medidas baseadas em pessoas\nMedidas de acessibilidade baseadas em pessoas são sensíveis não apenas à distribuição espacial de atividades e à configuração e o desempenho da rede de transporte, mas também levam em consideração como as características pessoais de cada indivíduo (como sexo, idade, deficiência física etc), e até questões como participação em atividades e compromissos pessoais, podem afetar sua facilidade de acesso a determinadas atividades. Esta categoria inclui, por exemplo, indicadores baseados em atividades (Dong et al. 2006) e medidas de espaço-tempo Neutens et al. (2012).\nVantagens e desvantagens: embora indicadores desta categoria sejam mais sofisticados, eles costumam demandar grandes quantidades de dados, como registros de diários de viagem, pesquisas domiciliares tipo origem-destino etc. Por isso, o cálculo dessas medidas é computacionalmente mais intensivo, o que faz com que elas sejam menos utilizadas do que as medidas baseadas em lugares Miller (2018). Como medidas baseadas em pessoas tendem a não ser agregadas em um indicador sintético (exatamente por levarem em conta particularidades de cada indivíduo em seu cálculo, que seriam desconsideradas no cálculo de um valor médio), a comunicação de seus resultados também costuma ser mais complexa.\n\n\n\n\nArbex, Renato, e Claudio B. Cunha. 2020. «Estimating the Influence of Crowding and Travel Time Variability on Accessibility to Jobs in a Large Public Transport Network Using Smart Card Big Data». Journal of Transport Geography 85: 102671. https://doi.org/10.1016/j.jtrangeo.2020.102671.\n\n\nBoisjoly, Geneviève, e Ahmed M. El-Geneidy. 2017. «How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans». Transport Policy 55 (abril): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nDijst, Martin, Tom de Jong, e Jan Ritsema van Eck. 2002. «Opportunities for Transport Mode Change: An Exploration of a Disaggregated Approach». Environment and Planning B: Planning and Design 29 (3): 413–30. https://doi.org/10.1068/b12811.\n\n\nDong, Xiaojing, Moshe E. Ben-Akiva, John L. Bowman, e Joan L. Walker. 2006. «Moving from Trip-Based to Activity-Based Measures of Accessibility». Transportation Research Part A: Policy and Practice 40 (2): 163–80. https://doi.org/10.1016/j.tra.2005.05.002.\n\n\nEl-Geneidy, Ahmed, David Levinson, Ehab Diab, Genevieve Boisjoly, David Verbich, e Charis Loong. 2016. «The Cost of Equity: Assessing Transit Accessibility and Social Disparity Using Total Travel Cost». Transportation Research Part A: Policy and Practice 91 (setembro): 302–16. https://doi.org/10.1016/j.tra.2016.07.003.\n\n\nHerszenhut, Daniel, Rafael H. M. Pereira, Licinio da Silva Portugal, e Matheus Henrique de Sousa Oliveira. 2022. «The Impact of Transit Monetary Costs on Transport Inequality». Journal of Transport Geography 99 (fevereiro): 103309. https://doi.org/10.1016/j.jtrangeo.2022.103309.\n\n\nKim, Hyun-Mi, e Mei-Po Kwan. 2003. «Space-Time Accessibility Measures: A Geocomputational Algorithm with a Focus on the Feasible Opportunity Set and Possible Activity Duration». Journal of Geographical Systems 5 (1): 71–91. https://doi.org/10.1007/s101090300104.\n\n\nLevinson, David, e David King. 2020. Transport Access Manual: A Guide for Measuring Connection between People and Places. Committee of the Transport Access Manual, University of Sydney.\n\n\nLuo, Wei, e Fahui Wang. 2003. «Measures of Spatial Accessibility to Health Care in a GIS Environment: Synthesis and a Case Study in the Chicago Region». Environment and Planning B: Planning and Design 30 (6): 865–84. https://doi.org/10.1068/b29120.\n\n\nMiller, Eric J. 2018. «Accessibility: Measurement and Application in Transportation Planning». Transport Reviews 38 (5): 551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nNeutens, Tijs, Matthias Delafontaine, Darren M. Scott, e Philippe De Maeyer. 2012. «An Analysis of Day-to-Day Variations in Individual SpaceTime Accessibility». Journal of Transport Geography, Special Issue on Time Geography, 23 (julho): 81–91. https://doi.org/10.1016/j.jtrangeo.2012.04.001.\n\n\nNeutens, Tijs, Tim Schwanen, Frank Witlox, e Philippe De Maeyer. 2010. «Equity of Urban Service Delivery: A Comparison of Different Accessibility Measures». Environment and Planning A: Economy and Space 42 (7): 1613–35. https://doi.org/10.1068/a4230.\n\n\nPaez, Antonio, Christopher D. Higgins, e Salvatore F. Vivona. 2019. «Demand and Level of Service Inflation in Floating Catchment Area (FCA) Methods». Editado por Tayyab Ikram Shah. PLOS ONE 14 (6): e0218773. https://doi.org/10.1371/journal.pone.0218773.\n\n\nPáez, Antonio, Darren M. Scott, e Catherine Morency. 2012. «Measuring Accessibility: Positive and Normative Implementations of Various Accessibility Indicators». Journal of Transport Geography 25 (novembro): 141–53. https://doi.org/10.1016/j.jtrangeo.2012.03.016.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, e Angela Hull. 2015. «Accessibility Instruments for Planning Practice: A Review of European Experiences». Journal of Transport and Land Use, junho. https://doi.org/10.5198/jtlu.2015.585.\n\n\nVenter, Christoffel. 2016. «Assessing the Potential of Bus Rapid Transit-Led Network Restructuring for Enhancing Affordable Access to Employment The Case of Johannesburg’s Corridors of Freedom». Research in Transportation Economics 59 (novembro): 441–49. https://doi.org/10.1016/j.retrec.2016.05.006."
=======
    "objectID": "3_calculando_acesso.en.html#accessibility-analyses",
    "href": "3_calculando_acesso.en.html#accessibility-analyses",
    "title": "3  Calculating accessibility estimates in R",
    "section": "3.3 Accessibility analyses",
    "text": "3.3 Accessibility analyses\nHaving calculated accessibility levels, we can now analyze them. There is a wide variety of analyses that can be performed using this data: diagnosis of urban accessibility conditions in different neighborhoods, analyses of inequalities in access to opportunities between different social groups, analyses of social exclusion and accessibility poverty, etc. In this section, however, we will present only two relatively simple and easy-to-communicate analyses: the spatial distribution of accessibility and its distribution among different income groups.\nThe spatial distribution of urban accessibility\nTo understand how urban accessibility is spatially distributed in a given city or region, we first need to obtain the spatial information of the points we have used as origins and destinations in our travel cost matrix. The points we used in the previous examples correspond to the centroids of a hexagonal grid based on the H3 index, developed by Uber (Brodsky 2018). The grid of Porto Alegre, as well as some sociodemographic and land use data aggregated to it, is made available by the Access to Opportunities Project team through the {aopdata} R package (Pereira et al. 2022). The package and its functions are presented in detail in Section 5. With the code below, we load the data visualization package, download the grid, and present it in a map.\n\nlibrary(ggplot2)\n\n# download spatial grid\npoa_grid <- aopdata::read_grid(\"Porto Alegre\")\n\n# keeps only the cells used in the travel time matrix\npoa_grid <- subset(poa_grid, id_hex %in% points$id)\n\n# plot map\nggplot(poa_grid) + geom_sf() + theme_minimal()\n\n\n\n\nTo spatially visualize accessibility data, we need to combine the table of accessibility estimates with the table that contains the spatial grid, using the hexagon identification columns as key columns. The code below shows how to merge the two tables and plot the map. In this example we are going to use the cumulative access to schools in 30 minutes that we had previously calculated.\n\nspatial_access <- merge(\n  poa_grid,\n  cum_cutoff_29,\n  by.x = \"id_hex\",\n  by.y = \"id\"\n)\n\nggplot(spatial_access) +\n  geom_sf(aes(fill = schools), color = NA) +\n  scale_fill_viridis_c(option = \"inferno\") +\n  labs(fill = \"Accessible\\nschools\") +\n  theme_minimal()\n\n\n\n\nAs the map above shows, accessibility levels tend to be higher in the city center, where there is a greater concentration of schools, and close to the major transport corridors, as the people who live closer to these high- capacity and speed corridors tend to access distant locations relatively fast. In contrast, people who live farther away from these corridors depend on lower frequency and operational speed modes (such as municipal buses, for example) and need to spend more time to reach the medium/high-capacity corridors. As a result, the accessibility levels of those living far from the city center and from high-capacity corridors tend to be relatively lower.\nThe distribution of urban accessibility across socioeconomic groups\nThe map above, although useful to reveal the places with the highest and lowest levels of accessibility, says nothing about the socioeconomic conditions of the people who have better or worse accessibility conditions in the region. To understand this, we need to join the previously calculated accessibility data with the demographic and economic information of the people living in each grid cell.\nIn the example below, we merge the accessibility estimates with the information of average income decile of the population in each cell (data also made available through the {aopdata} package).\n\n# download population and socioeconomic data\npoa_population <- aopdata::read_population(\"Porto Alegre\", showProgress = FALSE)\n\n# renames the columns with population count and income decile data\ndata.table::setnames(\n  poa_population,\n  old = c(\"P001\", \"R003\"),\n  new = c(\"pop_count\", \"decile\")\n)\n\n# merge accessibility and population tables\nsociodemographic_access <- merge(\n  spatial_access,\n  poa_population,\n  by = \"id_hex\"\n)\n\nhead(sociodemographic_access[, c(\"id_hex\", \"schools\", \"pop_count\", \"decile\")])\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -51.25678 ymin: -30.1111 xmax: -51.19031 ymax: -30.06699\nGeodetic CRS:  WGS 84\n           id_hex schools pop_count decile                       geometry\n1 89a9012124fffff       1       733      9 POLYGON ((-51.25083 -30.111...\n2 89a9012126bffff      12       355      9 POLYGON ((-51.25369 -30.106...\n3 89a9012127bffff      14       996     10 POLYGON ((-51.2538 -30.1094...\n4 89a90128003ffff      30      1742      4 POLYGON ((-51.19446 -30.071...\n5 89a90128007ffff      21       477      5 POLYGON ((-51.19744 -30.069...\n6 89a9012800bffff      29       501      4 POLYGON ((-51.19137 -30.070...\n\n\nWith the information on the income decile of each hexagon, we can analyze the distribution of accessibility levels by income groups. For this, we need to weigh the accessibility level of each origin by the number of people who reside there. This will tell us the accessibility distribution of the people located in cells with a given income decile. If we do not weigh the accessibility estimate by the population, we would have the accessibility distribution of the cells per se, and not of the people located in each cell. Since our analysis focuses on people, and not on the spatial units in which they are aggregated, weighting the accessibility levels by the population count is an essential part of it. The accessibility distribution of each decile is shown below.\n\nggplot(subset(sociodemographic_access, !is.na(decile))) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decile),\n      y = schools,\n      color = as.factor(decile),\n      weight = pop_count\n    )\n  ) +\n  labs(\n    color = \"Income\\ndecile\",\n    x = \"Income decile\",\n    y = \"Number of schools accessible\"\n  ) +\n  scale_color_brewer(palette = \"RdBu\") +\n  scale_x_discrete(\n    labels = c(\"D1\\npoorest\", paste0(\"D\", 2:9), \"D10\\nwealthiest\")\n  ) +\n  theme_minimal()\n\n\n\n\nThe chart is very clear: lower-income residents tend to have considerably lower accessibility levels than high-income residents. This is a common pattern in virtually all Brazilian cities (Pereira et al. 2019) and which results, to a large extent, from the spatial distribution patterns of low- and high-income communities: the wealthiest usually live in high-valued areas, close to large employment hubs (and opportunities for education, health, leisure, etc) and with relatively better supply of public transport. The poorest, on the other hand, tend to live in cities’ outskirts, where the land value is lower. Consequently, they also tend to live farther away from large concentrations of opportunities. Additionally, in most cases the provision of mid- and high-capacity public transport services is worse in regions with high concentrations of low-income residents. As a result, low-income communities have on average much lower accessibility than wealthier communities, as the chart illustrates.\n\n\n\n\nArbex, Renato, and Claudio B. Cunha. 2020. “Estimating the Influence of Crowding and Travel Time Variability on Accessibility to Jobs in a Large Public Transport Network Using Smart Card Big Data.” Journal of Transport Geography 85 (May): 102671. https://doi.org/10.1016/j.jtrangeo.2020.102671.\n\n\nBarrington-Leigh, Christopher, and Adam Millard-Ball. 2017. “The World’s User-Generated Road Map Is More Than 80% Complete.” PLOS ONE 12 (8): e0180698. https://doi.org/10.1371/journal.pone.0180698.\n\n\nBrodsky, Isaac. 2018. “H3: Uber’s Hexagonal Hierarchical Spatial Index.” Uber Engineering Blog. https://eng.uber.com/h3/.\n\n\nCamboim, Silvana Philippi, João Vitor Meza Bravo, and Claudia Robbi Sluter. 2015. “An Investigation into the Completeness of, and the Updates to, OpenStreetMap Data in a Heterogeneous Area in Brazil.” ISPRS International Journal of Geo-Information 4 (3): 1366–88. https://doi.org/10.3390/ijgi4031366.\n\n\nConway, Matthew Wigginton, Andrew Byrd, and Marco van der Linden. 2017. “Evidence-Based Transit and Land Use Sketch Planning Using Interactive Accessibility Methods on Combined Schedule and Headway-Based Networks.” Transportation Research Record: Journal of the Transportation Research Board 2653 (1): 45–53. https://doi.org/10.3141/2653-06.\n\n\nEl-Geneidy, Ahmed, David Levinson, Ehab Diab, Genevieve Boisjoly, David Verbich, and Charis Loong. 2016. “The Cost of Equity: Assessing Transit Accessibility and Social Disparity Using Total Travel Cost.” Transportation Research Part A: Policy and Practice 91 (September): 302–16. https://doi.org/10.1016/j.tra.2016.07.003.\n\n\nHerszenhut, Daniel, Rafael H. M. Pereira, Licinio da Silva Portugal, and Matheus Henrique de Sousa Oliveira. 2022. “The Impact of Transit Monetary Costs on Transport Inequality.” Journal of Transport Geography 99 (February): 103309. https://doi.org/10.1016/j.jtrangeo.2022.103309.\n\n\nHiggins, Christopher, Matthew Palm, Amber DeJohn, Luna Xi, James Vaughan, Steven Farber, Michael Widener, and Eric Miller. 2022. “Calculating Place-Based Transit Accessibility: Methods, Tools and Algorithmic Dependence.” Journal of Transport and Land Use 15 (1). https://doi.org/10.5198/jtlu.2022.2012.\n\n\nPaez, Antonio, Christopher D. Higgins, and Salvatore F. Vivona. 2019. “Demand and Level of Service Inflation in Floating Catchment Area (FCA) Methods.” Edited by Tayyab Ikram Shah. PLOS ONE 14 (6): e0218773. https://doi.org/10.1371/journal.pone.0218773.\n\n\nPereira, Rafael H. M., Carlos Kaue Vieira Braga, Bernardo Serra, and Vanessa Nadalin. 2019. “Desigualdades socioespaciais de acesso a oportunidades nas cidades brasileiras, 2019.” {Texto para Discuss\\~ao} 2535. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nPereira, Rafael H. M., Daniel Herszenhut, Carlos K. V. Braga, Diego B. Tomasiello, and Marcus Saraiva. 2022. “Aopdata: Data from the Access to Opportunities Project.” CRAN.\n\n\nPereira, Rafael H. M., Marcus Saraiva, Daniel Herszenhut, Carlos Kaue Vieira Braga, and Matthew Wigginton Conway. 2021. “R5r: Rapid Realistic Routing on Multimodal Transport Networks with R5 in R.” Transport Findings, March, 21262. https://doi.org/10.32866/001c.21262.\n\n\nVenter, Christoffel. 2016. “Assessing the Potential of Bus Rapid Transit-Led Network Restructuring for Enhancing Affordable Access to Employment The Case of Johannesburg’s Corridors of Freedom.” Research in Transportation Economics 59 (November): 441–49. https://doi.org/10.1016/j.retrec.2016.05.006."
>>>>>>> Stashed changes
  },
  {
    "objectID": "s3_dados_tp.en.html",
    "href": "s3_dados_tp.en.html",
    "title": "SECTION 3: Public transport data",
    "section": "",
    "text": "Public transport data is a key element of transport planning in general, and of accessibility analyses in particular. To be used with confidence, this data needs to be reliable and of simple inspection and interpretation.\nTo meet these criteria, transport agencies, decision makers and researchers have been trying to use data structured according to open and collaborative specifications - that is, whose format is decided upon by a community of different actors, including data producers (e.g. public transport agencies) and consumers (e.g. researchers and software developers). Although an open specification does not necessarily improve the quality and reliability of the data it describes, it brings many advantages that promote knowledge-sharing and the transparency of analyses and applications that depend on it - factors that, in turn, can substantially improve data quality and reliability.\nUsing a standard data format to represent public transport systems promotes sharing and developing many computational tools and softwares to analyze and use this data, which helps creating a space in which actors from different cities and countries can learn from and support each other. Thus, an application developed by a Brazilian transport agency can easily be used by a researcher in the United States, a Japanese developer or another transport agency in South Africa - as long as, of course, they organize their data in the same format. Moreover, the more widely this format is used, the greater the reliability of the specification itself, as multiple actors tend to expand their ability to use, interpret and inspect this data.\nThe open and collaborative data specification most widely used in public transport planning and operation is the GTFS format, short for General Transit Feed Specification. As shown in Chapter 3, GTFS data is also a key element when estimating urban accessibility levels by public transport. In this section, we will learn more about GTFS data, how it is structured, and how to work with it in R."
  },
  {
<<<<<<< Updated upstream
    "objectID": "3_calculando_acesso.html#sec-matrix",
    "href": "3_calculando_acesso.html#sec-matrix",
    "title": "3  Calculando estimativas de acessibilidade em R",
    "section": "3.1 Cálculo da matriz de tempo de viagem",
    "text": "3.1 Cálculo da matriz de tempo de viagem\nA primeira etapa necessária para estimar os níveis de acessibilidade de uma área de estudo é calcular a matriz de custo de viagem entre as diversas origens e destinos que a compõem. Como comentado anteriormente, na literatura científica e na prática do planejamento de sistemas de transporte esse custo é mais frequentemente representado pelo tempo de viagem que separa dois pontos (El-Geneidy et al. 2016; Venter 2016), embora trabalhos recentes tenham considerado também outros fatores, como o dinheiro necessário para realizar uma viagem e o nível de conforto da viagem entre um ponto e outro (Arbex e Cunha 2020; Herszenhut et al. 2022). Neste livro, iremos nos focar em matrizes de tempo de viagem por serem as mais utilizadas na literatura e na prática, mas iremos cobrir outros tipos de custos num futuro livro sobre análise avançada de acessibilidade em R.\nAtualmente, a forma mais fácil e rápida de gerar uma matriz de tempo de viagem em R é utilizando o pacote {r5r} (Pereira et al. 2021), desenvolvido pela equipe do Projeto Acesso a Oportunidades, do Instituto de Pesquisa Econômica Aplicada (Ipea). O pacote utiliza, por trás dos panos, o software de roteamento de transporte multimodal R5, desenvolvido pela Conveyal1.\n\n3.1.1 Instalação do {r5r}\nA instalação do {r5r} funciona como a instalação de qualquer pacote de R (todos os exemplos de código a seguir devem ser rodados em uma sessão de R).\n\ninstall.packages(\"r5r\")\n\nAlém do R, o pacote {r5r} requer também a instalação do Java 112. Use o comando a seguir para checar a versão do Java instalada em seu computador.\n\ncat(processx::run(\"java\", args = \"-version\")$stderr)\n\nopenjdk version \"11.0.18\" 2023-01-17 LTS\nOpenJDK Runtime Environment Zulu11.62+17-CA (build 11.0.18+10-LTS)\nOpenJDK 64-Bit Server VM Zulu11.62+17-CA (build 11.0.18+10-LTS, mixed mode)\n\n\nComo podemos ver, a versão instalada no livro é compatível com o {r5r}. Caso a versão instalada na sua máquina não seja (resultado do código mencionando a versão 12 ou 1.8.0, por exemplo), será necessário atualizar o Java para a versão 11.\n\n\n3.1.2 Dados necessários\nO uso do pacote {r5r} requer diferentes tipos de dados. A lista a seguir descreve cada um deles, comenta sobre sua obrigatoriedade e apresenta algumas fontes onde esses dados podem ser obtidos:\n\nRede viária (obrigatório): um arquivo com a rede viária e de infraestrutura de pedestres do OpenStreetMap, em formato .pbf. Pode ser baixado com:\n\n{osmextract}, pacote de R;\nGeofabrik, website;\nHOT Export Tool, website;\nBBBike Extract Service, website.\n\n\n\n\n\n\n\n\nQualidade dos dados do OpenStreetMap\n\n\n\nO OpenStreetMap (OSM) é uma base de dados geográfica que traz informações sobre malha viária, prédios, parques etc. Por ser uma base de dados alimentada voluntariamente pela comunidade que a utiliza, a cobertura e a qualidade dos dados do OSM podem variar muito entre regiões (Barrington-Leigh e Millard-Ball 2017). Via de regra, os dados do OSM no Brasil e no mundo tendem a ter melhor cobertura e qualidade em regiões mais desenvolvidas e áreas urbanas com grandes populações (Barrington-Leigh e Millard-Ball 2017; Camboim, Bravo, e Sluter 2015).\n\n\n\nRede de transporte público (opcional): um ou mais arquivos GTFS descrevendo a rede de transporte público da área de estudo. Caso ausente, deslocamentos por transporte público não são considerados no cálculo da matriz de tempo de viagem. Esses dados podem ser baixados com:\n\n{tidytransit}, pacote de R;\nTransitland, website;\nNo Capítulo 4 deste livro (Tabela 4.9) indicamos também onde baixar dados GTFS de algumas cidades brasileiras que compartilham seus dados publicamente.\n\nTopografia (opcional): um arquivo de dados raster contendo o modelo digital de elevação da área de estudo em formato .tif/.tiff. Deve ser utilizado caso se deseje levar em consideração os efeitos da topografia do local sobre os tempos de caminhada e de viagens de bicicleta. Pode ser baixado com:\n\n{elevatr}, pacote de R;\nSRTMGL1, website.\n\n\nEsses dados devem ser salvos em uma mesma pasta que, preferencialmente, não contenha nenhum outro arquivo. Como veremos adiante, o {r5r} combina todos os dados salvos nessa pasta para criar uma rede de transporte multimodal que é utilizada no roteamento de viagens entre pares origem-destino e, consequentemente, no cálculo das matrizes de tempo de viagem. Note que é possível ter mais de um arquivo GTFS na mesma pasta: nesse caso, o {r5r} considera as redes de transporte público de todos os feeds de forma conjunta. No entanto, a rede viária e a topografia da área de estudo devem ser descritas por um único arquivo cada. Assumindo que os scripts de R estejam em uma pasta chamada R, uma possível organização dos arquivos segue o esquema a seguir:\n\n\n/tmp/RtmplnuFZs/projeto_acessibilidade\n├── R\n│   ├── script1.R\n│   └── script2.R\n└── r5\n    ├── rede_transporte_publico.zip\n    ├── rede_viaria.osm.pbf\n    └── topografia.tif\n\n\nPara ilustrar as funcionalidades do {r5r}, vamos usar uma pequena amostra de dados da cidade de Porto Alegre (Brasil). Esses dados estão disponíveis dentro do próprio pacote {r5r}, e seu endereço pode ser acessado com o comando a seguir:\n\npasta &lt;- system.file(\"extdata/poa\", package = \"r5r\")\npasta\n\n[1] \"/home/runner/work/intro_access_book/intro_access_book/renv/library/R-4.2/x86_64-pc-linux-gnu/r5r/extdata/poa\"\n\n\n\nfs::dir_tree(pasta)\n\n\n\n/home/runner/work/intro_access_book/intro_access_book/renv/library/R-4.2/x86_64-pc-linux-gnu/r5r/extdata/poa\n├── poa_elevation.tif\n├── poa_eptc.zip\n├── poa_hexgrid.csv\n├── poa_osm.pbf\n├── poa_points_of_interest.csv\n└── poa_trensurb.zip\n\n\nEsta pasta possui cinco arquivos que vamos utilizar ao longo deste capítulo:\n\nA rede viária do OSM: poa_osm.pbf;\nUm feed de GTFS descrevendo algumas linhas da rede de ônibus da cidade: poa_eptc.zip;\nUm feed de GTFS descrevendo algumas linhas da rede de trem da cidade: poa_trensurb.zip;\nO modelo digital de elevação da cidade: poa_elevation.tif; e\nO arquivo poa_hexgrid.csv, com as coordenadas geográficas dos centroides de uma grade hexagonal regular que cobre toda a área de estudo e com informações sobre o tamanho da população residente e o número de empregos, hospitais e escolas em cada hexágono. Esses pontos serão utilizados como as origens e os destinos no cálculo da matriz de tempo de viagem.\n\n\n\n3.1.3 Calculando a matriz de tempo de viagem\nAntes de calcular a matriz de tempo de viagem, precisamos aumentar a memória disponível para a execução de processos do Java, linguagem em que o R5 é escrito. Isso é necessário porque, por padrão, o R aloca apenas 512 MB de memória para processos do Java, o que frequentemente não é suficiente para o cálculo de grandes matrizes com o {r5r}. Para aumentar a memória disponível para 2 GB, por exemplo, usamos o seguinte comando no início do script, antes mesmo de carregar as bibliotecas de R necessárias para a nossa análise:\n\noptions(java.parameters = \"-Xmx2G\")\n\nFeito isso, podemos prosseguir com o cálculo da matriz de tempo de viagem, realizado em dois passos. O primeiro é gerar a rede de transporte multimodal que será utilizada no roteamento. Para isso, carregamos a biblioteca {r5r} e utilizamos a função setup_r5(), que baixa o software de roteamento R5 e o utiliza para criar a rede. Essa função recebe como input o caminho da pasta onde os dados necessários para o roteamento estão armazenados. Como resultado, a função salva na pasta alguns arquivos necessários para o roteamento e retorna uma conexão com o R5, que nesse exemplo foi armazenada na variável conexao_r5r. Essa conexão é responsável por garantir que o roteamento seja feito com a rede de transportes descrita pelos arquivos dentro da pasta e é utilizada no cálculo da matriz de tempo de viagem.\n\nlibrary(r5r)\n\nconexao_r5r &lt;- setup_r5(pasta, verbose = FALSE)\n\nfs::dir_tree(pasta)\n\n/home/runner/work/intro_access_book/intro_access_book/renv/library/R-4.2/x86_64-pc-linux-gnu/r5r/extdata/poa\n├── fares\n│   └── fares_poa.zip\n├── network.dat\n├── network_settings.json\n├── poa_elevation.tif\n├── poa_eptc.zip\n├── poa_hexgrid.csv\n├── poa_osm.pbf\n├── poa_osm.pbf.mapdb\n├── poa_osm.pbf.mapdb.p\n├── poa_points_of_interest.csv\n└── poa_trensurb.zip\n\n\nO passo final consiste em calcular a matriz de tempo de viagem com a função travel_time_matrix(). Como inputs básicos, a função recebe a conexão com o R5 criada no passo anterior, pontos de origem e destino em formato data.frame com as colunas id, lon e lat, o modo de transporte a ser utilizado, o horário de partida, o tempo máximo de caminhada permitido da origem até o embarque no transporte público e do desembarque até o destino e o tempo máximo de viagem a ser considerado. Diversos outros inputs também podem ser usados, como a velocidade de caminhada e o número máximo de pernas de transporte público permitido, entre outros3.\n\npontos &lt;- data.table::fread(file.path(pasta, \"poa_hexgrid.csv\"))\n\nmatriz &lt;- travel_time_matrix(\n  conexao_r5r,\n  origins = pontos,\n  destinations = pontos,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"13-05-2019 14:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 120,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(matriz)\n\n           from_id           to_id travel_time_p50\n1: 89a901291abffff 89a901291abffff               1\n2: 89a901291abffff 89a9012a3cfffff              71\n3: 89a901291abffff 89a901295b7ffff              41\n4: 89a901291abffff 89a901284a3ffff              57\n5: 89a901291abffff 89a9012809bffff              43\n6: 89a901291abffff 89a901285cfffff              35\n\n\nNa prática, a função travel_time_matrix() encontra a rota mais rápida partindo de cada ponto de origem para todos os possíveis pontos de destino, considerando o modo de viagem, o horário de partida e os demais parâmetros passados pelo usuário. Para isso, o {r5r} considera tempos de viagem de porta a porta: no caso de uma viagem por transporte público, por exemplo, o tempo total de viagem inclui: i) o tempo de caminhada até a parada de transporte público; ii) o tempo de espera pelo veículo na parada; iii) o tempo de deslocamento dentro do veículo; e iv) o tempo de viagem a pé da parada de desembarque até o destino. Em casos em que mais de uma rota de transporte público é utilizada, o {r5r} também contabiliza o tempo gasto nas conexões, considerando a caminhada entre paradas e o tempo de espera pelo próximo veículo.\n\n\n\n\n\n\nA função travel_time_matrix() utiliza uma extensão do algoritmo de roteamento RAPTOR (Conway, Byrd, e van der Linden 2017), o que torna o R5 extremamente rápido. A depender da quantidade de pares origem-destino, o {r5r} pode ser entre 6 e 200 vezes mais rápido do que outros softwares de roteamento multimodal no cálculo de matrizes de tempo de viagem (Higgins et al. 2022)."
  },
  {
    "objectID": "3_calculando_acesso.html#sec-accessibility",
    "href": "3_calculando_acesso.html#sec-accessibility",
    "title": "3  Calculando estimativas de acessibilidade em R",
    "section": "3.2 Cálculo de acessibilidade",
    "text": "3.2 Cálculo de acessibilidade\nCalculada a matriz de tempo de viagem entre as origens e os destinos da área de estudo, precisamos utilizá-la para calcular os níveis de acessibilidade do local. Para isso, utilizaremos o pacote {accessibility}4, também desenvolvido pela equipe do Projeto Acesso a Oportunidades/Ipea, que disponibiliza funções para o cálculo de vários indicadores de acessibilidade. Como input básico, todas as funções requerem uma matriz de custo pré-calculada (no nosso caso, a matriz de tempo de viagem calculada na seção anterior) e dados de uso do solo, como o número de determinados tipos de oportunidades em cada célula da grade que cobre a área de estudo.\n\n3.2.1 Medida de oportunidades cumulativas\nA função cumulative_cutoff() é utilizada para calcular o número de oportunidades que podem ser alcançadas em um determinado limite de custo de viagem. No exemplo a seguir, primeiro carregamos a biblioteca {accessibility} e adequamos a nossa matriz para que ela possa ser utilizada no cálculo da acessibilidade. Em seguida, calculamos o número de escolas que podem ser alcançadas em até 30 minutos de viagem a partir de cada origem presente em nossa matriz de tempo de viagem.\n\nlibrary(accessibility)\n\n# renomeia coluna para usar o pacote {accessibility}\ndata.table::setnames(matriz, \"travel_time_p50\", \"travel_time\")\n\noportunidades_cumulativas &lt;- cumulative_cutoff(\n  travel_matrix = matriz,\n  land_use_data = pontos,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  cutoff = 30\n)\n\nhead(oportunidades_cumulativas)\n\n                id schools\n1: 89a901291abffff      23\n2: 89a9012a3cfffff       0\n3: 89a901295b7ffff      18\n4: 89a901284a3ffff       4\n5: 89a9012809bffff      20\n6: 89a901285cfffff      84\n\n\n\n\n3.2.2 Custo mínimo de viagem\nA função cost_to_closest(), por sua vez, calcula o custo mínimo de viagem necessário para alcançar um determinado número de oportunidades. Com o código a seguir, por exemplo, calculamos o tempo de viagem mínimo para alcançar o hospital mais próximo a partir de cada origem.\n\ncusto_minimo &lt;- cost_to_closest(\n  travel_matrix = matriz,\n  land_use_data = pontos,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\"\n)\n\nhead(custo_minimo)\n\n                id travel_time\n1: 89a9012124fffff           0\n2: 89a9012126bffff          16\n3: 89a9012127bffff          14\n4: 89a90128003ffff           7\n5: 89a90128007ffff          15\n6: 89a9012800bffff           0\n\n\n\n\n3.2.3 Medidas gravitacionais\nA função gravity() calcula medidas gravitacionais de acessibilidade, aquelas nas quais o peso de cada oportunidade diminui gradualmente com o aumento do custo de viagem. Existe, no entanto, uma gama de diferentes tipos de funções de decaimento que podem ser utilizadas, como funções de decaimento exponenciais negativas, de potências inversas, entre outras. Por isso, essa função recebe um input adicional: a função de decaimento a ser utilizada no cálculo. O exemplo adiante apresenta o cálculo de acessibilidade a estabelecimentos de educação usando uma medida gravitacional exponencial negativa com parâmetro de decaimento igual a 0,2.\n\ngrav_exp_negativa &lt;- gravity(\n  travel_matrix = matriz,\n  land_use_data = pontos,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  decay_function = decay_exponential(0.2)\n)\n\nhead(grav_exp_negativa)\n\n                id     schools\n1: 89a901291abffff 0.428108826\n2: 89a9012a3cfffff 0.003987477\n3: 89a901295b7ffff 0.606786304\n4: 89a901284a3ffff 0.079661746\n5: 89a9012809bffff 0.494632773\n6: 89a901285cfffff 1.987657134\n\n\n\n\n3.2.4 Medidas com competição\nPor fim, a função floating_catchment_area() calcula níveis de acessibilidade levando em consideração a competição por oportunidades usando diferentes indicadores do tipo floating catchment area (FCA), “área de influência flutuante”. Como diversos métodos de FCA podem ser utilizados, a função requer que o método desejado seja explicitamente assinalado. E, assim como a função de acessibilidade gravitacional, a função de decaimento utilizada também deve ser definida pelo usuário. O código a seguir mostra um exemplo de cálculo de acessibilidade a estabelecimentos de saúde usando o método balanced floating catchment area (BFCA) (Paez, Higgins, e Vivona 2019), levando em consideração os efeitos de competição entre a população como um todo e uma função de decaimento exponencial com parâmetro de decaimento igual a 0,05.\n\ncompeticao_bfca &lt;- floating_catchment_area(\n  travel_matrix = matriz,\n  land_use_data = pontos,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  demand = \"population\",\n  method = \"bfca\",\n  decay_function = decay_exponential(0.05)\n)\n\nhead(competicao_bfca)\n\n                id      schools\n1: 89a901291abffff 2.628973e-04\n2: 89a9012a3cfffff 5.875302e-05\n3: 89a901295b7ffff 2.123543e-04\n4: 89a901284a3ffff 1.414356e-04\n5: 89a9012809bffff 2.254543e-04\n6: 89a901285cfffff 3.901031e-04\n\n\nAs funções apresentadas nesta seção também podem receber outros inputs não explicitamente mencionados aqui. Para mais informações sobre cada um dos parâmetros, por favor consulte a documentação do pacote {accessibility} em seu site.\n\n\n3.2.5 Cálculo de acessibilidade com o {r5r}\nAo longo das duas seções anteriores, mostramos como calcular níveis de acessibilidade passo a passo. Para fins didáticos, é importante entender que o cálculo de estimativas de acessibilidade tem como primeiro passo a geração de uma matriz de custos de viagens que, em seguida, é utilizada para estimar níveis de acessibilidade. No entanto, o {r5r} inclui também uma função chamada accessibility() que calcula os níveis de acessibilidade com uma única chamada, sem etapas intermediárias.\nDe forma parecida com a função de cálculo de matriz de tempo de viagem, a função accessibility() recebe como inputs uma conexão com o R5, as origens, os destinos, os modos de transporte e o tempo de partida, entre outros argumentos. Adicionalmente, devem ser listadas também quais oportunidades devem ser consideradas e a função de decaimento que deve ser utilizada, bem como o valor do limite de custo e do parâmetro de decaimento. O exemplo a seguir mostra uma aplicação dessa função.\n\nacessibilidade_r5r &lt;- accessibility(\n  conexao_r5r,\n  origins = pontos,\n  destinations = pontos,\n  opportunities_colname = \"schools\",\n  decay_function = \"step\",\n  cutoffs = 30,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"13-05-2019 14:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 120,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(acessibilidade_r5r)\n\n                id opportunity percentile cutoff accessibility\n1: 89a901291abffff     schools         50     30            21\n2: 89a9012a3cfffff     schools         50     30             0\n3: 89a901295b7ffff     schools         50     30            16\n4: 89a901284a3ffff     schools         50     30             4\n5: 89a9012809bffff     schools         50     30            17\n6: 89a901285cfffff     schools         50     30            78\n\n\nUma pequena diferença entre o comportamento da função r5r::accessibility() e o da cumulative_cutoff() do pacote {accessibility} está no fato de que, nesta, pares origem-destino cujos tempos de viagem são iguais ao valor definido como limite são excluídos do cálculo da acessibilidade, enquanto na função do pacote {accessibility} eles são incluídos. Ou seja, para simularmos o cálculo acima com a cumulative_cutoff(), precisamos estabelecer um tempo de viagem limite de 29 minutos, e não trinta. No código a seguir, comparamos os resultados das duas funções.\n\nops_cumulativas_29 &lt;- cumulative_cutoff(\n  travel_matrix = matriz,\n  land_use_data = pontos,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time\",\n  cutoff = 29\n)\n\n# compara os niveis de acessibilidade calculados das duas maneiras distintas\ncomparacao_acessibilidade &lt;- merge(\n  acessibilidade_r5r,\n  ops_cumulativas_29,\n  by = \"id\"\n)\n\n# renomeia colunas com niveis de acessibilidade\ndata.table::setnames(\n  comparacao_acessibilidade,\n  old = c(\"accessibility\", \"schools\"),\n  new = c(\"acesso_r5r\", \"acesso_accessibility\")\n)\n\nhead(comparacao_acessibilidade[, .(id, acesso_r5r, acesso_accessibility)])\n\n                id acesso_r5r acesso_accessibility\n1: 89a9012124fffff          1                    1\n2: 89a9012126bffff         12                   12\n3: 89a9012127bffff         14                   14\n4: 89a90128003ffff         30                   30\n5: 89a90128007ffff         21                   21\n6: 89a9012800bffff         29                   29\n\n\nComo podemos observar, fora a pequena diferença de comportamento, o resultado das duas funções é o mesmo. A principal diferença entre os dois métodos, no entanto, é que a informação “intermediária” do tempo de viagem entre origens e destinos não fica disponível ao usuário com o uso da função accessibility() do pacote {r5r}. Ainda assim, esse fluxo de trabalho pode ser uma boa alternativa para pessoas que estejam interessadas unicamente nos níveis de acessibilidade, não dependendo do tempo de viagem em suas análises. Note também que o pacote {accessibility} possui uma gama mais ampla de indicadores de acessibilidade e permite que os usuários definam funções de decaimento personalizadas.\n\n\n\n\n\n\nConsiderando outros tipos de custo de viagem no cálculo da acessibilidade\n\n\n\nOutra diferença entre a função de acessibilidade do {r5r} e as funções do pacote {accessibility} está no fato de que estas podem trabalhar com variados tipos de custo de viagem, como tempo, custo monetário, conforto, etc. A função do {r5r}, porém, é menos flexível, limitando-se a considerar apenas restrições de tempo de viagem."
  },
  {
    "objectID": "3_calculando_acesso.html#análises-de-acessibilidade",
    "href": "3_calculando_acesso.html#análises-de-acessibilidade",
    "title": "3  Calculando estimativas de acessibilidade em R",
    "section": "3.3 Análises de acessibilidade",
    "text": "3.3 Análises de acessibilidade\nCalculados os níveis de acessibilidade, seguimos então para sua análise. Existe uma grande variedade de análises que podem ser feitas usando esses dados: por exemplo, diagnósticos das condições de acessibilidade urbana de diferentes bairros, pesquisas sobre desigualdades de acesso a oportunidades entre diferentes grupos sociais, análises sobre exclusão social e accessibility poverty (insuficiência de acessibilidade) etc. Nesta seção, no entanto, apresentaremos apenas duas análises relativamente simples e de fácil comunicação: a distribuição espacial da acessibilidade e sua distribuição entre diferentes grupos de renda.\n\n3.3.1 Distribuição espacial de acessibilidade urbana\nPara compreendermos a distribuição espacial da acessibilidade urbana de uma determinada cidade ou região, primeiro precisamos obter as informações espaciais dos pontos que foram utilizados como origens e destinos no cálculo da matriz. Os pontos que usamos nos exemplos anteriores, por exemplo, correspondem aos centroides de células de uma grade hexagonal baseadas no índice H3, desenvolvido pela Uber (Brodsky 2018). A grade de Porto Alegre e algumas informações sociodemográficas e de uso do solo da cidade são disponibilizadas pela equipe do Projeto Acesso a Oportunidades através do pacote de R {aopdata}. O pacote e suas funções são apresentados em detalhes na Seção 5. Com o código adiante, carregamos a biblioteca de visualização de dados, baixamos as informações espaciais da grade e as apresentamos em forma de mapa.\n\nlibrary(ggplot2)\n\n# baixa a grade espacial\ngrade_poa &lt;- aopdata::read_grid(city = \"Porto Alegre\")\n\n# mantem na grade apenas os hexagonos utilizados na analise\ngrade_poa &lt;- subset(grade_poa, id_hex %in% pontos$id)\n\n# visualizando o mapa\nggplot(grade_poa) + geom_sf() + theme_minimal()\n\n\n\n\nFigura 3.1: Grade hexagonal cobrindo a região central de Porto Alegre.\n\n\n\n\nPara visualizarmos os dados de acessibilidade espacialmente, precisamos unir a tabela de estimativas de acessibilidade (considerando os níveis calculados com a medida de oportunidades cumulativas) com a tabela que contém os dados espaciais da grade, usando as colunas de identificação dos hexágonos como colunas-chave. Essa operação e seu resultado em formato de mapa são apresentados a seguir.\n\n# junta as tabelas de dados espaciais e de niveis de acessibilidade\nacesso_espacial &lt;- merge(\n  grade_poa,\n  oportunidades_cumulativas,\n  by.x = \"id_hex\",\n  by.y = \"id\"\n)\n\n# configura mapa\nggplot(acesso_espacial) +\n  geom_sf(aes(fill = schools), color = NA) +\n  scale_fill_viridis_c(option = \"inferno\") +\n  labs(fill = \"Núm. de escolas\\nacessíveis\") +\n  theme_minimal()\n\n\n\n\nFigura 3.2: Distribuição espacial da acessibilidade a escolas na região central de Porto Alegre\n\n\n\n\nComo podemos ver, os níveis de acessibilidade tendem a se concentrar de forma mais acentuada no centro da cidade, onde existe maior concentração de escolas, e próximos aos grandes corredores de transporte da cidade. Por terem fácil acesso a modos de alta capacidade e velocidade, pessoas que moram mais perto desses corredores tendem a acessar locais distantes de forma relativamente rápida. Em contraste, pessoas que moram mais afastadas desses corredores dependem de modos de menor menor frequência e velocidade operacional (como os ônibus municipais, por exemplo) e precisam gastar mais tempo para alcançar os corredores de média e alta capacidade. Como consequência, os níveis de acessibilidade de pessoas que moram afastadas do centro e de corredores de alta capacidade tendem a ser menores.\n\n\n3.3.2 Distribuição socioeconômica de acessibilidade urbana\nA Figura 3.2, embora seja reveladora quanto aos locais em que estão dispostas as maiores concentrações de acessibilidade, nada mostra sobre os grupos socioeconômicos que possuem os maiores potenciais de acesso a oportunidades na região. Para isso, precisamos cruzar as informações demográficas e econômicas das pessoas que moram em cada um dos pontos de origem com os dados de acessibilidade previamente calculados.\nNo exemplo abaixo, juntamos aos dados de acessibilidade a informação do decil de renda de cada uma das origens, considerando a renda média de cada uma das pessoas que as habitam (dado também proveniente do pacote {aopdata}). Assim, conseguimos identificar se um hexágono é de baixa, média ou alta renda.\n\npopulacao_poa &lt;- aopdata::read_population(\"Porto Alegre\", showProgress = FALSE)\n\n# renomeia colunas com contagem populacional e decil de renda\ndata.table::setnames(\n  populacao_poa,\n  old = c(\"P001\", \"R003\"),\n  new = c(\"contagem_pop\", \"decil\")\n)\n\n# junta as tabelas de niveis de acessibilidade espacializados e dados sociodem.\nacesso_sociodemografico &lt;- merge(\n  acesso_espacial,\n  populacao_poa,\n  by = \"id_hex\"\n)\n\nhead(acesso_sociodemografico[, c(\"id_hex\", \"schools\", \"contagem_pop\", \"decil\")])\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -51.25678 ymin: -30.1111 xmax: -51.19031 ymax: -30.06699\nGeodetic CRS:  WGS 84\n           id_hex schools contagem_pop decil                       geometry\n1 89a9012124fffff       1          733     9 POLYGON ((-51.25083 -30.111...\n2 89a9012126bffff      13          355     9 POLYGON ((-51.25369 -30.106...\n3 89a9012127bffff      14          996    10 POLYGON ((-51.2538 -30.1094...\n4 89a90128003ffff      34         1742     4 POLYGON ((-51.19446 -30.071...\n5 89a90128007ffff      23          477     5 POLYGON ((-51.19744 -30.069...\n6 89a9012800bffff      34          501     4 POLYGON ((-51.19137 -30.070...\n\n\nTendo a informação do decil de renda em que cada hexágono se encontra, podemos calcular a distribuição da acessibilidade da população dentro de cada um desses níveis de renda. Para isso, precisamos ponderar o nível de acessibilidade de cada origem pela quantidade de pessoas que residem ali - daí o porquê de termos também trazido a informação da contagem populacional em cada hexágono. Fazendo a ponderação, obtemos a distribuição da acessibilidade das pessoas localizadas em origens de um determinado decil de renda. Caso não ponderássemos, no entanto, teríamos a distribuição de acessibilidade não das pessoas localizadas em cada hexágono, mas dos hexágonos em si. Como em nossa análise nos importamos com as pessoas, e não com as unidades espaciais em que elas estão agregadas, precisamos fazer a ponderação. Podemos visualizar a distribuição de acessibilidade de cada decil usando um box plot, como mostrado a seguir.\n\nggplot(subset(acesso_sociodemografico, !is.na(decil))) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decil),\n      y = schools,\n      color = as.factor(decil),\n      weight = contagem_pop\n    )\n  ) +\n  labs(\n    color = \"Decil de\\nrenda\",\n    x = \"Decil de renda\",\n    y = \"Número de escolas\\nacessíveis\"\n  ) +\n  scale_color_brewer(palette = \"RdBu\") +\n  scale_x_discrete(\n    labels = c(\"D1\\nmais\\npobres\", paste0(\"D\", 2:9), \"D10\\nmais\\nricos\")\n  ) +\n  theme_minimal()\n\n\n\n\nFigura 3.3: Distribuição da acessibilidade a escolas na região central de Porto Alegre entre decis de renda\n\n\n\n\nA Figura 3.3 é muito clara em seu conteúdo: pessoas de mais baixa renda tendem a ter níveis de acessibilidade consideravelmente menores do que as de alta renda. Esse é um padrão comum em praticamente todas as cidades brasileiras (Pereira et al. 2019) que ocorre, em larga medida, devido à localização espacial das comunidades de baixa e alta renda no território: os mais ricos costumam morar em áreas mais valorizadas, próximas das grandes concentrações de empregos (e oportunidades de educação, saúde, lazer etc) e com maior oferta de transporte público de média e alta capacidade. Os mais pobres, por sua vez, tendem a morar em locais mais afastados, onde o valor da terra é menor. Consequentemente, tendem também a se afastar das grandes concentrações de oportunidades. Junta-se a isso o fato de, na maior parte dos casos, a oferta de serviços de transporte público de média e alta capacidade ser pior em locais com maior concentração de pessoas de baixa renda. Sendo assim, seus níveis de acessibilidade são, em média, muito menores do que os dos mais ricos, como indicado pelos dados apresentados.\n\n\n\n\nArbex, Renato, e Claudio B. Cunha. 2020. «Estimating the Influence of Crowding and Travel Time Variability on Accessibility to Jobs in a Large Public Transport Network Using Smart Card Big Data». Journal of Transport Geography 85: 102671. https://doi.org/10.1016/j.jtrangeo.2020.102671.\n\n\nBarrington-Leigh, Christopher, e Adam Millard-Ball. 2017. «The World’s User-Generated Road Map Is More Than 80% Complete». PLOS ONE 12 (8): e0180698. https://doi.org/10.1371/journal.pone.0180698.\n\n\nBrodsky, Isaac. 2018. «H3: Uber’s Hexagonal Hierarchical Spatial Index». Uber Engineering Blog. https://eng.uber.com/h3/.\n\n\nCamboim, Silvana Philippi, João Vitor Meza Bravo, e Claudia Robbi Sluter. 2015. «An Investigation into the Completeness of, and the Updates to, OpenStreetMap Data in a Heterogeneous Area in Brazil». ISPRS International Journal of Geo-Information 4 (3): 1366–88. https://doi.org/10.3390/ijgi4031366.\n\n\nConway, Matthew Wigginton, Andrew Byrd, e Marco van der Linden. 2017. «Evidence-Based Transit and Land Use Sketch Planning Using Interactive Accessibility Methods on Combined Schedule and Headway-Based Networks». Transportation Research Record: Journal of the Transportation Research Board 2653 (1): 45–53. https://doi.org/10.3141/2653-06.\n\n\nEl-Geneidy, Ahmed, David Levinson, Ehab Diab, Genevieve Boisjoly, David Verbich, e Charis Loong. 2016. «The Cost of Equity: Assessing Transit Accessibility and Social Disparity Using Total Travel Cost». Transportation Research Part A: Policy and Practice 91 (setembro): 302–16. https://doi.org/10.1016/j.tra.2016.07.003.\n\n\nHerszenhut, Daniel, Rafael H. M. Pereira, Licinio da Silva Portugal, e Matheus Henrique de Sousa Oliveira. 2022. «The Impact of Transit Monetary Costs on Transport Inequality». Journal of Transport Geography 99 (fevereiro): 103309. https://doi.org/10.1016/j.jtrangeo.2022.103309.\n\n\nHiggins, Christopher, Matthew Palm, Amber DeJohn, Luna Xi, James Vaughan, Steven Farber, Michael Widener, e Eric Miller. 2022. «Calculating Place-Based Transit Accessibility: Methods, Tools and Algorithmic Dependence». Journal of Transport and Land Use 15 (1). https://doi.org/10.5198/jtlu.2022.2012.\n\n\nPaez, Antonio, Christopher D. Higgins, e Salvatore F. Vivona. 2019. «Demand and Level of Service Inflation in Floating Catchment Area (FCA) Methods». Editado por Tayyab Ikram Shah. PLOS ONE 14 (6): e0218773. https://doi.org/10.1371/journal.pone.0218773.\n\n\nPereira, Rafael H. M., Carlos Kaue Vieira Braga, Bernardo Serra, e Vanessa Nadalin. 2019. «Desigualdades socioespaciais de acesso a oportunidades nas cidades brasileiras, 2019». {Texto para Discuss\\~ao} 2535. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nPereira, Rafael H. M., Marcus Saraiva, Daniel Herszenhut, Carlos Kaue Vieira Braga, e Matthew Wigginton Conway. 2021. «R5r: Rapid Realistic Routing on Multimodal Transport Networks with R5 in R». Transport Findings, março, 21262. https://doi.org/10.32866/001c.21262.\n\n\nVenter, Christoffel. 2016. «Assessing the Potential of Bus Rapid Transit-Led Network Restructuring for Enhancing Affordable Access to Employment The Case of Johannesburg’s Corridors of Freedom». Research in Transportation Economics 59 (novembro): 441–49. https://doi.org/10.1016/j.retrec.2016.05.006."
  },
  {
    "objectID": "3_calculando_acesso.html#footnotes",
    "href": "3_calculando_acesso.html#footnotes",
    "title": "3  Calculando estimativas de acessibilidade em R",
    "section": "",
    "text": "Disponível em https://github.com/conveyal/r5.↩︎\nO Java 11 pode ser baixado em https://www.oracle.com/java/technologies/downloads/#java11 ou em https://jdk.java.net/java-se-ri/11.↩︎\nPara mais informações sobre cada um dos parâmetros, consulte a documentação da função em uma sessão de R (com os comandos ?travel_time_matrix() ou help(“travel_time_matrix”)) ou no site do {r5r}, neste link.↩︎\nDisponível em https://github.com/ipeaGIT/accessibility.↩︎"
=======
    "objectID": "4_dados_gtfs.en.html",
    "href": "4_dados_gtfs.en.html",
    "title": "4  GTFS data",
    "section": "",
    "text": "The GTFS format is an open and collaborative specification that aims to describe the main components of a public transport network. Originally created in the mid-2000s by a partnership between Google and TriMet, the transport agency of Portland, Oregon, in the United States, the GTFS specification is now used by transport agencies in thousands of cities, spread across all continents of the globe (McHugh 2013). Currently, the specification is divided in two distinct components:\nThroughout this section, we will focus on GTFS Schedule, the most widely used GTFS format in accessibility analyses and by transport agencies. Click here for more information on GTFS Realtime.\nBeing an open and collaborative specification, the GTFS format attempts to enable several distinct uses that transport agencies and tool developers might find for it. However, agencies and applications may still depend on information that is not included in the official specification. As a result, different specification extensions have been created. Some of these extensions may eventually be incorporated into the official specification if this is agreed upon by the GTFS community. In this section, we will focus on a subset of information available in the basic/official GTFS Schedule format."
  },
  {
    "objectID": "4_dados_gtfs.en.html#gtfs-structure",
    "href": "4_dados_gtfs.en.html#gtfs-structure",
    "title": "4  GTFS data",
    "section": "4.1 GTFS structure",
    "text": "4.1 GTFS structure\nFiles in the GTFS Schedule format (from this point onwards referred to as GTFS) are also known as feeds1. A feed is nothing more than a compressed .zip file that contains a set of tables, saved in separate .txt files, describing some aspects of the public transport network (stops/stations location, trip frequency, itineraries paths, etc). Just like in a relational database, tables in a feed have key columns that allow one to link information described in one table to the data described in another one. An example of the GTFS scheme is presented in Figure 4.1, which shows some of the the most important tables that make up the specification and highlights the key columns that link the tables to each other.\n\n\n\n\n\nFigure 4.1: GTFS format scheme. Source - Pereira, Andrade, and Vieira (2022)\n\n\n\n\nIn total, the GTFS format can be made of up to 22 tables2. Some of them, however, are optional, i.e. they don’t need to be present for the feed to be considered valid. The specification classifies the presence of a table into the following categories: required, optional and conditionally required (when the requirement of the table depends on the existence of another particular table, column or value). For simplicity, in this book we will consider only the first two categories and we will indicate whether a table is required whenever appropriate. Using our simplified convention, tables are classified as follows:\n\nRequired: agency.txt, stops.txt, routes.txt, trips.txt, stop_times.txt, calendar.txt.\nOptional: calendar_dates.txt, fare_attributes.txt, fare_rules.txt, fare_products.txt, fare_leg_rules.txt, fare_transfer_rules.txt, areas.txt, stop_areas.txt, shapes.txt, frequencies.txt, transfers.txt, pathways.txt, levels.txt, translations.txt, feed_info.txt, attributions.txt.\n\nThroughout this chapter, we’ll learn about the basic structure of a GTFS file and its tables. We will focus only on the required tables and the optional tables most often used by producers and consumers of these files. For more information on the tables and columns not covered in this section, please check the official specification.\nIn this demonstration, we use a subset of a feed describing the public transport network of São Paulo, Brazil, produced by SPTrans3 and downloaded in October 2019. The feed contains the six required tables plus two widely used optional tables, shapes.txt and frequencies.txt, which gives a good overview of the GTFS format.\n\n\n\n\n4.1.1 agency.txt\nFile used to list the transport operators/agencies running the system described by the GTFS file. Although the term agency is used instead of operators, it is up to the feed producer to choose which institutions will be listed in the table.\nFor example, multiple bus companies operate in a given location, but all schedule and fare planning is carried out by a single institution, usually a transport agency or a specific public entity. Oftentime, this institution is also recognized by public transport users as the system operator. In this case, we should list the institution responsible for planning the system in the table.\nNow imagine a scenario in which a local public transport agency transfers the responsibility of operating a multimodal system to several companies (through concessions, for example). Each one of these companies is responsible for planning the schedules and fares of trips/routes they operate, provided that certain pre-established parameters are followed. In this case, we could list all operators in the table instead of listing the public transport agency.\nTable 4.1 shows the agency.txt file of SPTrans’ feed. We can see that the feed producers decided to list the company itself in the table, not the operators of the buses and the subway in the city.\n\n\n\n\nTable 4.1: Example of agency.txt\n\n\n\n\n\n\n\n\n\nagency_id\nagency_name\nagency_url\nagency_timezone\nagency_lang\n\n\n\n\n1\nSPTRANS\nhttp://www.sptrans.com.br/?versao=011019\nAmerica/Sao_Paulo\npt\n\n\n\n\n\n\nIt’s important to note that, although we are presenting agency.txt in table format, the information should be formatted as a .csv file. That is, the values of each cell must be separated by commas, and the contents of each table row must be listed in a different row of the .csv file. The table above, for example, is formatted as follows inside the GTFS.zip:\n\n\nagency_id,agency_name,agency_url,agency_timezone,agency_lang\n1,SPTRANS,http://www.sptrans.com.br/?versao=011019,America/Sao_Paulo,pt \n\n\nFor the sake of communicability and interpretability, next examples in this chapter are presented as tables. It is important to keep in mind, however, that these tables are structured as shown above inside the feeds.\n\n\n4.1.2 stops.txt\nFile used to describe the stops in a public transport system. The points listed in this file may reference simple stops (such as bus stops), stations, platforms, station entrances and exits, etc. Table 4.2 shows the stops.txt of SPTrans’ feed.\n\n\n\n\nTable 4.2: Example of stops.txt\n\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nstop_desc\nstop_lat\nstop_lon\n\n\n\n\n706325\nParada 14 Bis B/C\nViad. Dr. Plínio De Queiroz, 901\n-23.55593\n-46.65011\n\n\n810602\nR. Sta. Rita, 56\nRef.: R. Bresser / R. João Boemer\n-23.53337\n-46.61229\n\n\n910776\nAv. Do Estado, 5854\nRef.: Rua Dona Ana Néri\n-23.55896\n-46.61520\n\n\n1010092\nParada Caetano Pinto\nAv. Rangel Pestana, 1249 Ref.: Rua Caetano Pinto/rua Prof. Batista De Andrade\n-23.54615\n-46.62218\n\n\n1010093\nParada Piratininga\nAv. Rangel Pestana, 1479 Ref.: Rua Monsenhor Andrade\n-23.54509\n-46.62006\n\n\n1010099\nR. Xavantes, 612\nRef.: Rua Joli\n-23.53545\n-46.61368\n\n\n\n\n\n\nThe columns stop_id and stop_name identify each stop, but fulfill different roles. The purpose of stop_id is to identify relationships between this table and others in the GTFS feed (as we will later see in the stop_times.txt file, for example). Meanwhile, the column stop_name serves as an identifier that should be easily recognized by the passengers, thus usually assuming values of station names, points of interest names or addresses (as in the case of SPTrans’ feed).\nThe stop_desc column, present in SPTrans’ feed, is optional and allows feed producers to add a description of each stop and its surroundings. Finally, stop_lat and stop_lon associate each stop to a point in space with its latitude and longitude geographic coordinates.\nTwo of the optional columns not present in this stops.txt table are location_type and parent_station. The location_type column is used to indicate the type of location that each point refers to. When not explicitly set, all points are interpreted as public transport stops, but distinct values can be used to distinguish a stop (location_type = 0) from a station (location_type = 1) or a boarding area (location_type = 2), for example. The parent_station column, on the other hand, is used to describe hierarchical relationships between two points. When describing a boarding area, for example, the feed producer must list the stop/platform that this area refers to, and when describing a stop/platform the producer can optionally list the station that it belongs to.\n\n\n4.1.3 routes.txt\nFile used to describe the routes operated in a public transport system and their respective transport modes. Table 4.3 shows the routes.txt of SPTrans’ feed.\n\n\n\n\nTable 4.3: Example of routes.txt\n\n\n\n\n\n\n\n\n\nroute_id\nagency_id\nroute_short_name\nroute_long_name\nroute_type\n\n\n\n\nCPTM L07\n1\nCPTM L07\nJUNDIAI - LUZ\n2\n\n\nCPTM L08\n1\nCPTM L08\nAMADOR BUENO - JULIO PRESTES\n2\n\n\nCPTM L09\n1\nCPTM L09\nGRAJAU - OSASCO\n2\n\n\nCPTM L10\n1\nCPTM L10\nRIO GRANDE DA SERRA - BRÁS\n2\n\n\nCPTM L11\n1\nCPTM L11\nESTUDANTES - LUZ\n2\n\n\nCPTM L12\n1\nCPTM L12\nCALMON VIANA - BRAS\n2\n\n\n\n\n\n\nAs in the case of stops.txt, the routes.txt table also includes different columns to distinguish between the identifier of each route (route_id) and their names. In this case, however, there are two distinct name columns: route_short_name and route_long_name. The first refers to the name of the route commonly recognized by passengers, while the second tends to be a more descriptive name. SPTrans, for example, has chosen to highlight the start and endpoints of each route in the latter column. We can also note that the same values are repeated in both route_id and route_short_name, which is neither required nor forbidden - in this case, the feed producer decided that the route names could satisfactorily work as identifiers because they are reasonably short and unique.\nThe agency_id column works as the key column that links the routes to the data described in agency.txt, and it indicates the agency responsible for each route - in this case the agency with id 1 (SPTrans itself). This column is optional in the case of feeds containing a single agency, but is mandatory otherwise. Using a feed describing a multimodal system with a subway corridor and several bus lines as an example, a possible configuration of routes.txt could associate the subway routes to the subway operator and the bus routes to the agency/company responsible for planning the bus schedules.\nThe route_type column is used to describe the transport mode of each route. The above example lists rail lines, whose corresponding numeric value is 2. The corresponding values of other transport modes are listed in the specification.\n\n\n4.1.4 trips.txt\nFile used to describe the trips that compose the system. The trip is the basic unit of movement in the GTFS format: each trip is associated with a public transport route (route_id), with a service that operates on certain days of the week (as we will later cover in calendar.txt) and with a spatial trajectory (as we will later cover in shapes.txt). Table 4.4 shows the trips.txt of SPTrans’ feed.\n\n\n\n\nTable 4.4: Example of trips.txt\n\n\n\n\n\n\n\n\n\n\ntrip_id\nroute_id\nservice_id\ntrip_headsign\ndirection_id\nshape_id\n\n\n\n\nCPTM L07-0\nCPTM L07\nUSD\nJUNDIAI\n0\n17846\n\n\nCPTM L07-1\nCPTM L07\nUSD\nLUZ\n1\n17847\n\n\nCPTM L08-0\nCPTM L08\nUSD\nAMADOR BUENO\n0\n17848\n\n\nCPTM L08-1\nCPTM L08\nUSD\nJULIO PRESTES\n1\n17849\n\n\nCPTM L09-0\nCPTM L09\nUSD\nGRAJAU\n0\n17850\n\n\nCPTM L09-1\nCPTM L09\nUSD\nOSASCO\n1\n17851\n\n\n\n\n\n\nThe trip_id column identifies the trips described in the table, just as the route_id references a route described in routes.txt. The service_id column identifies the services that determine the days of the week that each trip runs on (weekdays, weekends, a mix of both, etc), described in detail in calendar.txt. The rightmost column in the example above is shape_id, which identifies the spatial trajectory of each trip, described in detail in the shapes.txt file.\nThe two remaining columns, trip_headsign and direction_id, are optional and should be used to describe the direction/destination of the trip. The first, trip_headsign, is used to report the text that appears on the vehicle headsign (in the case of buses, for example) or on information panels (such as in subway and rail stations) highlighting the destination of the trip. The direction_id column is often used in conjunction with trip_headsign to distinguish the direction of each trip, where 0 represents one direction and 1 the opposite one . In our example, the first two rows describe trips that refer to the same public transport route (CPTM L07), but in opposite directions: one runs towards Jundiaí, and the other towards Luz.\n\n\n4.1.5 calendar.txt\nFile used to describe the different types of service calendars in a public transport system. A service, in this context, denotes a set of days of the week in which trips may occur. Each service is also defined by an interval, with a start and an end date, within which the service operates. Table 4.5 shows the calendar.txt of SPTrans’ feed.\n\n\n\n\nTable 4.5: Example of calendar.txt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nservice_id\nmonday\ntuesday\nwednesday\nthursday\nfriday\nsaturday\nsunday\nstart_date\nend_date\n\n\n\n\nUSD\n1\n1\n1\n1\n1\n1\n1\n20080101\n20200501\n\n\nU__\n1\n1\n1\n1\n1\n0\n0\n20080101\n20200501\n\n\nUS_\n1\n1\n1\n1\n1\n1\n0\n20080101\n20200501\n\n\n_SD\n0\n0\n0\n0\n0\n1\n1\n20080101\n20200501\n\n\n__D\n0\n0\n0\n0\n0\n0\n1\n20080101\n20200501\n\n\nS\n0\n0\n0\n0\n0\n1\n0\n20080101\n20200501\n\n\n\n\n\n\nThe column service_id identifies each service described in the table. As shown earlier, this identifier is also used in the trips.txt, where it associates each trip to a particular service.\nThe monday, tuesday, wednesday, thursday, friday, saturday and sunday columns are used to set the days of the week in which each service operates. A value of 1 means that the service operates on that day, while a value of 0 means that it does not. In the example above, the USD service operates every day of the week and the service U__ operates only on business days.\nFinally, the columns start_date and end_date delimit the calendar interval. Dates in GTFS files must always be organized using the YYYYMMDD format: the first four numbers define the year, the subsequent two define the month and the last two, the day. The value 20220428, for example, represents the 28th of April 2022.\n\n\n4.1.6 shapes.txt\nFile used to describe the spatial path of each trip in the system. This file is optional, but feed producers are strongly encouraged to include it in their GTFS files. Table 4.6 shows the shapes.txt of SPTrans’ feed.\n\n\n\n\nTable 4.6: Example of shapes.txt\n\n\nshape_id\nshape_pt_lat\nshape_pt_lon\nshape_pt_sequence\n\n\n\n\n17846\n-23.53517\n-46.63535\n1\n\n\n17846\n-23.53513\n-46.63548\n2\n\n\n17846\n-23.53494\n-46.63626\n3\n\n\n17846\n-23.53473\n-46.63710\n4\n\n\n17846\n-23.53466\n-46.63735\n5\n\n\n17846\n-23.53416\n-46.63866\n6\n\n\n\n\n\n\nThe column shape_id identifies each shape, and it links each trip to its spatial trajectory in the trips.txt file. Unlike all the other identifiers we have seen so far, however, shape_id is repeated in several table rows. This is because each shape_id is defined by a sequence of spatial points, whose geographic coordinates are described with the shape_pt_lat and shape_pt_lon columns. The shape_pt_sequence column lists the sequence in which the points connect to form the shape - values listed in this column should increase along the path.\n\n\n4.1.7 stop_times.txt\nFile used to describe the timetable of each trip, including the arrival and departure times at each stop. How this table should be formatted depends on whether the GTFS file contains a frequencies.txt table or not, a detail that we will cover later. For now, we will look at the stop_times.txt of SPTrans’ feed, which also includes a frequencies.txt, in Table 4.7.\n\n\n\n\nTable 4.7: Example of stop_times.txt\n\n\ntrip_id\narrival_time\ndeparture_time\nstop_id\nstop_sequence\n\n\n\n\nCPTM L07-0\n04:00:00\n04:00:00\n18940\n1\n\n\nCPTM L07-0\n04:08:00\n04:08:00\n18920\n2\n\n\nCPTM L07-0\n04:16:00\n04:16:00\n18919\n3\n\n\nCPTM L07-0\n04:24:00\n04:24:00\n18917\n4\n\n\nCPTM L07-0\n04:32:00\n04:32:00\n18916\n5\n\n\nCPTM L07-0\n04:40:00\n04:40:00\n18965\n6\n\n\n\n\n\n\nThe trip whose timetable is being described is identified by the trip_id column. Similarly to what happens in shapes.txt, the same trip_id is found in many rows of the table. This is because, just as a trip trajectory is composed of a sequence of spatial points, a timetable consists of a sequence of several departure/arrival times at various public transport stops.\nThe following columns, arrival_time, departure_time and stop_id, describe the schedule of each trip, associating an arrival and a departure time at each visited stop. The time columns must be organized using the HH:MM:SS format, with the first two numbers defining the hour, the subsequent two the minutes and the last two, the seconds. This format also accepts hour values greater than 24, for example if a trip departs at 11:00 p.m. but it only arrives at a given station at 1:00 a.m. of the next day. In this case, the arrival time should be recorded as 25:00:00, not 01:00:00. The stop_id column associates the arrival and departure times with a stop described in the stops.txt, and the stop_sequence column lists the sequence in which the stops connect to form the trip schedule. The values of this last column must always increase along the trip.\nIt is worth highlighting here the difference between shapes.txt and stop_times.txt. Although both tables present some spatial information of the trips, they do it in different ways. The stop_times.txt file lists the sequence of stops and times that make up a schedule, but says nothing about the trajectory traveled between the stops. shapes.txt, on the other hand, describes the detailed trajectory of a trip, but does not specify where the public transport stops are located. Combined, the information from the two tables allows us to know both the schedule of each trip and the spatial trajectory between stops.\n\n\n4.1.8 frequencies.txt\nOptional file used to describe the frequency of each trip within a certain time interval of a day. Table 4.8 shows the frequency.txt of SPTrans’ feed.\n\n\n\n\nTable 4.8: Example of frequencies.txt\n\n\ntrip_id\nstart_time\nend_time\nheadway_secs\n\n\n\n\nCPTM L07-0\n04:00:00\n04:59:00\n720\n\n\nCPTM L07-0\n05:00:00\n05:59:00\n360\n\n\nCPTM L07-0\n06:00:00\n06:59:00\n360\n\n\nCPTM L07-0\n07:00:00\n07:59:00\n360\n\n\nCPTM L07-0\n08:00:00\n08:59:00\n360\n\n\nCPTM L07-0\n09:00:00\n09:59:00\n480\n\n\n\n\n\n\nThe trip whose frequency is being described is identified by the trip_id column. Again, the same identifier may appear in multiple observations. This is because the specification allows the same trip to have different frequencies throughout the day, such as at peak and off-peak hours, for example. Each row refers to the frequency of a given trip_id between a time interval specified in the start_time and end_time columns.\nWithin the time interval specified by these two columns, the trip operates on regular headways specified in headway_secs. The headway is the time between trips performed by vehicles in the same route. This time must be specified in seconds. In the example above, we see a headway of 720 between 4 and 5am, which indicates that the CPTM L07-0 trip departs every 12 minutes within this interval.\nUsing frequencies.txt and stop_times.txt together\nIt is important to understand how the presence of a frequencies.txt table changes the specification of stop_times.txt. As we can see in the stop_times.txt example, the CPTM L07-0 trip departs from the first stop at 04:00 am and arrives at the second at 04:08 am. The arrival and departure times at a given stop, however, cannot be specified more than once for each trip, even though the headway set in frequencies.txt defines that this trip departs every 12 minutes from 4 am to 5 am. If that’s the case, how can we set the schedule of trips departing at 04:12 am, 04:24 am, 04:36 am, etc?\nIf the frequency of a trip is specified in frequencies.txt, the timetable of this trip defined in stop_times.txt should be understood as a reference that describes the time between stops. In other words, the times defined in the stop_times.txt file should not be interpreted rigorously. For example, the timetable of trip CPTM L07-0 establishes that the journey between the first and second stop takes 8 minutes to complete, which is the same travel time between the second and third stops as well. Thus, a trip departing from the first stop at 04:00 am arrives at the second at 04:08 am and at the third at 04:16 am. The next trip, which on the other hand departs from the first stop at 04:12 am, arrives at the second stop at 04:20 am, and the third at 04:28 am.\nTo describe the same trips in stop_times.txt without making a frequencies.txt table, one could add a suffix that would identify each trip of route CPTM L07 in direction 0 throughout the day. The trip with id CPTM L07-0_1, for example, would be the first trip 0 of the day heading towards direction 0 and it would depart from the first stop at 04:00 am and arrive at the second at 04:08 am. The CPTM L07-0_2 trip, on the other hand, would be the second trip of the day and would depart from the first stop at 04:12 am and arrive at the second at 04:20 am. The rest of the trips would follow the same pattern. Each one of these trips would also need to be added to trips.txt, as well as to any other tables that would refer to the trip_id.\nAnother variable that changes how frequencies.txt affects the timetables in stop_times.txt is the optional column exact_times. When it assumes the value of 0 (or when it is missing from the feed, as in the case of the SPTrans’ GTFS file) it indicates that the trip does not necessarily follow a fixed schedule over the time interval. Instead, operators try to maintain a predetermined headway during the interval. Using the same example of a trip whose headway is 12 minutes between 4:00 am and 5:00 am, this would mean that the first departure does not necessarily happen at 4:00 am, the second at 04:12 am, and so on. The first trip can, for example, leave at 4:02 am. The second, at 4:14 am or 4:13 am, etc. Meanwhile, one should use exact_times with value 1 to define a schedule that always follows with the exact same headway. This would be equivalent to defining several similar trips departing at different times in stop_times.txt (as shown in the previous paragraph)."
  },
  {
    "objectID": "4_dados_gtfs.en.html#finding-gtfs-data-for-brazilian-cities",
    "href": "4_dados_gtfs.en.html#finding-gtfs-data-for-brazilian-cities",
    "title": "4  GTFS data",
    "section": "4.2 Finding GTFS data for Brazilian cities",
    "text": "4.2 Finding GTFS data for Brazilian cities\nGTFS data from cities all over the world can be downloaded with the {tidytransit} R package or on the Transitland website. In Brazil, several cities use GTFS data to plan and operate their transport systems. In many cases, however, the data is owned by private companies and operators and may not be publicly available. As a result, GTFS data in Brazil is seldom openly available, which goes against the public interest and against good practices of government transparency and data management. Table 4.9 lists some of the few Brazilian cities that make their GTFS feeds openly available to the public4.\n\n\n\n\nTable 4.9: Openly available GTFS data in Brazil\n\n\nCity\nSource\nInfo\n\n\n\n\nBelo Horizonte\nBHTrans\nOpen data: conventional transport network; supplementary network.\n\n\nFortaleza\nETUFOR\nOpen data.\n\n\nFortaleza\nMetrofor\nOpen data.\n\n\nPorto Alegre\nEPTC\nOpen data.\n\n\nRio de Janeiro\nSMTR\nOpen data.\n\n\nSão Paulo\nEMTU\nDownload link. Registration required.\n\n\nSão Paulo\nSPTrans\nDownload link. Registration required.\n\n\n\n\n\n\nNote: The GTFS data provided by Rio de Janeiro Municipal Department of Transport (SMTR) only includes the bus system, and it does not include train and subway data.\n\n\n\n\nMcHugh, Bibiana. 2013. “Pioneering Open Data Standards: The GTFS Story.” In Beyond Transparency: Open Data and the Future of Civic Innovation, edited by Brett Goldstein and Lauren Dyson, First, 125–35. San Francisco, CA: Code for America Press.\n\n\nPereira, Rafael H. M., Pedro R. Andrade, and João Pedro Bazzo Vieira. 2022. “Exploring the Time Geography of Public Transport Networks with the Gtfs2gps Package.” Journal of Geographical Systems, December. https://doi.org/10.1007/s10109-022-00400-x."
>>>>>>> Stashed changes
  },
  {
    "objectID": "5_gtfstools.en.html",
    "href": "5_gtfstools.en.html",
    "title": "5  GTFS data manipulation and visualization",
    "section": "",
    "text": "GTFS data is frequently used in various types of analyses that involve public transport systems and which involve a few common operations. The Access to Opportunities Project team has developed the {gtfstools} R package, which provides several functions that help running some of these operations to facilitate feed manipulation and exploration.\nIn this chapter, we’ll go through some of the most frequently used package features. To do this, we will use a sample of the SPTrans feed presented in the previous chapter, and which is included in the package installation."
  },
  {
<<<<<<< Updated upstream
    "objectID": "4_dados_gtfs.html#estrutura-de-arquivos-gtfs",
    "href": "4_dados_gtfs.html#estrutura-de-arquivos-gtfs",
    "title": "4  Dados GTFS",
    "section": "4.1 Estrutura de arquivos GTFS",
    "text": "4.1 Estrutura de arquivos GTFS\nArquivos no formato GTFS Schedule (daqui em diante chamado apenas de GTFS) também são conhecidos pela denominação feed2. Um feed é nada mais do que um arquivo comprimido em formato .zip que contém um conjunto de tabelas, salvas em formato .txt, com algumas informações sobre a rede de transporte público (localização das paradas, frequências das viagens, traçado das rotas, entre outras). Como em uma base de dados relacional, as tabelas de um feed possuem colunas-chaves que permitem vincular os dados de rotas, viagens e tabelas de horários entre si. O esquema geral do GTFS é apresentado na Figura 4.1, que mostra algumas das principais tabelas que compõem a especificação e destaca como elas se relacionam a partir de suas colunas-chaves.\n\n\n\n\n\nFigura 4.1: Esquema do formato GTFS. Fonte: Pereira, Andrade, e Vieira (2022)\n\n\n\n\nAo todo, 22 tabelas compõem o formato GTFS3. Nem todas, no entanto, devem estar obrigatoriamente presentes para que um feed seja considerado válido, sendo consideradas, portanto, opcionais. A especificação classifica cada tabela conforme sua obrigatoriedade em três possíveis categorias: obrigatórias, opcionais e condicionalmente obrigatórias (quando a obrigatoriedade de uma tabela depende da existência de uma determinada tabela, coluna ou valor). Para fins de simplicidade, neste livro consideraremos apenas as duas primeiras categorias e faremos comentários quanto à obrigatoriedade de cada tabela quando apropriado. Dessa forma, ficam assim classificadas as tabelas:\n\nObrigatórias: agency.txt; stops.txt; routes.txt; trips.txt; stop_times.txt; calendar.txt; e\nOpcionais: calendar_dates.txt; fare_attributes.txt; fare_rules.txt; fare_products.txt; fare_leg_rules.txt; fare_transfer_rules.txt; areas.txt; stop_areas.txt; shapes.txt; frequencies.txt; transfers.txt; pathways.txt; levels.txt; translations.txt; feed_info.txt; attributions.txt.\n\nAo longo desta seção, aprenderemos sobre a estrutura básica de um arquivo GTFS e das tabelas que o compõem. Portanto, vamos olhar apenas para as tabelas obrigatórias e para as tabelas opcionais mais frequentemente utilizadas por produtores e consumidores desses arquivos4.\nNa demonstração que será feita aqui, utilizaremos um subconjunto de dados provenientes do feed da cidade de São Paulo criado pela São Paulo Transporte (SPTrans)5 e baixado em outubro de 2019. O feed contém as seis tabelas obrigatórias e mais duas tabelas opcionais bastante utilizadas, a shapes.txt e a frequencies.txt, o que permite uma boa visão geral sobre o formato GTFS.\n\n4.1.1 agency.txt\nArquivo utilizado para descrever as operadoras de transporte que atuam no sistema descrito pelo arquivo GTFS. Embora o termo agency (agência) seja usado em lugar de operators (operadoras), por exemplo, fica a cargo do produtor do feed definir quais instituições serão listadas na tabela.\nPor exemplo: múltiplas concessionárias de ônibus atuam em um determinado local, mas todo o planejamento de cronograma e de tarifa é realizado por uma única instituição, em geral uma secretaria de transporte ou empresa pública específica. Essa instituição é também entendida pelos usuários do sistema como a operadora, de fato. Nesse caso, devemos listar a instituição responsável pelo planejamento na tabela.\nAgora, imagine um sistema em que a agência de transporte público local transfere a responsabilidade da operação de um sistema multimodal a diversas empresas, por meio de concessões. Cada uma dessas empresas é responsável pelo planejamento de cronogramas e tarifas dos modos que operam, desde que sejam seguidos determinados parâmetros pré-estabelecidos em contrato. Sendo assim, devemos listar as operadoras (concessionárias) na tabela, e não a agência de transporte público em si.\nA Tabela 4.1 mostra o arquivo agency.txt do feed da SPTrans. Como podemos ver, os responsáveis pelo feed optaram por listar a própria empresa no arquivo, e não as concessionárias que operam os ônibus e o metrô da cidade.\n\n\n\n\nTabela 4.1: Exemplo de arquivo agency.txt. Fonte: SPTrans\n\n\n\n\n\n\n\n\n\nagency_id\nagency_name\nagency_url\nagency_timezone\nagency_lang\n\n\n\n\n1\nSPTRANS\nhttp://www.sptrans.com.br/?versao=011019\nAmerica/Sao_Paulo\npt\n\n\n\n\n\n\nÉ necessário notar que, embora estejamos apresentando o agency.txt em formato de tabela, o arquivo deve ser formatado como se fosse salvo em formato .csv. Ou seja, os valores de cada célula da tabela devem ser separados por vírgulas, e cada linha da tabela deve constar em uma linha no arquivo. A tabela anterior, por exemplo, é definida da seguinte forma:\n\n\nagency_id,agency_name,agency_url,agency_timezone,agency_lang\n1,SPTRANS,http://www.sptrans.com.br/?versao=011019,America/Sao_Paulo,pt \n\n\nPor uma questão de comunicação e interpretação dos dados, apresentaremos os exemplos em formato de tabela. É importante ter em mente, porém, que essas tabelas são organizadas como mostrado anteriormente.\n\n\n4.1.2 stops.txt\nArquivo usado para descrever as paradas de transporte público que compõem o sistema. Os pontos listados neste arquivo podem fazer menção a paradas mais simples (como pontos de ônibus), estações, plataformas, entradas e saídas de estações etc. A Tabela 4.2 mostra o stops.txt do feed da SPTrans.\n\n\n\n\nTabela 4.2: Exemplo de arquivo stops.txt. Fonte: SPTrans\n\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nstop_desc\nstop_lat\nstop_lon\n\n\n\n\n706325\nParada 14 Bis B/C\nViad. Dr. Plínio De Queiroz, 901\n-23.55593\n-46.65011\n\n\n810602\nR. Sta. Rita, 56\nRef.: R. Bresser / R. João Boemer\n-23.53337\n-46.61229\n\n\n910776\nAv. Do Estado, 5854\nRef.: Rua Dona Ana Néri\n-23.55896\n-46.61520\n\n\n1010092\nParada Caetano Pinto\nAv. Rangel Pestana, 1249 Ref.: Rua Caetano Pinto/rua Prof. Batista De Andrade\n-23.54615\n-46.62218\n\n\n1010093\nParada Piratininga\nAv. Rangel Pestana, 1479 Ref.: Rua Monsenhor Andrade\n-23.54509\n-46.62006\n\n\n1010099\nR. Xavantes, 612\nRef.: Rua Joli\n-23.53545\n-46.61368\n\n\n\n\n\n\nAs colunas stop_id e stop_name servem como identificadores de cada parada, porém cumprem papéis distintos. O principal propósito da stop_id é identificar relações entre esta tabela e outras que compõem a especificação (como veremos mais à frente no arquivo stop_times.txt, por exemplo). Já a coluna stop_name cumpre o papel de um identificador facilmente reconhecido pelo passageiro. Seus valores, portanto, costumam ser nomes de estações, nomes de pontos de interesse da cidade ou endereços (como no caso do feed da SPTrans).\nA coluna stop_desc, presente no feed da SPTrans, é opcional e permite à agência de transporte adicionar uma descrição de cada parada e de seu entorno. As colunas stop_lat e stop_lon, por fim, são as responsáveis por associar cada parada a uma posição espacial, por meio de suas coordenadas geográficas de latitude e longitude.\nEntre as colunas opcionais não presentes no stops.txt deste feed estão a location_type e a parent_station. A location_type é utilizada para denotar o tipo de localização a que cada ponto se refere. Quando ausente, todos os pontos são interpretados como paradas de transporte público, mas valores distintos podem ser usados para distinguir uma parada (location_type = 0) de uma estação (location_type = 1) ou uma área de embarque (location_type = 2), por exemplo. A coluna parent_station, por sua vez, é utilizada para descrever relações de hierarquia entre dois pontos. Por exemplo, uma área de desembarque deve dizer a qual parada/plataforma ela pertence, assim como uma parada/plataforma pode também, opcionalmente, listar a qual estação ela pertence.\n\n\n4.1.3 routes.txt\nArquivo usado para descrever as linhas de transporte público que rodam no sistema, incluindo os modos de transporte utilizados em cada uma. A Tabela 4.3 mostra o routes.txt do feed da SPTrans.\n\n\n\n\nTabela 4.3: Exemplo de arquivo routes.txt. Fonte: SPTrans\n\n\n\n\n\n\n\n\n\nroute_id\nagency_id\nroute_short_name\nroute_long_name\nroute_type\n\n\n\n\nCPTM L07\n1\nCPTM L07\nJUNDIAI - LUZ\n2\n\n\nCPTM L08\n1\nCPTM L08\nAMADOR BUENO - JULIO PRESTES\n2\n\n\nCPTM L09\n1\nCPTM L09\nGRAJAU - OSASCO\n2\n\n\nCPTM L10\n1\nCPTM L10\nRIO GRANDE DA SERRA - BRÁS\n2\n\n\nCPTM L11\n1\nCPTM L11\nESTUDANTES - LUZ\n2\n\n\nCPTM L12\n1\nCPTM L12\nCALMON VIANA - BRAS\n2\n\n\n\n\n\n\nAssim como no caso do arquivo stops.txt, a tabela do routes.txt também possui diferentes colunas que apontam o identificador de cada linha (route_id) e o seu nome. Nesse caso, no entanto, existem duas colunas de nome: a route_short_name e a route_long_name. A primeira diz respeito ao nome da linha, usualmente utilizado por passageiros no dia-a-dia, enquanto o segundo tende a ser um nome mais descritivo. A SPTrans, por exemplo, optou por destacar os pontos finais de cada linha nessa coluna. Podemos notar também que os mesmos valores se repetem nas colunas route_id e route_short_name, o que não é obrigatório nem proibido - nesse caso, o produtor do feed julgou que os nomes das linhas poderiam funcionar satisfatoriamente como identificadores por serem razoavelmente curtos e não se repetirem.\nA coluna agency_id é a chave que permite relacionar a tabela das rotas com a tabela descrita no agency.txt. Ela faz menção a uma agência descrita naquele arquivo, a agência de id 1 (a própria SPTrans). Essa coluna é opcional no caso de feeds em que existe apenas uma agência, porém é obrigatória nos casos em que existe mais de uma. Imaginemos, por exemplo, um feed que descreve um sistema multimodal que conta com um corredor de metrô e diversas linhas de ônibus: uma configuração possível de routes.txt descreveria as linhas de metrô como de responsabilidade da operadora do metrô, e as de ônibus como de responsabilidade da empresa responsável pelo planejamento das linhas de ônibus, por exemplo.\nA coluna route_type é utilizada para descrever o modo de transporte utilizado em cada linha. Essa coluna aceita diferentes números, cada um representando um determinado modo. Esse exemplo descreve linhas de trem, cujo valor numérico correspondente é 2. Os valores correspondentes para outros modos de transporte são listados na especificação.\n\n\n4.1.4 trips.txt\nArquivo usado para descrever as viagens realizadas no sistema. A viagem é a unidade básica de movimento do formato GTFS: cada viagem é associada a uma linha de transporte público (route_id), a um serviço que opera em determinados dias da semana (como veremos mais à frente no arquivo calendar.txt) e a uma trajetória espacial (como será mostrado no arquivo shapes.txt). A Tabela 4.4 mostra o trips.txt do feed da SPTrans.\n\n\n\n\nTabela 4.4: Exemplo de arquivo trips.txt. Fonte: SPTrans\n\n\n\n\n\n\n\n\n\n\ntrip_id\nroute_id\nservice_id\ntrip_headsign\ndirection_id\nshape_id\n\n\n\n\nCPTM L07-0\nCPTM L07\nUSD\nJUNDIAI\n0\n17846\n\n\nCPTM L07-1\nCPTM L07\nUSD\nLUZ\n1\n17847\n\n\nCPTM L08-0\nCPTM L08\nUSD\nAMADOR BUENO\n0\n17848\n\n\nCPTM L08-1\nCPTM L08\nUSD\nJULIO PRESTES\n1\n17849\n\n\nCPTM L09-0\nCPTM L09\nUSD\nGRAJAU\n0\n17850\n\n\nCPTM L09-1\nCPTM L09\nUSD\nOSASCO\n1\n17851\n\n\n\n\n\n\nA coluna trip_id identifica cada uma das viagens descritas na tabela, assim como a route_id faz referência a uma linha de transporte público identificada no arquivo routes.txt. A coluna service_id identifica serviços que determinam os dias da semana em que cada uma das viagens opera (dias úteis, finais de semana, uma mistura dos dois etc), descritos detalhadamente no arquivo calendar.txt. A última coluna à direita na tabela acima é a shape_id, que identifica a trajetória espacial de cada uma das viagens, descrita em detalhes no arquivo shapes.txt.\nAs duas colunas restantes, trip_headsign e direction_id, são opcionais e devem ser utilizadas para descrever o sentido/destino da viagem. A primeira, trip_headsign, é utilizada para ditar o texto que aparece no letreiro de veículos (no caso de um ônibus, por exemplo) ou em painéis informativos (como em metrôs e trens) destacando o destino da viagem. Já a coluna direction_id é frequentemente utilizada em conjunto com a primeira para dar uma conotação de ida ou volta para cada viagem, onde 0 representa ida e 1, volta, ou vice-versa (assim como ida e volta são conceitos que mudam conforme o referencial, os valores 0 e 1 podem ser usados como desejado, desde que um represente um sentido e o outro, o contrário). No exemplo, as duas primeiras linhas são viagens que fazem menção à mesma rota de transporte público (CPTM L07), porém em sentidos opostos: uma corre em direção a Jundiaí, e a outra à Luz.\n\n\n4.1.5 calendar.txt\nArquivo usado para descrever os diferentes tipos de serviço existentes no sistema. Um serviço, nesse contexto, denota um conjunto de dias da semana em que viagens são realizadas. Cada serviço também é definido pela data em que começa a valer e pela data a partir da qual ele não é mais válido. A Tabela 4.5 mostra o calendar.txt do feed da SPTrans.\n\n\n\n\nTabela 4.5: Exemplo de arquivo calendar.txt. Fonte: SPTrans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nservice_id\nmonday\ntuesday\nwednesday\nthursday\nfriday\nsaturday\nsunday\nstart_date\nend_date\n\n\n\n\nUSD\n1\n1\n1\n1\n1\n1\n1\n20080101\n20200501\n\n\nU__\n1\n1\n1\n1\n1\n0\n0\n20080101\n20200501\n\n\nUS_\n1\n1\n1\n1\n1\n1\n0\n20080101\n20200501\n\n\n_SD\n0\n0\n0\n0\n0\n1\n1\n20080101\n20200501\n\n\n__D\n0\n0\n0\n0\n0\n0\n1\n20080101\n20200501\n\n\nS\n0\n0\n0\n0\n0\n1\n0\n20080101\n20200501\n\n\n\n\n\n\nA coluna service_id identifica cada um dos serviços descritos na tabela. Como mostrado anteriormente, este identificador é usado também no arquivo trips.txt e é o responsável por associar cada viagem a um determinado serviço.\nAs colunas monday, tuesday, wednesday, thursday, friday, saturday e sunday (segunda-feira a domingo, em inglês) são utilizadas para delimitar os dias em que cada serviço funciona. O valor 1 significa que o serviço opera naquele dia, enquanto o valor 0 significa que ele não opera. Como podemos ver no exemplo anterior, o serviço USD opera em todos os dias da semana. Já o serviço U__ opera apenas em dias úteis.\nPor fim, as colunas start_date e end_date delimitam o intervalo em que cada serviço é válido. As datas do formato GTFS são sempre formatadas segundo a regra YYYYMMDD, em que os primeiros quatro números definem o ano, os dois subsequentes definem o mês e os últimos dois, o dia. O valor 20220428, por exemplo, representa o dia 28 de abril de 2022.\n\n\n4.1.6 shapes.txt\nArquivo usado para descrever a trajetória espacial de cada viagem listada no feed. Esse arquivo é opcional, mas é fortemente recomendado que agências de transporte o incluam em seus arquivos GTFS. A Tabela 4.6 mostra o shapes.txt do feed da SPTrans.\n\n\n\n\nTabela 4.6: Exemplo de arquivo shapes.txt. Fonte: SPTrans\n\n\nshape_id\nshape_pt_lat\nshape_pt_lon\nshape_pt_sequence\n\n\n\n\n17846\n-23.53517\n-46.63535\n1\n\n\n17846\n-23.53513\n-46.63548\n2\n\n\n17846\n-23.53494\n-46.63626\n3\n\n\n17846\n-23.53473\n-46.63710\n4\n\n\n17846\n-23.53466\n-46.63735\n5\n\n\n17846\n-23.53416\n-46.63866\n6\n\n\n\n\n\n\nA coluna shape_id identifica cada uma das trajetórias descritas na tabela. Como mostrado anteriormente, esse identificador é usado também no arquivo trips.txt e é o responsável por associar cada viagem à sua trajetória espacial. Diferentemente de todos os outros identificadores que vimos até então, no entanto, o identificador shape_id se repete em diversas observações da tabela. Isso porque o arquivo associa cada shape_id a uma série de pontos espaciais, cujas coordenadas geográficas são descritas nas colunas shape_pt_lat e shape_pt_lon. A coluna shape_pt_sequence lista a sequência na qual os pontos se conectam para formar a trajetória de cada shape_id. Os valores listados nessa coluna devem ser ordenados de forma crescente.\n\n\n4.1.7 stop_times.txt\nArquivo usado para descrever a tabela de horários de cada viagem, incluindo o horário de chegada e partida em cada uma das paradas. A formatação desse arquivo depende da existência ou não de um arquivo frequencies.txt, detalhe que cobriremos mais adiante. Por enquanto, olharemos para o stop_times.txt do feed da SPTrans, que também conta com um frequencies.txt, na Tabela 4.7.\n\n\n\n\nTabela 4.7: Exemplo de arquivo stop_times.txt. Fonte: SPTrans\n\n\ntrip_id\narrival_time\ndeparture_time\nstop_id\nstop_sequence\n\n\n\n\nCPTM L07-0\n04:00:00\n04:00:00\n18940\n1\n\n\nCPTM L07-0\n04:08:00\n04:08:00\n18920\n2\n\n\nCPTM L07-0\n04:16:00\n04:16:00\n18919\n3\n\n\nCPTM L07-0\n04:24:00\n04:24:00\n18917\n4\n\n\nCPTM L07-0\n04:32:00\n04:32:00\n18916\n5\n\n\nCPTM L07-0\n04:40:00\n04:40:00\n18965\n6\n\n\n\n\n\n\nA viagem cuja tabela de horários está sendo descrita é identificada pela coluna trip_id. De forma análoga ao que acontece na tabela de trajetórias, um mesmo trip_id se repete em muitas observações da tabela. Isso porque, assim como a trajetória é composta por uma sequência de pontos espaciais, a tabela de horários é composta por uma sequência de diversos horários de partida/chegada em diversas paradas de transporte público.\nAs colunas seguintes, arrival_time, departure_time e stop_id, são as responsáveis por descrever o cronograma de cada viagem, associando um horário de chegada e um horário de partida a cada uma das paradas da viagem. As colunas de horário são formatadas segundo a regra HH:MM:SS, em que os dois primeiros números definem a hora, os dois seguintes, os minutos e os últimos dois, os segundos. Essa formatação aceita valores de hora maiores do que 24: por exemplo, se uma viagem parte às 23h, mas só chega a uma determinada estação à 1h da manhã do dia seguinte, seu horário de chegada deve ser registrado como 25:00:00, e não 01:00:00. A coluna stop_id, por sua vez, associa os horários de chegada e partida a uma parada descrita no arquivo stops.txt. Por fim, a coluna stop_sequence lista a sequência na qual cada parada se conecta às demais para formar o cronograma da viagem. Seus valores devem ser sempre ordenados de forma crescente.\nVale destacar aqui a diferença entre os arquivos shapes.txt e stop_times.txt. Embora os dois descrevam uma viagem espacialmente, eles o fazem de forma diferente. O stop_times.txt descreve a sequência de paradas e horários que compõem um cronograma, mas nada diz sobre o trajeto percorrido pelo veículo entre cada uma das paradas. Já o shapes.txt traz a trajetória detalhada da viagem como um todo, mas não descreve em que ponto do espaço estão as paradas da viagem. Quando usamos os dois arquivos em conjunto, portanto, sabemos tanto o cronograma de cada viagem quanto a trajetória espacial da viagem entre paradas.\n\n\n4.1.8 frequencies.txt\nArquivo opcional usado para descrever a frequência de cada viagem dentro de um determinado período do dia. A Tabela 4.8 mostra o frequencies.txt do feed da SPTrans.\n\n\n\n\nTabela 4.8: Exemplo de arquivo frequencies.txt. Fonte: SPTrans\n\n\ntrip_id\nstart_time\nend_time\nheadway_secs\n\n\n\n\nCPTM L07-0\n04:00:00\n04:59:00\n720\n\n\nCPTM L07-0\n05:00:00\n05:59:00\n360\n\n\nCPTM L07-0\n06:00:00\n06:59:00\n360\n\n\nCPTM L07-0\n07:00:00\n07:59:00\n360\n\n\nCPTM L07-0\n08:00:00\n08:59:00\n360\n\n\nCPTM L07-0\n09:00:00\n09:59:00\n480\n\n\n\n\n\n\nA viagem cuja frequência está sendo descrita é identificada pela coluna trip_id. Novamente, um mesmo identificador pode aparecer em várias observações da tabela, pois a especificação GTFS prevê que uma mesma viagem pode ter frequências diferentes ao longo do dia (como em horários de pico e fora-pico, por exemplo). Assim, cada linha da tabela se refere à frequência de um determinado trip_id entre um intervalo de tempo especificado pelas colunas start_time e end_time.\nDentro do período especificado por essas duas colunas, a viagem possui um headway detalhado na coluna headway_secs. O headway é o tempo que separa a passagem de dois veículos que operam a mesma linha de transporte público. No caso desse arquivo, esse tempo deve ser especificado em segundos. Um valor de 720 entre 4h e 5h, portanto, significa que a viagem CPTM L07-0 ocorre de 12 em 12 minutos dentro desse período.\nUsando as tabelas frequencies.txt e stop_times.txt conjuntamente\nÉ importante entender, agora, como a presença da tabela frequencies.txt altera a especificação da tabela stop_times.txt. Como podemos ver no exemplo da tabela stop_times.txt, a viagem CPTM L07-0 parte da primeira parada às 4h e chega na segunda às 4h08. O cronograma de chegada e saída de uma mesma parada de uma viagem, no entanto, não pode ser definido mais de uma vez na tabela. Como então definir o cronograma das viagens que partem às 4h12, 4h24, 4h36 etc (lembrando que o headway dessa viagem é de 12 minutos)?\nNo caso em que a frequência de uma viagem é especificada no frequencies.txt, o cronograma (a tabela de horários) de uma viagem definido no stop_times.txt deve ser entendido como uma referência que descreve o tempo entre paradas. Isto é, os horários ali definidos não devem ser interpretados à risca. Por exemplo, o cronograma listado estabelece que o tempo de viagem entre a primeira e a segunda parada é de 8 minutos, e o tempo entre a segunda e a terceira também. Ou seja, a viagem que parte da primeira parada às 4h00 chega na segunda às 4h08, e na terceira às 4h16. A próxima viagem, que parte da primeira parada às 4h12, por sua vez, chega na segunda parada às 4h20, e na terceira às 4h28.\nEntretanto, poderíamos descrever as mesmas viagens no stop_times.txt sem fazer uso do arquivo frequencies.txt. Para isso, poderíamos adicionar um sufixo que identificasse cada uma das viagens referentes à linha CPTM L07 no sentido 0 ao longo do dia. A viagem (trip_id) com identificador CPTM L07-0_1, por exemplo, seria a primeira viagem no sentido 0 do dia e partiria da primeira parada às 4h e chegaria na segunda às 4h08. A viagem CPTM L07-0_2, por sua vez, seria a segunda viagem e partiria da primeira parada às 4h12 e chegaria na segunda às 4h20, e assim por diante. Cada uma dessas viagens deveria ser também adicionada ao arquivo trips.txt e a quaisquer outros que possuam a coluna trip_id como identificador.\nOutro elemento que influencia na forma como o frequencies.txt afeta as tabelas de horários na tabela stop_times.txt é a coluna opcional exact_times. Um valor de 0 nesta coluna (ou quando ela está ausente do feed, como no caso do arquivo GTFS da SPTrans) indica que a viagem não necessariamente segue um cronograma fixo ao longo do período. Em vez disso, operadores tentam se ater a um determinado headway durante o período. Usando o mesmo exemplo de uma viagem cujo headway é de 12 minutos entre 4h e 5h, isso significa que não necessariamente a primeira partida sairá exatamente às 4h, a segunda às 4h12 e por aí em diante. A primeira pode, por exemplo, sair às 4h02. A segunda, às 4h14 ou 4h13 etc. Caso desejemos definir um cronograma que é seguido à risca, obtendo o mesmo resultado que seria obtido se definíssemos diversas viagens semelhantes partindo em diferentes horários no stop_times.txt (como mostrado no parágrafo anterior), devemos utilizar o valor 1 na coluna exact_times."
  },
  {
    "objectID": "4_dados_gtfs.html#onde-encontrar-dados-gtfs-de-cidades-brasileiras",
    "href": "4_dados_gtfs.html#onde-encontrar-dados-gtfs-de-cidades-brasileiras",
    "title": "4  Dados GTFS",
    "section": "4.2 Onde encontrar dados GTFS de cidades brasileiras",
    "text": "4.2 Onde encontrar dados GTFS de cidades brasileiras\nOs dados de GTFS de diversas cidades do mundo podem ser baixados com o pacote de R {tidytransit} ou no site Transitland. No Brasil, diversas cidades usam dados GTFS no planejamento e operação de seus sistemas de transportes. Em muitos casos, no entanto, esses dados são de propriedade de empresas operadoras e concessionárias, e não do poder público. Infelizmente, esses arquivos raramente são disponibilizados aberta e publicamente, contrariando boas práticas de gestão e compartilhamento de dados de interesse público. A Tabela 4.9 mostra as fontes dos dados GTFS de algumas das poucas cidades do Brasil que disponibilizam seus feeds abertamente6.\n\n\n\n\nTabela 4.9: Fontes de dados GTFS publicamente disponíveis no Brasil\n\n\nCidade\nFonte\nInformações\n\n\n\n\nBelo Horizonte\nEmpresa de Transportes e Trânsito de Belo Horizonte (BHTrans)\nDado aberto: transporte convencional; transporte suplementar.\n\n\nFortaleza\nEmpresa de Transporte Urbano de Fortaleza (ETUFOR)\nDado aberto.\n\n\nFortaleza\nMetrô de Fortaleza (Metrofor)\nDado aberto.\n\n\nPorto Alegre\nEmpresa Pública de Transporte e Circulação de Porto Alegre (EPTC)\nDado aberto.\n\n\nRio de Janeiro\nSecretaria Municipal de Transportes (SMTR)\nDado aberto.\n\n\nSão Paulo\nEmpresa Metropolitana de Transportes Urbanos de São Paulo (EMTU)\nDownload neste link. Necessário cadastro.\n\n\nSão Paulo\nSPTrans\nDownload neste link. Necessário cadastro.\n\n\n\n\n\n\nObs.: Os dados de GTFS disponibilizados pela SMTR não incluem os dados dos sistemas de trem e de metrô.\n\n\n\n\nMcHugh, Bibiana. 2013. «Pioneering Open Data Standards: The GTFS Story». Em Beyond Transparency: Open Data and the Future of Civic Innovation, editado por Brett Goldstein e Lauren Dyson, First, 125–35. San Francisco, CA: Code for America Press.\n\n\nPereira, Rafael H. M., Pedro R. Andrade, e João Pedro Bazzo Vieira. 2022. «Exploring the Time Geography of Public Transport Networks with the Gtfs2gps Package». Journal of Geographical Systems, dezembro. https://doi.org/10.1007/s10109-022-00400-x."
  },
  {
    "objectID": "4_dados_gtfs.html#footnotes",
    "href": "4_dados_gtfs.html#footnotes",
    "title": "4  Dados GTFS",
    "section": "",
    "text": "Para mais informações sobre o GTFS Realtime, por favor visite https://gtfs.org/realtime/.↩︎\nNeste livro, utilizaremos os termos feed, arquivo GTFS e dados GTFS como sinônimos.↩︎\nConforme a especificação oficial, versão da revisão 9 de maio de 2022.↩︎\nPara mais informações sobre as tabelas e as colunas não abordadas nesta seção, por favor verifique a especificação oficial.↩︎\nDisponível em https://www.sptrans.com.br/desenvolvedores/.↩︎\nLevantamento realizado até o momento da publicação do livro.↩︎"
  },
  {
    "objectID": "5_gtfstools.html#leitura-e-manipulação-básica-de-arquivos-gtfs",
    "href": "5_gtfstools.html#leitura-e-manipulação-básica-de-arquivos-gtfs",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "5.1 Leitura e manipulação básica de arquivos GTFS",
    "text": "5.1 Leitura e manipulação básica de arquivos GTFS\nA leitura de arquivos GTFS com o {gtfstools} é feita com a função read_gtfs(), que recebe uma string com o caminho do arquivo. Após sua leitura, o feed é representado como uma lista de data.tables, uma versão de alta performance da classe data.frame. Ao longo deste capítulo, vamos nos referir a essa lista de tabelas como um objeto GTFS. Por padrão, a função lê todas as tabelas .txt do feed:\n\n# carrega biblioteca\nlibrary(gtfstools)\n\n# aponta para o endereço do arquivo gtfs dentro do {gtfstools}\nendereco &lt;- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")\n\n# le o gtfs\ngtfs &lt;- read_gtfs(endereco)\n\n# consulta o nome das tabelas dentro da lista\nnames(gtfs)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\n\nComo podemos ver, cada data.table dentro do objeto GTFS é nomeado de acordo com a tabela que ele representa, sem a extensão .txt. Isso nos permite selecionar e manipular cada uma das tabelas separadamente. O código adiante, por exemplo, mostra os seis primeiros registros da tabela trips:\n\nhead(gtfs$trips)\n\n   route_id service_id    trip_id trip_headsign direction_id shape_id\n1: CPTM L07        USD CPTM L07-0       JUNDIAI            0    17846\n2: CPTM L07        USD CPTM L07-1           LUZ            1    17847\n3: CPTM L08        USD CPTM L08-0  AMADOR BUENO            0    17848\n4: CPTM L08        USD CPTM L08-1 JULIO PRESTES            1    17849\n5: CPTM L09        USD CPTM L09-0        GRAJAU            0    17850\n6: CPTM L09        USD CPTM L09-1        OSASCO            1    17851\n\n\nAs tabelas dentro de um objeto GTFS podem ser facilmente manipuladas usando a sintaxe dos pacotes {dplyr} ou {data.table}. Neste livro, optamos por utilizar a sintaxe do {data.table}, pois esse pacote oferece diversas funcionalidades úteis para a manipulação de tabelas com grande quantidade de registros, tal como a edição de colunas por referência, filtros de linhas muito rápidos e agregação de dados eficiente1. Para adicionar 100 segundos a todos os headways listados na tabela frequencies e reverter essa mudança em seguida, por exemplo, podemos usar o código a seguir:\n\n# salva o headway original\nheadway_original &lt;- gtfs$frequencies$headway_secs\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          720\n2: CPTM L07-0   05:00:00 05:59:00          360\n3: CPTM L07-0   06:00:00 06:59:00          360\n\n# modifica o headway\ngtfs$frequencies[, headway_secs := headway_secs + 100]\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          820\n2: CPTM L07-0   05:00:00 05:59:00          460\n3: CPTM L07-0   06:00:00 06:59:00          460\n\n# restitui o headway original\ngtfs$frequencies[, headway_secs := headway_original]\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          720\n2: CPTM L07-0   05:00:00 05:59:00          360\n3: CPTM L07-0   06:00:00 06:59:00          360\n\n\nApós editarmos um objeto GTFS no R, frequentemente vamos querer usar o GTFS manipulado para fazer análises de diferentes tipos. Para isso, é comum que precisemos do arquivo GTFS em formato .zip novamente, e não como uma lista de tabelas dentro do R. O pacote {gtfstools} disponibiliza a função write_gtfs() exatamente com a finalidade de transformar objetos GTFS que existem apenas dentro do R em arquivos GTFS armazenados no seu computador. Para usarmos essa função, precisamos apenas listar o objeto e o endereço no qual o arquivo deve ser salvo:\n\n# aponta para o endereço onde arquivo deve ser salvo\nendereco_destino &lt;- tempfile(\"novo_gtfs\", fileext = \".zip\")\n\n# salva o GTFS no endereco\nwrite_gtfs(gtfs, path = endereco_destino)\n\n# lista arquivos dentro do feed recém-salvo\nzip::zip_list(endereco_destino)[, c(\"filename\", \"compressed_size\", \"timestamp\")]\n\n         filename compressed_size           timestamp\n1      agency.txt             112 2023-04-18 17:28:48\n2    calendar.txt             129 2023-04-18 17:28:48\n3 frequencies.txt            2381 2023-04-18 17:28:48\n4      routes.txt             659 2023-04-18 17:28:48\n5      shapes.txt          160470 2023-04-18 17:28:48\n6  stop_times.txt            7907 2023-04-18 17:28:48\n7       stops.txt           18797 2023-04-18 17:28:48\n8       trips.txt             717 2023-04-18 17:28:48"
  },
  {
    "objectID": "5_gtfstools.html#cálculo-de-velocidade-das-linhas",
    "href": "5_gtfstools.html#cálculo-de-velocidade-das-linhas",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "5.2 Cálculo de velocidade das linhas",
    "text": "5.2 Cálculo de velocidade das linhas\nArquivos GTFS são frequentemente utilizados em estimativas de roteamento de transporte público e para informar passageiros sobre a tabela de horários das diferentes rotas que operam em uma região. Dessa forma, é extremamente importante que o cronograma das viagens e a velocidade operacional de cada linha estejam adequadamente descritos no feed.\nO {gtfstools} disponibiliza a função get_trip_speed() para facilitar o cálculo da velocidade de cada viagem presente no feed. Por padrão, a função calcula a velocidade (em km/h) de todas as viagens do GTFS, mas viagens individuais também podem ser especificadas:\n\n# calcula as velocidade de todas as viagens\nvelocidades &lt;- get_trip_speed(gtfs)\n\nhead(velocidades)\n\n     trip_id origin_file     speed\n1: 2002-10-0      shapes  8.952511\n2: 2105-10-0      shapes 10.253365\n3: 2105-10-1      shapes  9.795292\n4: 2161-10-0      shapes 11.182534\n5: 2161-10-1      shapes 11.784458\n6: 4491-10-0      shapes 13.203560\n\nnrow(velocidades)\n\n[1] 36\n\n# calcula as velocidade de duas viagens específicas\nvelocidades &lt;- get_trip_speed(gtfs, trip_id = c(\"CPTM L07-0\", \"2002-10-0\"))\n\nhead(velocidades)\n\n      trip_id origin_file     speed\n1:  2002-10-0      shapes  8.952511\n2: CPTM L07-0      shapes 26.787768\n\n\nCalcular a velocidade de uma viagem requer que saibamos o seu comprimento e em quanto tempo ela foi realizada. Para isso, a get_trip_speed() utiliza duas outras funções do {gtfstools} por trás dos panos: a get_trip_length() e a get_trip_duration(). O funcionamento das duas é muito parecido com o mostrado anteriormente, calculando o comprimento/duração de todas as viagens por padrão, ou de apenas algumas selecionadas, caso desejado. A seguir, mostramos seus comportamentos padrões:\n\n# calcula a distância percorrida de todas viagens\ndistancias &lt;- get_trip_length(gtfs, file = \"shapes\")\n\nhead(distancias)\n\n      trip_id   length origin_file\n1: CPTM L07-0 60.71894      shapes\n2: CPTM L07-1 60.71894      shapes\n3: CPTM L08-0 41.79037      shapes\n4: CPTM L08-1 41.79037      shapes\n5: CPTM L09-0 31.88906      shapes\n6: CPTM L09-1 31.88906      shapes\n\n# calcula a duração de todas viagens\nduracao &lt;- get_trip_duration(gtfs)\n\nhead(duracao)\n\n     trip_id duration\n1: 2002-10-0       48\n2: 2105-10-0      108\n3: 2105-10-1      111\n4: 2161-10-0       94\n5: 2161-10-1       93\n6: 4491-10-0       69\n\n\nAssim como a get_trip_speed() calcula as velocidades em km/h por padrão, a get_trip_length() e a get_trip_duration() calculam os comprimentos e as durações em quilômetros e em minutos, respectivamente. Essas unidades podem ser ajustadas com o argumento unit, presente nas três funções."
  },
  {
    "objectID": "5_gtfstools.html#combinando-e-filtrando-feeds",
    "href": "5_gtfstools.html#combinando-e-filtrando-feeds",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "5.3 Combinando e filtrando feeds",
    "text": "5.3 Combinando e filtrando feeds\nMuitas vezes, o processamento e a edição de arquivos GTFS são realizados, em grande medida, manualmente. Por isso, pequenas inconsistências podem passar batidas pelos responsáveis por esse processamento. Um problema comumente observado em feeds é a presença de registros duplicados em uma mesma tabela. O feed da SPTrans, por exemplo, possui registros duplicados tanto no agency.txt quanto no calendar.txt:\n\ngtfs$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n2:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n2: America/Sao_Paulo          pt\n\ngtfs$calendar\n\n    service_id monday tuesday wednesday thursday friday saturday sunday\n 1:        USD      1       1         1        1      1        1      1\n 2:        U__      1       1         1        1      1        0      0\n 3:        US_      1       1         1        1      1        1      0\n 4:        _SD      0       0         0        0      0        1      1\n 5:        __D      0       0         0        0      0        0      1\n 6:        _S_      0       0         0        0      0        1      0\n 7:        USD      1       1         1        1      1        1      1\n 8:        U__      1       1         1        1      1        0      0\n 9:        US_      1       1         1        1      1        1      0\n10:        _SD      0       0         0        0      0        1      1\n11:        __D      0       0         0        0      0        0      1\n12:        _S_      0       0         0        0      0        1      0\n    start_date   end_date\n 1: 2008-01-01 2020-05-01\n 2: 2008-01-01 2020-05-01\n 3: 2008-01-01 2020-05-01\n 4: 2008-01-01 2020-05-01\n 5: 2008-01-01 2020-05-01\n 6: 2008-01-01 2020-05-01\n 7: 2008-01-01 2020-05-01\n 8: 2008-01-01 2020-05-01\n 9: 2008-01-01 2020-05-01\n10: 2008-01-01 2020-05-01\n11: 2008-01-01 2020-05-01\n12: 2008-01-01 2020-05-01\n\n\nO {gtfstools} disponibiliza a função remove_duplicates() para remover essas duplicatas. Essa função recebe como input um objeto GTFS e retorna o mesmo objeto, porém sem registros duplicados:\n\n# remove valores duplicados\ngtfs_sem_dups &lt;- remove_duplicates(gtfs)\n\ngtfs_sem_dups$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n\ngtfs_sem_dups$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:        USD      1       1         1        1      1        1      1\n2:        U__      1       1         1        1      1        0      0\n3:        US_      1       1         1        1      1        1      0\n4:        _SD      0       0         0        0      0        1      1\n5:        __D      0       0         0        0      0        0      1\n6:        _S_      0       0         0        0      0        1      0\n   start_date   end_date\n1: 2008-01-01 2020-05-01\n2: 2008-01-01 2020-05-01\n3: 2008-01-01 2020-05-01\n4: 2008-01-01 2020-05-01\n5: 2008-01-01 2020-05-01\n6: 2008-01-01 2020-05-01\n\n\nFrequentemente, também, lidamos com múltiplos feeds em uma mesma área de estudo. Por exemplo, quando os dados dos sistemas de ônibus e de trens de uma mesma cidade estão salvos em arquivos GTFS separados. Nesse caso, muitas vezes gostaríamos de uni-los em um único arquivo, diminuindo assim o esforço de manipulação e processamento dos dados. Para isso, o {gtfstools} disponibiliza a função merge_gtfs(). O exemplo a seguir mostra o resultado da combinação de dois feeds distintos, o da SPTrans (sem duplicatas) e o da EPTC, de Porto Alegre:\n\n# lê GTFS de Porto Alegre\nendereco_poa &lt;- system.file(\"extdata/poa_gtfs.zip\", package = \"gtfstools\")\ngtfs_poa &lt;- read_gtfs(endereco_poa)\n\ngtfs_poa$agency\n\n   agency_id                                 agency_name             agency_url\n1:      EPTC Empresa Publica de Transportes e Circulação http://www.eptc.com.br\n     agency_timezone agency_lang agency_phone\n1: America/Sao_Paulo          pt          156\n                                                  agency_fare_url\n1: http://www2.portoalegre.rs.gov.br/eptc/default.php?p_secao=155\n\ngtfs_sem_dups$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n\n# combina objetos GTFS de Porto Alegre e São Paulo\ngtfs_combinado &lt;- merge_gtfs(gtfs_sem_dups, gtfs_poa)\n\n# checa resultados\ngtfs_combinado$agency\n\n   agency_id                                 agency_name\n1:         1                                     SPTRANS\n2:      EPTC Empresa Publica de Transportes e Circulação\n                                 agency_url   agency_timezone agency_lang\n1: http://www.sptrans.com.br/?versao=011019 America/Sao_Paulo          pt\n2:                   http://www.eptc.com.br America/Sao_Paulo          pt\n   agency_phone                                                agency_fare_url\n1:                                                                            \n2:          156 http://www2.portoalegre.rs.gov.br/eptc/default.php?p_secao=155\n\n\nComo podemos ver, os registros das tabelas de ambos os feeds foram combinados em uma única tabela. Esse é o caso quando os dois (ou mais, se desejado) objetos GTFS possuem registros de uma mesma tabela (a agency, no exemplo). Caso apenas um dos objetos possua uma das tabelas, a operação copia essa tabela para o resultado final. É o caso, por exemplo, da tabela frequencies, que existe no feed da SPTrans, mas não no da EPTC:\n\nnames(gtfs_poa)\n\n[1] \"agency\"     \"calendar\"   \"routes\"     \"shapes\"     \"stop_times\"\n[6] \"stops\"      \"trips\"     \n\nnames(gtfs_sem_dups)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\nnames(gtfs_combinado)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\nidentical(gtfs_sem_dups$frequencies, gtfs_combinado$frequencies)\n\n[1] TRUE\n\n\nUm outro tipo de operação muito utilizada no tratamento de dados GTFS é o de filtragem desses arquivos. Frequentemente, feeds são usados para descrever redes de transporte público de grande escala, o que pode transformar sua edição, sua análise e seu compartilhamento em operações complexas. Por esse motivo, pesquisadores e planejadores muitas vezes precisar trabalhar com um subconjunto de dados descritos nos feeds. Por exemplo, caso desejemos estimar a performance da rede de transporte em uma determinada região no horário de pico da manhã, podemos filtrar o nosso arquivo GTFS de modo a manter apenas os registros referentes a viagens que ocorrem nesse intervalo do dia.\nO pacote {gtfstools} traz diversas funções para facilitar a filtragem de arquivos GTFS. São elas:\n\nfilter_by_agency_id();\nfilter_by_route_id();\nfilter_by_service_id();\nfilter_by_shape_id();\nfilter_by_stop_id();\nfilter_by_trip_id();\nfilter_by_route_type();\nfilter_by_weekday();\nfilter_by_time_of_day(); e\nfilter_by_sf().\n\nFiltro por identificadores\nAs sete primeiras funções mencionadas anteriormente são utilizadas de forma muito similar. Devemos especificar um vetor de identificadores que é usado para manter no objeto GTFS apenas os registros relacionados a esses identificadores. O exemplo a seguir demonstra essa funcionalidade com a filter_by_trip_id():\n\n# checa tamanho do feed antes do filtro\nutils::object.size(gtfs)\n\n864568 bytes\n\nhead(gtfs$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id trip_headsign shape_id\n1: CPTM L07-0       JUNDIAI    17846\n2: CPTM L07-1           LUZ    17847\n3: CPTM L08-0  AMADOR BUENO    17848\n4: CPTM L08-1 JULIO PRESTES    17849\n5: CPTM L09-0        GRAJAU    17850\n6: CPTM L09-1        OSASCO    17851\n\n# mantém apenas registros relacionados a duas viagens\ngtfs_filtrado &lt;- filter_by_trip_id(\n  gtfs,\n  trip_id = c(\"CPTM L07-0\", \"CPTM L07-1\")\n)\n\n# checa tamanho do feed após o filtro\nutils::object.size(gtfs_filtrado)\n\n71592 bytes\n\nhead(gtfs_filtrado$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id trip_headsign shape_id\n1: CPTM L07-0       JUNDIAI    17846\n2: CPTM L07-1           LUZ    17847\n\nunique(gtfs_filtrado$shapes$shape_id)\n\n[1] \"17846\" \"17847\"\n\n\nO código mostra que a função não filtra apenas a tabela trips, mas também as outras tabelas que possuem algum tipo de relação com os identificadores especificados. Por exemplo, a trajetória das viagens CPTM L07-0 e CPTM L07-1 é descrita pelos shape_ids 17846 e 17847, respectivamente. Esses são, portanto, os únicos identificadores da tabela shapes mantidos no GTFS filtrado.\nA função também pode funcionar com o comportamento diametralmente oposto: em vez de definirmos os identificadores cujos registros devem ser mantidos no feed, podemos especificar os identificadores que devem ser retirados dele. Para isso, usamos o argumento keep com valor FALSE:\n\n# remove duas viagens do feed\ngtfs_filtrado &lt;- filter_by_trip_id(\n  gtfs,\n  trip_id = c(\"CPTM L07-0\", \"CPTM L07-1\"),\n  keep = FALSE\n)\n\nhead(gtfs_filtrado$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id       trip_headsign shape_id\n1: CPTM L08-0        AMADOR BUENO    17848\n2: CPTM L08-1       JULIO PRESTES    17849\n3: CPTM L09-0              GRAJAU    17850\n4: CPTM L09-1              OSASCO    17851\n5: CPTM L10-0 RIO GRANDE DA SERRA    17852\n6: CPTM L10-1                BRÁS    17853\n\nhead(unique(gtfs_filtrado$shapes$shape_id))\n\n[1] \"17848\" \"17849\" \"17850\" \"17851\" \"17852\" \"17853\"\n\n\nComo podemos ver, as viagens especificadas, bem como suas trajetórias, não estão presentes no GTFS filtrado. A mesma lógica aqui demonstrada com a filter_by_trip_id() é válida para as funções que filtram objetos GTFS pelos identificadores agency_id, route_id, service_id, shape_id, stop_id e route_type.\nFiltro por dia e hora\nOutra operação que recorrentemente aparece em análises que envolvem dados GTFS é a de manter serviços que funcionem apenas em determinados horários do dia ou dias da semana. Para isso, o pacote disponibiliza as funções filter_by_weekday() e filter_by_time_of_day().\nA filter_by_weekday() recebe os dias da semana (em inglês) cujos serviços que neles operam devem ser mantidos. Adicionalmente, a função também inclui o argumento combine, que define como filtros de dois ou mais dias funcionam. Quando este recebe o valor ”and”, apenas serviços que operam em todos os dias especificados são mantidos. Quando recebe o valor ”or”, serviços que operam em pelo menos um dos dias são mantidos:\n\n# mantém apenas serviços que operam no sábado E no domingo\ngtfs_filtrado &lt;- filter_by_weekday(\n  gtfs = gtfs_sem_dups,\n  weekday = c(\"saturday\", \"sunday\"),\n  combine = \"and\"\n)\n\ngtfs_filtrado$calendar[, c(\"service_id\", \"sunday\", \"saturday\")]\n\n   service_id sunday saturday\n1:        USD      1        1\n2:        _SD      1        1\n\n# mantém apenas serviços que operam OU no sábado OU no domingo\ngtfs_filtrado &lt;- filter_by_weekday(\n  gtfs = gtfs_sem_dups,\n  weekday = c(\"sunday\", \"saturday\"),\n  combine = \"or\"\n)\n\ngtfs_filtrado$calendar[, c(\"service_id\", \"sunday\", \"saturday\")]\n\n   service_id sunday saturday\n1:        USD      1        1\n2:        US_      0        1\n3:        _SD      1        1\n4:        __D      1        0\n5:        _S_      0        1\n\n\nA filter_by_time_of_day(), por sua vez, recebe o começo e o final de uma janela de tempo e mantém os registros relacionados a viagens que rodam dentro dessa janela. O funcionamento da função depende da presença ou não da tabela frequencies no GTFS: o cronograma descrito na stop_times das viagens descritas na tabela frequencies não deve ser filtrado, pois, como comentado no capítulo anterior, ele serve como um modelo que dita o tempo de viagem entre uma parada e outra. Caso a frequencies esteja ausente, no entanto, a stop_times é filtrada segundo o intervalo de tempo especificado. Vamos ver como isso funciona com um exemplo:\n\n# mantém apenas viagens dentro do período de 5 às 6 da manhã\ngtfs_filtrado &lt;- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")\n\nhead(gtfs_filtrado$frequencies)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   05:00:00 05:59:00          360\n2: CPTM L07-1   05:00:00 05:59:00          360\n3: CPTM L08-0   05:00:00 05:59:00          480\n4: CPTM L08-1   05:00:00 05:59:00          480\n5: CPTM L09-0   05:00:00 05:59:00          480\n6: CPTM L09-1   05:00:00 05:59:00          480\n\nhead(gtfs_filtrado$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")])\n\n      trip_id departure_time arrival_time\n1: CPTM L07-0       04:00:00     04:00:00\n2: CPTM L07-0       04:08:00     04:08:00\n3: CPTM L07-0       04:16:00     04:16:00\n4: CPTM L07-0       04:24:00     04:24:00\n5: CPTM L07-0       04:32:00     04:32:00\n6: CPTM L07-0       04:40:00     04:40:00\n\n# salva a tabela frequencies e a remove do objeto gtfs\nfrequencies &lt;- gtfs$frequencies\ngtfs$frequencies &lt;- NULL\n\ngtfs_filtrado &lt;- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")\n\nhead(gtfs_filtrado$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")])\n\n      trip_id departure_time arrival_time\n1: CPTM L07-0       05:04:00     05:04:00\n2: CPTM L07-0       05:12:00     05:12:00\n3: CPTM L07-0       05:20:00     05:20:00\n4: CPTM L07-0       05:28:00     05:28:00\n5: CPTM L07-0       05:36:00     05:36:00\n6: CPTM L07-0       05:44:00     05:44:00\n\n\nO filtro da tabela stop_times pode funcionar de duas formas distintas: mantendo intactas todas as viagens que cruzam a janela de tempo especificada; ou mantendo no cronograma apenas as paradas que são visitadas dentro da janela (comportamento padrão da função). Esse comportamento é controlado com o parâmetro full_trips, como mostrado a seguir (atenção aos horários e aos segmentos presentes em cada exemplo):\n\n# mantém apenas viagens inteiramente dentro do período de 5 às 6 da manhã\ngtfs_filtrado &lt;- filter_by_time_of_day(\n  gtfs,\n  from = \"05:00:00\", \n  to = \"06:00:00\",\n  full_trips = TRUE\n)\n\nhead(\n  gtfs_filtrado$stop_times[\n    ,\n    c(\"trip_id\", \"departure_time\", \"arrival_time\", \"stop_sequence\")\n  ]\n)\n\n      trip_id departure_time arrival_time stop_sequence\n1: CPTM L07-0       04:00:00     04:00:00             1\n2: CPTM L07-0       04:08:00     04:08:00             2\n3: CPTM L07-0       04:16:00     04:16:00             3\n4: CPTM L07-0       04:24:00     04:24:00             4\n5: CPTM L07-0       04:32:00     04:32:00             5\n6: CPTM L07-0       04:40:00     04:40:00             6\n\n# mantém apenas paradas que são visitadas entre 5 e 6 da manhã\ngtfs_filtrado &lt;- filter_by_time_of_day(\n  gtfs,\n  from = \"05:00:00\",\n  to = \"06:00:00\",\n  full_trips = FALSE\n)\n\nhead(\n  gtfs_filtrado $stop_times[\n    ,\n    c(\"trip_id\", \"departure_time\", \"arrival_time\", \"stop_sequence\")\n  ]\n)\n\n      trip_id departure_time arrival_time stop_sequence\n1: CPTM L07-0       05:04:00     05:04:00             9\n2: CPTM L07-0       05:12:00     05:12:00            10\n3: CPTM L07-0       05:20:00     05:20:00            11\n4: CPTM L07-0       05:28:00     05:28:00            12\n5: CPTM L07-0       05:36:00     05:36:00            13\n6: CPTM L07-0       05:44:00     05:44:00            14\n\n\nFiltro espacial\nPor fim, o {gtfstools} também disponibiliza uma função que permite filtrar o objeto GTFS usando um polígono espacial. A filter_by_sf() recebe um objeto do tipo sf/sfc (representação espacial criada pelo pacote {sf}), ou sua bounding box, e mantém os registros cujas viagens são selecionadas por uma operação espacial que também deve ser especificada. Embora aparentemente complicado, esse processo de filtragem é compreendido com facilidade quando apresentado visualmente. Para isso, vamos filtrar o GTFS da SPTrans pela bounding box da trajetória 68962. Com o código a seguir, apresentamos a distribuição espacial dos dados não filtrados, com a bounding box destacada em vermelho (Figura 5.1):\n\n# carrega biblioteca ggplot2 para visualização de dados\nlibrary(ggplot2)\n\n# cria poligono com a bounding box da trajetoria 68962\ntrajetoria_68962 &lt;- convert_shapes_to_sf(gtfs, shape_id = \"68962\")\nbbox &lt;- sf::st_bbox(trajetoria_68962)\ngeometria_bbox &lt;- sf::st_as_sfc(bbox)\n\n# gera geometria de todas as trajetorias do gtfs\ntodas_as_trajetorias &lt;- convert_shapes_to_sf(gtfs)\n\nggplot() +\n  geom_sf(data = todas_as_trajetorias) +\n  geom_sf(data = geometria_bbox, fill = NA, color = \"red\") +\n  theme_minimal()\n\n\n\n\nFigura 5.1: Distribuição espacial das trajetórias, com a bounding box da trajetória 68962 em destaque\n\n\n\n\nNote que usamos a função convert_shapes_to_sf(), também disponibilizada pelo {gtfstools}, que converte uma determinada trajetória descrita no GTFS em um objeto espacial do tipo sf. Por padrão, a filter_by_sf() mantém os dados relacionados aos registros de viagens cujas trajetórias possuem alguma interseção com o polígono espacial selecionado:\n\ngtfs_filtrado &lt;- filter_by_sf(gtfs, bbox)\ntrajetorias_filtradas &lt;- convert_shapes_to_sf(gtfs_filtrado)\n\nggplot() +\n  geom_sf(data = trajetorias_filtradas) +\n  geom_sf(data = geometria_bbox, fill = NA, color = \"red\") +\n  theme_minimal()\n\n\n\n\nFigura 5.2: Distribuição espacial das trajetórias com interseções com a bounding box da trajetória 68962\n\n\n\n\nPodemos, no entanto, controlar a operação espacial usada no processo de filtragem. Por exemplo, o código adiante mostra como podemos manter os dados relacionados a viagens que estão contidas dentro do polígono espacial:\n\ngtfs_filtrado &lt;- filter_by_sf(gtfs, bbox, spatial_operation = sf::st_contains)\ntrajetorias_filtradas &lt;- convert_shapes_to_sf(gtfs_filtrado)\n\nggplot() +\n  geom_sf(data = trajetorias_filtradas) +\n  geom_sf(data = geometria_bbox, fill = NA, color = \"red\") +\n  theme_minimal()\n\n\n\n\nFigura 5.3: Distribuição espacial das trajetórias contidas na bounding box da trajetória 68962"
  },
  {
    "objectID": "5_gtfstools.html#validação-de-arquivos-gtfs",
    "href": "5_gtfstools.html#validação-de-arquivos-gtfs",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "5.4 Validação de arquivos GTFS",
    "text": "5.4 Validação de arquivos GTFS\nPlanejadores e pesquisadores frequentemente querem avaliar a qualidade dos arquivos GTFS que estão utilizando em suas análises ou que estão produzindo. Os feeds estão estruturados conforme boas práticas adotadas pela comunidade que usa a especificação? As tabelas e colunas estão formatadas corretamente? A informação descrita pelo feed parece verossímil (velocidade das viagens, localização das paradas etc)? Essas são algumas das perguntas que podem surgir ao lidar com dados no formato GTFS.\nPara responder a essas e outras perguntas, o {gtfstools} inclui a função validate_gtfs(), que serve como interface entre o R e o Canonical GTFS Validator, software desenvolvido pela MobilityData. O uso do validador requer que o Java versão 11 ou superior esteja instalado2.\nUsar a validate_gtfs() é muito simples. Primeiro, precisamos baixar o software de validação. Para isso, podemos usar a função download_validator(), também disponível no pacote, que recebe o endereço de uma pasta na qual o validador deve ser salvo e a versão do validador desejada (por padrão, a mais recente). Como resultado, a função retorna o endereço do arquivo baixado:\n\npasta_temporaria &lt;- tempdir()\n\nendereco_validador &lt;- download_validator(pasta_temporaria)\nendereco_validador\n\n[1] \"/tmp/Rtmp8Yb7hK/gtfs-validator-v4.0.0.jar\"\n\n\nA segunda (e última) etapa consiste em de fato rodar a função validate_gtfs(). Essa função aceita que os dados GTFS a serem validados sejam passados de diferentes formas: i) como um objeto GTFS existente apenas no R; ii) como o endereço de um arquivo GTFS salvo localmente em formato .zip; iii) como uma URL apontando para um feed; ou iv) como uma pasta que contém os dados GTFS não compactados. A função também recebe o endereço para uma pasta onde o resultado da validação deve ser salvo e o endereço para o validador que deve ser usado. Nesse exemplo, vamos fazer a validação a partir do endereço do GTFS da SPTrans, lido anteriormente:\n\npasta_resultado &lt;- tempfile(\"validacao_com_endereco\")\n\nvalidate_gtfs(\n  endereco,\n  output_path = pasta_resultado,\n  validator_path = endereco_validador\n)\n\nlist.files(pasta_resultado)\n\n[1] \"report.html\"           \"report.json\"           \"system_errors.json\"   \n[4] \"validation_stderr.txt\"\n\n\nComo podemos ver, a validação gera alguns arquivos como resultado:\n\nreport.html, mostrado na Figura 5.4, que resume os resultados da validação em uma página HTML (apenas disponível quando utilizado o validador v3.1.0 ou superior);\nreport.json, que resume a mesma informação apresentada na página HTML, porém em formato JSON, que pode ser usado para processar e interpretar os resultados de forma programática;\nsystem_errors.json, que apresenta eventuais erros de sistema que tenham ocorrido durante a validação e que podem comprometer os resultados; e\nvalidation_stderr.txt, que lista mensagens informativas enviadas pelo validador, incluindo uma lista dos testes realizados, eventuais mensagens de erro etc3.\n\n\n\n\n\n\nFigura 5.4: Exemplo de relatório gerado durante a validação"
  },
  {
    "objectID": "5_gtfstools.html#fluxo-de-trabalho-com-o-gtfstools-mapeando-o-headway-das-linhas",
    "href": "5_gtfstools.html#fluxo-de-trabalho-com-o-gtfstools-mapeando-o-headway-das-linhas",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "5.5 Fluxo de trabalho com o {gtfstools}: mapeando o headway das linhas",
    "text": "5.5 Fluxo de trabalho com o {gtfstools}: mapeando o headway das linhas\nComo mostrado nas seções anteriores, o {gtfstools} disponibiliza uma grande caixa de ferramentas que podem ser usadas no processamento e na análise de arquivos GTFS. O pacote, no entanto, oferece diversas outras funções que não puderam ser apresentadas neste livro, por limitação de espaço4.\nA apresentação das funções feita até aqui tem um importante caráter demonstrativo, porém não mostra como elas podem ser usadas de forma conjunta na análise de um arquivo GTFS. A presente seção preenche essa lacuna, mostrando como o pacote pode ser usado, por exemplo, para responder a seguinte pergunta: como se distribuem espacialmente os tempos entre veículos de uma mesma linha (os headways) no GTFS da SPTrans?\nA primeira etapa é definir o escopo da nossa análise. Para exemplificar, vamos considerar o headway no pico da manhã, entre 7h e 9h, em uma típica terça-feira de operação. Para isso, precisamos filtrar o nosso feed:\n\n# lê o arquivo GTFS\ngtfs &lt;- read_gtfs(endereco)\n\n# filtra o GTFS\ngtfs_filtrado &lt;- gtfs |&gt;\n  remove_duplicates() |&gt;\n  filter_by_weekday(\"tuesday\") |&gt;\n  filter_by_time_of_day(from = \"07:00:00\", to = \"09:00:00\")\n\n# checa resultado do filtro\ngtfs_filtrado$frequencies[trip_id == \"2105-10-0\"]\n\n     trip_id start_time end_time headway_secs\n1: 2105-10-0   07:00:00 07:59:00          900\n2: 2105-10-0   08:00:00 08:59:00         1200\n\ngtfs_filtrado$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:        USD      1       1         1        1      1        1      1\n2:        U__      1       1         1        1      1        0      0\n   start_date   end_date\n1: 2008-01-01 2020-05-01\n2: 2008-01-01 2020-05-01\n\n\nEm seguida, precisamos calcular o headway dentro do período estabelecido. Essa informação pode ser encontrada na tabela frequencies, mas há um elemento complicador: cada viagem está associada a mais de um headway, como vimos anteriormente (um registro para o período entre 7h e 7h59 e outro para o período entre 8h e 8h59). Para resolver essta questão, portanto, vamos calcular o headway médio no intervalo entre 7h e 9h.\nOs primeiros registros da tabela frequencies do GTFS da SPTrans parecem sugerir que os períodos do dia estão listados sempre de uma em uma hora, porém essa não é uma regra estabelecida na especificação GTFS nem é a prática adotada em outros feeds. Por isso, vamos calcular a média ponderada do headway no período especificado. Para isso, precisamos multiplicar cada headway pelo intervalo de tempo em que ele é válido e dividir o total desta soma pelo intervalo de tempo total (duas horas). Para calcular o intervalo de tempo em que cada headway é válido, calculamos o começo e o fim do intervalo em segundos com a função convert_time_to_seconds() e subtraímos o valor do fim pelo do começo, como mostrado a seguir:\n\ngtfs_filtrado &lt;- convert_time_to_seconds(gtfs_filtrado)\n\ngtfs_filtrado$frequencies[trip_id == \"2105-10-0\"]\n\n     trip_id start_time end_time headway_secs start_time_secs end_time_secs\n1: 2105-10-0   07:00:00 07:59:00          900           25200         28740\n2: 2105-10-0   08:00:00 08:59:00         1200           28800         32340\n\ngtfs_filtrado$frequencies[, time_interval := end_time_secs - start_time_secs]\n\nEm seguida, calculamos o headway médio:\n\nheadway_medio &lt;- gtfs_filtrado$frequencies[,\n  .(headway_medio = weighted.mean(x = headway_secs, w = time_interval)),\n  by = trip_id\n]\n\nheadway_medio[trip_id == \"2105-10-0\"]\n\n     trip_id headway_medio\n1: 2105-10-0          1050\n\nhead(headway_medio)\n\n      trip_id headway_medio\n1: CPTM L07-0           360\n2: CPTM L07-1           360\n3: CPTM L08-0           300\n4: CPTM L08-1           300\n5: CPTM L09-0           240\n6: CPTM L09-1           240\n\n\nPrecisamos agora gerar a trajetória espacial de cada viagem e juntar essa informação à do headway médio. Para isso, vamos utilizar a função get_trip_geometry(), que, dado um objeto GTFS, gera a trajetória espacial de suas viagens. Essa função nos permite especificar as viagens cujas trajetórias queremos gerar, logo vamos calcular apenas as trajetórias daquelas que estão presentes na tabela de headways médios:\n\nviagens_selecionadas &lt;- headway_medio$trip_id\n\ntrajetorias &lt;- get_trip_geometry(\n  gtfs = gtfs_filtrado,\n  trip_id = viagens_selecionadas,\n  file = \"shapes\"\n)\n\nhead(trajetorias)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474\nGeodetic CRS:  WGS 84\n     trip_id origin_file                       geometry\n1 CPTM L07-0      shapes LINESTRING (-46.63535 -23.5...\n2 CPTM L07-1      shapes LINESTRING (-46.87255 -23.1...\n3 CPTM L08-0      shapes LINESTRING (-46.64073 -23.5...\n4 CPTM L08-1      shapes LINESTRING (-46.98404 -23.5...\n5 CPTM L09-0      shapes LINESTRING (-46.77604 -23.5...\n6 CPTM L09-1      shapes LINESTRING (-46.69711 -23.7...\n\n\nGeradas as trajetórias espaciais de cada viagem, precisamos juntá-las à informação de headway médio e, em seguida, configurar o nosso mapa como desejado. No exemplo a seguir, usamos cores e espessuras de linhas que variam de acordo com o headway de cada viagem:\n\ntraj_com_headways &lt;- merge(\n  trajetorias,\n  headway_medio,\n  by = \"trip_id\"\n)\n\n# configura figura\nggplot(traj_com_headways) +\n  geom_sf(aes(color = headway_medio, size = headway_medio), alpha = 0.8) +\n  scale_color_gradient(high = \"#132B43\", low = \"#56B1F7\") +\n  theme_minimal()\n\n\n\n\nFigura 5.5: Distribuição espacial dos headways no GTFS da SPTrans\n\n\n\n\nComo podemos ver, o pacote {gtfstools} torna o desenvolvimento de análises de feeds de transporte público algo fácil e que requer apenas o conhecimento básico de pacotes de manipulação de tabelas (como o {data.table} e o {dplyr}). O exemplo apresentado nesta seção mostra como muitas de suas funções podem ser usadas conjuntamente para revelar aspectos importantes de sistemas de transporte público descritos no formato GTFS."
  },
  {
    "objectID": "5_gtfstools.html#footnotes",
    "href": "5_gtfstools.html#footnotes",
    "title": "5  Manipulação e visualização de dados GTFS",
    "section": "",
    "text": "Mais detalhes sobre o uso e a sintaxe do {data.table} podem ser lidos em https://rdatatable.gitlab.io/data.table/index.html.↩︎\nPara informações de como checar a versão do Java instalado em seu computador e como instalar a versão correta, caso necessário, veja o Capítulo 3.↩︎\nMensagens informativas podem também ser listadas no arquivo validation_stdout.txt. As mensagens listadas no validation_stderr.txt e no validation_stdout.txt dependem da versão do validador utilizada.↩︎\nA lista completa de funções disponíveis pode ser conferida no site do pacote.↩︎"
  },
  {
    "objectID": "s4_avaliacao_impacto.html",
    "href": "s4_avaliacao_impacto.html",
    "title": "SEÇÃO 4: Avaliação de impacto de projetos de transporte",
    "section": "",
    "text": "O objetivo desta seção é apresentar o passo a passo de um exemplo de avaliação do impacto de um projeto de infraestrutura de transportes sobre as condições de acessibilidade urbana locais usando R.\nEmbora análises de acessibilidade sejam frequentemente utilizadas na literatura científica há mais de duas décadas, apenas recentemente agências de transporte e tomadores de decisão começaram a focar em questões de acessibilidade urbana nas suas atividades de planejamento e operação de sistemas de transporte público (Papa et al. 2015; Boisjoly e El-Geneidy 2017). Em grande medida, isso é resultado da dificuldade de incorporar análises de acessibilidade a métodos de avaliação de projetos e a atividades de planejamento do dia a dia (Silva et al. 2017; Büttner 2021).\nNesta seção, usamos o projeto de expansão do metrô de Fortaleza como estudo de caso para ilustrar como realizar uma avaliação de impacto de projetos de infraestrutura de transporte sobre a acessibilidade urbana em R utilizando os pacotes apresentados nos capítulos anteriores. O Capítulo 6 apresenta um método tanto para medir o impacto de investimentos de transporte sobre o nível médio de acessibilidade da população quanto para investigar como esse impacto se distribui espacialmente e entre grupos socioeconômicos, afetando as desigualdades de acesso a oportunidades. A aplicação do método envolve o uso e a manipulação de diferentes arquivos GTFS, o cálculo de matrizes de tempo de viagem, a tomada de decisão por trás da escolha de qual medida de acessibilidade utilizar, a estimativa dos níveis de acessibilidade, a visualização espacial desses níveis e o cálculo e a análise de indicadores de desigualdade. Assim, esse estudo de caso engloba muitos dos pontos abordados neste livro e serve como uma aplicação prática dos conceitos até então apresentados.\nÉ importante mencionar que uma avaliação de projeto, investimento ou política pública deve abranger um grande leque de critérios de diferentes naturezas. Esses critérios vão desde aspectos de participação social na formulação das políticas e projetos até os seus impactos, considerando dimensões ambientais, econômicas, sociais, entre outras. Embora uma avaliação de impacto de acessibilidade seja muito importante para a caracterização dos potenciais benefícios e do desempenho de uma rede de transportes como um todo, ela oferece uma perspectiva limitada dos efeitos de uma dada política. Avaliações desse tipo devem, portanto, complementar e ser acompanhadas de outras análises que investiguem os demais impactos dos projetos mais a fundo.\n\n\n\n\nBoisjoly, Geneviève, e Ahmed M. El-Geneidy. 2017. «How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans». Transport Policy 55 (abril): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nBüttner, Benjamin. 2021. «Accessibility Tools for Transport Policy and Planning». Em International Encyclopedia of Transportation, editado por Roger Vickerman, 83–86. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10618-9.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, e Angela Hull. 2015. «Accessibility Instruments for Planning Practice: A Review of European Experiences». Journal of Transport and Land Use, junho. https://doi.org/10.5198/jtlu.2015.585.\n\n\nSilva, Cecília, Luca Bertolini, Marco te Brömmelstroet, Dimitris Milakis, e Enrica Papa. 2017. «Accessibility Instruments in Planning Practice: Bridging the Implementation Gap». Transport Policy 53 (janeiro): 135–45. https://doi.org/10.1016/j.tranpol.2016.09.006."
  },
  {
    "objectID": "6_cenarios_transporte.html#apresentação-do-estudo-de-caso",
    "href": "6_cenarios_transporte.html#apresentação-do-estudo-de-caso",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.1 Apresentação do estudo de caso",
    "text": "6.1 Apresentação do estudo de caso\nComo estudo de caso, vamos fazer uma avaliação do projeto de construção da linha Leste do metrô de Fortaleza (Figura 6.1). O município de Fortaleza é a capital do estado do Ceará, localizado na região Nordeste do Brasil. Com uma população estimada de 2,7 milhões habitantes, Fortaleza é a quinta cidade mais populosa do país.\n\n\n\n\n\nFigura 6.1: Sistema de transporte urbano de média e alta capacidade de Fortaleza. Fonte: Braga et al. (2022).\n\n\n\n\nUm dos grandes investimentos recentes no sistema de transporte de Fortaleza é a linha Leste do metrô. O traçado da linha Leste possui 7,3 km de extensão e liga o centro da cidade ao bairro Papicu, permitindo a integração das linhas de metrô Sul e Oeste com corredores de Veículo Leve sobre Trilhos (VLT) e com o terminal de ônibus no Papicu (Figura 6.2). Como a linha Leste ainda se encontra em construção até o momento da publicação deste livro, a feita neste capítulo trata de uma avaliação ex-ante, ou seja, em que avaliamos o futuro impacto de um projeto sobre a acessibilidade urbana. Esse tipo de análise se contrapõe a avaliações ex-post, usadas para avaliar o impacto causado por projetos já implementados.\n\n\n\n\n\nFigura 6.2: Detalhamento da futura linha Leste do metrô. Fonte: Braga et al. (2022).\n\n\n\n\n\n\n\n\n\n\nÉ importante notar que a implementação deste projeto também será acompanhada de mudanças nas frequências das linhas Sul e Oeste do metrô e no corredor de VLT Parangaba-Mucuripe, além do racionamento do sistema de ônibus municipais, conforme o Plano de Acessibilidade Sustentável de Fortaleza (Pasfor)1. Para fins didáticos, no entanto, não incorporamos as mudanças relativas ao racionamento do sistema de ônibus aos cenários da nossa análise. Portanto, o estudo de caso que apresentamos aqui representa um cenário simplificado, que considera apenas a implementação da linha Leste e as mudanças nas frequências das demais linhas do metrô e do VLT2.\n\n\n\nComo mostra a Figura 6.3, a população de Fortaleza está majoritariamente distribuída na região central e na porção oeste da cidade, embora haja alguns pontos de alta densidade populacional no sudeste da cidade. Via de regra, a população de mais alta renda (em tons de azul no mapa da distribuição de decis de renda) está localizada na região do centro expandido e no sudeste do município, enquanto as populações de menor renda (em tons de vermelho) estão principalmente localizadas nas regiões periféricas ao sul e a oeste. Os empregos formais na cidade se distribuem principalmente ao longo de grandes avenidas, com maior concentração no centro da cidade. Em contraste, as escolas públicas de nível médio têm uma distribuição espacial mais equilibrada por todo o território.\n\n\n\n\n\nFigura 6.3: Distribuição sociodemográfica, de oportunidades de emprego e de educação e de corredores de transporte público em Fortaleza"
  },
  {
    "objectID": "6_cenarios_transporte.html#dados-gtfs-usados-na-análise",
    "href": "6_cenarios_transporte.html#dados-gtfs-usados-na-análise",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.2 Dados GTFS usados na análise",
    "text": "6.2 Dados GTFS usados na análise\nNesta análise, usaremos os arquivos GTFS disponibilizados pela ETUFOR e pela Metrofor. Esses dados descrevem o sistema de transporte público operante na cidade de Fortaleza em outubro de 2019. Para ter acesso a esses dados, usamos o código a seguir, que baixa os feeds usando o pacote {httr}:\n\n# cria o endereço de arquivos temporários\nend_metrofor &lt;- tempfile(\"metrofor\", fileext = \".zip\")\nend_etufor &lt;- tempfile(\"etufor\", fileext = \".zip\")\n\n# baixa dados da metrofor\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_metrofor_2021-01.zip\",\n  httr::write_disk(end_metrofor)\n)\n# baixa dados da etufor\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_etufor_2019-10.zip\",\n  httr::progress(),\n  httr::write_disk(end_etufor)\n)\n\nPara simularmos a implementação da nova linha Leste do metrô, precisamos também de um feed que descreva como deverá ser a sua operação. Este feed deve conter algumas informações-chave, como, por exemplo, o traçado da linha, a localização de suas estações, o tempo de viagem entre elas e a frequência planejada dos serviços. Neste exemplo, vamos utilizar o GTFS do projeto da linha Leste criado anteriormente por Braga et al. (2022). Assim como os feeds da Etufor e da Metrofor, este arquivo GTFS está disponível para download no repositório do livro no GitHub e pode ser baixado com o código a seguir:\n\n# cria o endereço do arquivo temporário\nend_linha_leste &lt;- tempfile(\"linha_leste\", fileext = \".zip\")\n\n# baixa o GTFS da Linha Leste\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_linha_leste.zip\",\n  httr::write_disk(end_linha_leste)\n)\n\nOs feeds da ETUFOR e da Metrofor não refletem as mudanças do sistema de transporte público previstas no Pasfor. Para levá-las em consideração no cenário pós-implementação, portanto, precisamos editar esses arquivos usando o pacote {gtfstools}.\nEm nosso cenário simplificado, vamos considerar as mudanças de frequência no metrô e no VLT relatadas em Braga et al. (2022), com base no Pasfor: i) aumento da frequência da linha Sul do metrô de quatro para dez viagens por hora; ii) aumento da frequência da linha Oeste do metrô de duas para cinco viagens por hora; e iii) aumento da frequência do VLT Parangaba-Mucuripe de duas para oito viagens por hora. Como estamos considerando apenas mudanças em linhas de metrô e VLT, vamos nos ater a edições no feed da Metrofor. Em primeiro lugar, precisamos ler esse arquivo com a função read_gtfs() e entender como as linhas estão descritas. Para isso, vamos olhar como as tabelas routes, trips e calendar estão estruturadas.\n\nlibrary(gtfstools)\n\ngtfs_metrofor &lt;- read_gtfs(end_metrofor)\n\ngtfs_metrofor$routes[, .(route_id, route_long_name)]\n\n   route_id      route_long_name\n1:        8 VLT Parangaba Papicu\n2:        6            Linha Sul\n3:        7          Linha Oeste\n\ngtfs_metrofor$trips[, .N, by = .(route_id, direction_id, service_id)]\n\n   route_id direction_id service_id  N\n1:        7            0          4 15\n2:        7            1          4 15\n3:        6            0          4 63\n4:        6            1          4 64\n5:        8            0          4 29\n6:        8            1          4 29\n\ngtfs_metrofor$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          4      1       1         1        1      1        1      0\n   start_date   end_date\n1: 2020-01-01 2021-12-31\n\n\nO feed descreve três linhas distintas: os dois corredores de metrô e o corredor de VLT. Como o feed não contém uma tabela frequencies, cada rota é descrita por diversas viagens, que partem em diferentes horários do dia. Essas viagens são divididas em viagens de ida e de volta e estão todas associadas a um mesmo serviço, que opera em dias úteis e no sábado.\nA estratégia que vamos usar para fazer as mudanças necessárias no feed é composta pelas seguintes etapas:\n\nFiltrar o feed de forma a manter apenas uma viagem por sentido para cada linha, que servirá para nos dizer o tempo que cada viagem leva entre as suas paradas.\nAdicionar uma tabela frequencies ao objeto GTFS, em que descreveremos a frequência de cada viagem.\n“Converter” os registros da recém-adicionada tabela frequencies para cronogramas descritos na tabela stop_times. Essa conversão servirá para manter a característica do feed original, que descreve as viagens usando apenas a stop_times.\n\nPara manter apenas uma viagem por sentido para cada linha, precisamos filtrar o feed usando a filter_by_trip_id(). Vamos usar a função para manter apenas o primeiro registro de viagem por linha e por sentido.\n\n# identifica a linha na tabela trips em que os primeiros registros por rota e\n# por sentido estão localizados\nindice &lt;- gtfs_metrofor$trips[, .I[1], by = .(route_id, direction_id)]$V1\n\n# seleciona o identificador de cada linha acima\nviagens_selecionadas &lt;- gtfs_metrofor$trips[indice]$trip_id\n\n# filtra o gtfs para manter apenas as viagens acima\ngtfs_filtrado &lt;- filter_by_trip_id(\n  gtfs_metrofor,\n  trip_id = viagens_selecionadas\n)\n\ngtfs_filtrado$trips\n\n   trip_id     trip_headsign direction_id block_id shape_id service_id route_id\n1:       4           Caucaia            0                            4        7\n2:      19      Moura Brasil            1                            4        7\n3:      34 Carlito Benevides            0                            4        6\n4:      96    Chico da Silva            1                            4        6\n5:     159              Iate            0                            4        8\n6:     181         Parangaba            1                            4        8\n\n\nA fim de facilitar nossa edição, vamos mudar o id das viagens, identificando o corredor e o sentido em que elas operam. Essa mudança precisa ser feita tanto na tabela trips quanto na stop_times.\n\ngtfs_filtrado$stop_times[\n  ,\n  trip_id := data.table::fcase(\n    trip_id == \"4\", \"metro_oeste_0\",\n    trip_id == \"19\", \"metro_oeste_1\",\n    trip_id == \"34\", \"metro_sul_0\",\n    trip_id == \"96\", \"metro_sul_1\",\n    trip_id == \"159\", \"vlt_0\",\n    trip_id == \"181\", \"vlt_1\"\n  )\n]\n\ngtfs_filtrado$trips[\n  ,\n  trip_id := data.table::fcase(\n    trip_id == \"4\", \"metro_oeste_0\",\n    trip_id == \"19\", \"metro_oeste_1\",\n    trip_id == \"34\", \"metro_sul_0\",\n    trip_id == \"96\", \"metro_sul_1\",\n    trip_id == \"159\", \"vlt_0\",\n    trip_id == \"181\", \"vlt_1\"\n  )\n]\n\ngtfs_filtrado$trips\n\n         trip_id     trip_headsign direction_id block_id shape_id service_id\n1: metro_oeste_0           Caucaia            0                            4\n2: metro_oeste_1      Moura Brasil            1                            4\n3:   metro_sul_0 Carlito Benevides            0                            4\n4:   metro_sul_1    Chico da Silva            1                            4\n5:         vlt_0              Iate            0                            4\n6:         vlt_1         Parangaba            1                            4\n   route_id\n1:        7\n2:        7\n3:        6\n4:        6\n5:        8\n6:        8\n\n\nPrecisamos agora adicionar uma tabela frequencies que descreva a frequência de cada viagem. A especificação requer, no entanto, que listemos o headway de cada linha, e não a sua frequência. Como o headway é o inverso da frequência, precisamos dividir o intervalo de uma hora (3600 segundos) pela frequência de cada linha (10 viagens/hora para a linha Sul, 5 viagens/hora para a linha Oeste e 8 viagens/hora para o VLT). Como resultado, temos que os headways da linha Sul, da linha Oeste e do VLT passarão a ser, respectivamente, 360, 720 e 450 segundos. Com o código abaixo, criamos uma tabela frequencies com os pacotes {tibble} e {data.table}.\n\nfrequencias &lt;- tibble::tribble(\n  ~trip_id,        ~start_time, ~end_time,  ~headway_secs, ~exact_times,\n  \"metro_oeste_0\", \"06:00:00\",  \"09:00:00\", 720L,            1,\n  \"metro_oeste_1\", \"06:00:00\",  \"09:00:00\", 720L,            1,\n  \"metro_sul_0\",   \"06:00:00\",  \"09:00:00\", 360L,            1,\n  \"metro_sul_1\",   \"06:00:00\",  \"09:00:00\", 360L,            1,\n  \"vlt_0\",             \"06:00:00\",  \"09:00:00\", 450L,            1,\n  \"vlt_1\",             \"06:00:00\",  \"09:00:00\", 450L,            1\n)\n\n# converte tabela para data.table\ndata.table::setDT(frequencias)\n\n# cria tabela frequencies no objeto gtfs com base na tabela acima\ngtfs_filtrado$frequencies &lt;- frequencias\n\nA fim de simplificar este estudo de caso, assumimos que os headways listados são válidos no período entre 6h e 9h. Essa premissa é válida no nosso caso, pois iremos calcular as matrizes de tempo de viagem apenas durante o pico da manhã. No entanto, caso desejássemos calcular os tempos de viagens em outros períodos do dia, ou mesmo utilizar este GTFS na operação do dia a dia desses corredores, precisaríamos listar os headways para os demais períodos do dia, como o fora-pico, a madrugada etc. O valor 1 da coluna exact_times estabelece que o cronograma das viagens durante o período especificado deve seguir o headway à risca, e não de forma aproximada3.\nO objeto GTFS que resulta das modificações feitas até aqui já pode perfeitamente ser utilizado para o cálculo de matrizes de tempo de viagem. Buscando retomar a característica inicial do feed de não possuir uma tabela frequencies, no entanto, vamos “converter” os registros dessa tabela em cronogramas descritos na tabela stop_times. Para isso, usamos a função frequencies_to_stop_times(). Como todas as viagens do feed são convertidas, a tabela frequencies é removida do objeto.\n\ngtfs_filtrado &lt;- frequencies_to_stop_times(gtfs_filtrado)\n\ngtfs_filtrado$frequencies\n\nNULL\n\n\nPara verificar se a operação deu certo, vamos olhar para as viagens da linha Oeste no sentido Caucaia (cujo direction_id é 0). Como essa linha deve ter uma frequência de 5 viagens/hora entre 6h e 9h, a tabela trips deve conter exatamente 16 viagens relacionadas a ela (5 viagens/hora durante 3 horas, mais uma viagem começando às 9h).\n\n# seleciona apenas as viagens da linha oeste do metrô\nmetro_linha_oeste &lt;- gtfs_filtrado$trips[grepl(\"metro_oeste_0\", trip_id)]\n\n# checa número de viagens\nnrow(metro_linha_oeste)\n\n[1] 16\n\n# checa identificador de cada viagem\nmetro_linha_oeste$trip_id\n\n [1] \"metro_oeste_0_1\"  \"metro_oeste_0_2\"  \"metro_oeste_0_3\"  \"metro_oeste_0_4\" \n [5] \"metro_oeste_0_5\"  \"metro_oeste_0_6\"  \"metro_oeste_0_7\"  \"metro_oeste_0_8\" \n [9] \"metro_oeste_0_9\"  \"metro_oeste_0_10\" \"metro_oeste_0_11\" \"metro_oeste_0_12\"\n[13] \"metro_oeste_0_13\" \"metro_oeste_0_14\" \"metro_oeste_0_15\" \"metro_oeste_0_16\"\n\n\nA tabela stop_times, por sua vez, deve listar essas viagens partindo a cada 12 minutos (o equivalente a um headway de 450 segundos). Vamos verificar, portanto, o primeiro registro do cronograma de cada uma das viagens listadas anteriormente.\n\nviagens_metro_oeste &lt;- metro_linha_oeste$trip_id\n\n# identifica a linha na tabela stop_times em que estão os primeiros registros de\n# cada uma das viagens acima\nindice_viagens &lt;- gtfs_filtrado$stop_times[\n  trip_id %in% viagens_metro_oeste,\n  .I[1],\n  by = trip_id\n]$V1\n\ngtfs_filtrado$stop_times[indice_viagens, .(trip_id, departure_time)]\n\n             trip_id departure_time\n 1:  metro_oeste_0_1       06:00:00\n 2:  metro_oeste_0_2       06:12:00\n 3:  metro_oeste_0_3       06:24:00\n 4:  metro_oeste_0_4       06:36:00\n 5:  metro_oeste_0_5       06:48:00\n 6:  metro_oeste_0_6       07:00:00\n 7:  metro_oeste_0_7       07:12:00\n 8:  metro_oeste_0_8       07:24:00\n 9:  metro_oeste_0_9       07:36:00\n10: metro_oeste_0_10       07:48:00\n11: metro_oeste_0_11       08:00:00\n12: metro_oeste_0_12       08:12:00\n13: metro_oeste_0_13       08:24:00\n14: metro_oeste_0_14       08:36:00\n15: metro_oeste_0_15       08:48:00\n16: metro_oeste_0_16       09:00:00\n\n\nA operação de “conversão” da tabela frequencies para a stop_times, portanto, funcionou corretamente, e podemos utilizar o nosso feed modificado no cálculo da matriz de tempo de viagem. Para isso, no entanto, precisamos salvar o objeto GTFS na memória em formato .zip, assim como estão salvos os demais dados GTFS que serão utilizados no estudo de caso. Para isso, usamos a função write_gtfs().\n\nend_metrofor_modificado &lt;- tempfile(\"metrofor_modificado\", fileext = \".zip\")\n\nwrite_gtfs(gtfs_filtrado, end_metrofor_modificado)\n\nTemos, agora, quatro arquivos de GTFS distintos:\n\nO feed da ETUFOR, que descreve o sistema de ônibus que operava em outubro de 2019;\nO feed da Metrofor, que descreve a operação em outubro de 2019 das linhas Sul e Oeste do metrô e do VLT Parangaba-Mucuripe;\nO feed modificado da Metrofor, que descreve a futura operação das linhas Sul e Oeste do metrô e do VLT Parangaba-Mucuripe como previsto no Pasfor; e\nO feed da linha Leste, que descreve a futura operação dessa linha.\n\nEsses quatro arquivos GTFS serão usados em conjunto para calcular as condições de acessibilidade de Fortaleza antes e depois da implementação da linha Leste. No cenário pré-linha Leste, vamos calcular as matrizes de tempo de viagem com base apenas nos feeds de outubro de 2019 da Metrofor e da ETUFOR, que representam a típica operação de transporte público da cidade antes da implementação do novo corredor. No cenário pós-implementação, consideraremos o feed da ETUFOR, o feed modificado da Metrofor, com as frequências do metrô e do VLT alteradas, e o GTFS da linha Leste, incorporando à análise a operação planejada dessa linha após sua finalização."
  },
  {
    "objectID": "6_cenarios_transporte.html#cálculo-das-matrizes-de-tempo-de-viagem",
    "href": "6_cenarios_transporte.html#cálculo-das-matrizes-de-tempo-de-viagem",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.3 Cálculo das matrizes de tempo de viagem",
    "text": "6.3 Cálculo das matrizes de tempo de viagem\nFeitas as edições necessárias ao GTFS da Metrofor e definidos os dados GTFS que vamos usar em cada um dos cenários de transporte público, o próximo passo é calcular as matrizes de tempo de viagem, que posteriormente serão utilizadas para estimar os níveis de acessibilidade. Para isso, vamos utilizar a função travel_time_matrix() do pacote {r5r}, como apresentado anteriormente no Capítulo 3..\nAntes de calcular as matrizes, no entanto, precisamos organizar os nossos arquivos na estrutura que o {r5r} requer. Com o código a seguir, criamos uma pasta separada para cada um dos nossos cenários (antes e depois) e salvamos nelas os dados necessários para o roteamento:\n\n# cria pasta raiz da análise de dados\npasta_analise &lt;- \"analise_de_impacto\"\ndir.create(pasta_analise)\n\n# cria pasta dos cenários\npasta_antes &lt;- file.path(pasta_analise, \"antes\")\npasta_depois &lt;- file.path(pasta_analise, \"depois\")\n\ndir.create(pasta_antes)\ndir.create(pasta_depois)\n\n# copia os arquivos para pasta do cenário \"antes\"\nfile.copy(from = end_etufor, to = file.path(pasta_antes, \"etufor.zip\"))\nfile.copy(from = end_metrofor, to = file.path(pasta_antes, \"metrofor.zip\"))\n\n# copia os arquivos para pasta do cenário \"depois\"\nfile.copy(from = end_etufor, to = file.path(pasta_depois, \"etufor.zip\"))\nfile.copy(\n  from = end_metrofor_modificado,\n  to = file.path(pasta_depois, \"metrofor_modificado.zip\")\n)\nfile.copy(\n  from = end_linha_leste,\n  to = file.path(pasta_depois, \"linha_leste.zip\")\n)\n\n# visualiza esquema de arquivos na pasta\nfs::dir_tree(pasta_analise)\n\n\n\nanalise_de_impacto\n├── antes\n│   ├── etufor.zip\n│   └── metrofor.zip\n└── depois\n    ├── etufor.zip\n    ├── linha_leste.zip\n    └── metrofor_modificado.zip\n\n\nPara estimarmos o tempo de viagem na nossa área de estudo, precisamos ainda de um arquivo com os dados do OSM representando a rede viária local, em formato .pbf. Opcionalmente, iremos utilizar também um arquivo representando a topografia local, em formato .tif. Esses arquivos, assim como os dados GTFS, estão disponíveis para download no repositório do livro. Partindo do pressuposto de que a implementação da linha Leste não vai afetar o traçado das ruas e calçadas na região, bem como a topografia local, podemos usar os mesmos arquivos para o cálculo das duas matrizes de tempo de viagem. Com o código apresentado a seguir, baixamos esses dados e copiamos os arquivos para as pastas dos dois cenários de transporte:\n\n# cria endereço temporário dos arquivos na máquina local\nend_pbf &lt;- tempfile(\"rede_viaria\", fileext = \".osm.pbf\")\nend_tif &lt;- tempfile(\"topografia\", fileext = \".tif\")\n\n# download dos dados de OSM\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/fortaleza.osm.pbf\",\n  httr::write_disk(end_pbf)\n)\n# download dos dados de topografia\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/topografia3_for.tif\",\n  httr::write_disk(end_tif)\n)\n# copia arquivo para as pastas dos cenários antes e depois\nfile.copy(from = end_pbf, to = file.path(pasta_antes, \"rede_viaria.osm.pbf\"))\nfile.copy(from = end_pbf, to = file.path(pasta_depois, \"rede_viaria.osm.pbf\"))\n\nfile.copy(from = end_tif, to = file.path(pasta_antes, \"topografia.tif\"))\nfile.copy(from = end_tif, to = file.path(pasta_depois, \"topografia.tif\"))\n\n\nfs::dir_tree(pasta_analise)\n\nanalise_de_impacto\n├── antes\n│   ├── etufor.zip\n│   ├── metrofor.zip\n│   ├── rede_viaria.osm.pbf\n│   └── topografia.tif\n└── depois\n    ├── etufor.zip\n    ├── linha_leste.zip\n    ├── metrofor_modificado.zip\n    ├── rede_viaria.osm.pbf\n    └── topografia.tif\n\n\nCom os dados organizados nas pastas, podemos começar o cálculo das matrizes de tempo de viagem. A primeira etapa é construir a rede de transporte multimodal usada pelo {r5r} no roteamento a partir dos dados da rede viária, do sistema de transporte público e de topografia. Isso é feito com o comando setup_r5(), que também retorna uma conexão com o R5. Com o código abaixo, criamos duas redes, uma para cada cenário:\n\n# aloca a memória disponível para o Java\noptions(java.parameters = \"-Xmx4G\")\n\n# carrega a biblioteca\nlibrary(r5r)\n\n# cria a rede de transporte multimodal de cada cenário\ncon_r5r_antes &lt;- setup_r5(pasta_antes, verbose = FALSE)\ncon_r5r_depois &lt;- setup_r5(pasta_depois, verbose = FALSE)\n\nCriadas as redes de transporte de cada cenário, prosseguimos para o cálculo das matrizes de tempo de viagem. Nesta etapa, vamos utilizar como origens e destinos os centroides de uma grade espacial de hexágonos de Fortaleza, disponibilizada pelo pacote {aopdata}4. Cada hexágono tem uma área de 0,11 km², aproximadamente um quarteirão, o que permite uma análise espacial bem detalhada.\nPara comparar adequadamente os dois cenários, precisamos calcular as duas matrizes considerando os mesmos parâmetros de viagem. Aqui, vamos considerar viagens a pé ou por transporte público, permitir distâncias de caminhada de no máximo 800 metros nas pernas de acesso e egresso das paradas de transporte público e limitar o tempo máximo de viagem em até 60 minutos. Vamos considerar o horário de partida de 7h, durante o horário de pico de uma típica segunda-feira de operação:\n\n# baixa os dados da grade espacial\ngrade_fortaleza &lt;- aopdata::read_grid(city = \"Fortaleza\")\n\n# calcula os centróides das células da grade\npontos &lt;- sf::st_centroid(grade_fortaleza)\n\n# renomeia o nome da coluna com o id das células\nnames(pontos)[1] &lt;- \"id\"\n\n# calcula a matriz de tempo de viagem do cenário \"antes\"\nmatriz_antes &lt;- travel_time_matrix(\n  con_r5r_antes,\n  origins = pontos,\n  destinations = pontos,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"02-03-2020 07:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 60,\n  verbose = FALSE,\n  progress = FALSE\n)\n\n# calcula a matriz de tempo de viagem do cenário \"depois\"\nmatriz_depois &lt;- travel_time_matrix(\n  con_r5r_depois,\n  origins = pontos,\n  destinations = pontos,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"02-03-2020 07:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 60,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(matriz_antes)\n\n           from_id           to_id travel_time_p50\n1: 89801040323ffff 89801040323ffff               2\n2: 89801040323ffff 89801040327ffff              22\n3: 89801040323ffff 8980104032bffff              23\n4: 89801040323ffff 8980104032fffff              15\n5: 89801040323ffff 89801040333ffff              10\n6: 89801040323ffff 89801040337ffff              19\n\nhead(matriz_depois)\n\n           from_id           to_id travel_time_p50\n1: 89801040323ffff 89801040323ffff               2\n2: 89801040323ffff 89801040327ffff              22\n3: 89801040323ffff 8980104032bffff              23\n4: 89801040323ffff 8980104032fffff              15\n5: 89801040323ffff 89801040333ffff              10\n6: 89801040323ffff 89801040337ffff              19\n\n\nÀ primeira vista, nossas matrizes parecem iguais: todos os tempos de viagem na amostra de pares mostrados anteriormente são idênticos. Isso ocorre porque o projeto de expansão do metrô fica restrito a uma área relativamente pequena, no centro da cidade de Fortaleza, e as mudanças nas frequências do VLT e das linhas Sul e Oeste do metrô afetam principalmente as imediações desses corredores. Assim, muitos deslocamentos entre regiões da cidade de fato não são afetados pela implementação do corredor e das mudanças de frequência. Diversos pares origem-destino, no entanto, têm os tempos de viagem entre eles impactados:\n\n# une os tempos de viagem dos dois cenários\ncomparacao &lt;- merge(\n  matriz_antes,\n  matriz_depois,\n  by = c(\"from_id\", \"to_id\"),\n  suffixes = c(\"_antes\", \"_depois\")\n)\n\n# mostra apenas os pares OD que cujo tempo que os distanciam diminuiu\ncomparacao[travel_time_p50_antes &lt; travel_time_p50_depois]\n\n               from_id           to_id travel_time_p50_antes\n    1: 8980104096fffff 8980104e803ffff                    48\n    2: 8980104096fffff 8980104e807ffff                    57\n    3: 8980104096fffff 8980104e80bffff                    53\n    4: 8980104096fffff 8980104e80fffff                    55\n    5: 8980104096fffff 8980104e863ffff                    56\n   ---                                                      \n12890: 8980104eecbffff 8980104ea5bffff                    52\n12891: 8980104eecbffff 8980104eac3ffff                    49\n12892: 8980104eecbffff 8980104ead3ffff                    44\n12893: 8980104eecbffff 8980104eadbffff                    49\n12894: 8980104eecbffff 8980104ee6bffff                    41\n       travel_time_p50_depois\n    1:                     50\n    2:                     59\n    3:                     55\n    4:                     57\n    5:                     57\n   ---                       \n12890:                     57\n12891:                     53\n12892:                     47\n12893:                     50\n12894:                     42"
  },
  {
    "objectID": "6_cenarios_transporte.html#cálculo-da-acessibilidade-nos-cenários-antes-e-depois",
    "href": "6_cenarios_transporte.html#cálculo-da-acessibilidade-nos-cenários-antes-e-depois",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.4 Cálculo da acessibilidade nos cenários antes e depois",
    "text": "6.4 Cálculo da acessibilidade nos cenários antes e depois\nO cálculo dos níveis de acessibilidade nos dois cenários é muito simples, exigindo apenas um processamento básico dos dados e a aplicação de uma das funções de cálculo de acessibilidade do pacote {accessibility}. Para facilitar o tratamento dos dados, vamos empilhar as matrizes de tempo de viagem dos dois cenários em uma única tabela, identificando cada cenário com a coluna cenario:\n\n# combina as matrizes de tempo de viagem dos cenários antes e depois\nmatriz &lt;- rbind(matriz_antes, matriz_depois, idcol = \"cenario\")\nmatriz[, cenario := factor(cenario, labels = c(\"antes\", \"depois\"))]\n\nmatriz\n\n         cenario         from_id           to_id travel_time_p50\n      1:   antes 89801040323ffff 89801040323ffff               2\n      2:   antes 89801040323ffff 89801040327ffff              22\n      3:   antes 89801040323ffff 8980104032bffff              23\n      4:   antes 89801040323ffff 8980104032fffff              15\n      5:   antes 89801040323ffff 89801040333ffff              10\n     ---                                                        \n3739271:  depois 8980107b6dbffff 8980107b6cbffff               9\n3739272:  depois 8980107b6dbffff 8980107b6cfffff              15\n3739273:  depois 8980107b6dbffff 8980107b6d3ffff               9\n3739274:  depois 8980107b6dbffff 8980107b6d7ffff              15\n3739275:  depois 8980107b6dbffff 8980107b6dbffff               0\n\n\nPara calcular os níveis de acessibilidade, precisamos de uma tabela com os dados de uso do solo da cidade de Fortaleza. Podemos baixar uma tabela com esses dados usando a função read_landuse() do pacote {aopdata}, que traz dados de contagem populacional e de oportunidades em cada um dos hexágonos que compõem a grade espacial baixada anteriormente.\n\n# baixa dados de uso do solo em fortaleza\ndados_fortaleza &lt;- aopdata::read_landuse(\n  city = \"Fortaleza\",\n  showProgress = FALSE\n)\n\nPara demonstrar, vamos calcular a acessibilidade a postos de trabalho e a escolas públicas de ensino médio na nossa área de estudo. Os dados do total de empregos e de escolas públicas de nível médio em cada hexágono estão listados nas colunas T001 e E004, respectivamente. Vamos renomeá-las para facilitar sua identificação e manter apenas as colunas necessárias na tabela de dados de uso do solo. Vamos manter também as colunas P001, de população total em cada hexágono, e R003, do decil de renda em que cada hexágono se encontra, que serão úteis mais à frente:\n\n# renomeia colunas\ncolunas_mantidas &lt;- c(\"id\", \"empregos\", \"escolas\", \"populacao\", \"decil\")\ndata.table::setnames(\n  dados_fortaleza,\n  old = c(\"id_hex\", \"T001\", \"E004\", \"P001\", \"R003\"),\n  new = colunas_mantidas\n)\n\n# deleta as demais colunas que não serão usadas\ndados_fortaleza[, setdiff(names(dados_fortaleza), colunas_mantidas) := NULL]\n\ndados_fortaleza\n\n                   id populacao decil empregos escolas\n   1: 89801040323ffff        30     1        0       0\n   2: 89801040327ffff       318     1        7       0\n   3: 8980104032bffff         0    NA        0       0\n   4: 8980104032fffff       103     1       98       0\n   5: 89801040333ffff        43     1        0       0\n  ---                                                 \n2558: 8980107b6cbffff      2575     4      124       0\n2559: 8980107b6cfffff      2997     3        4       0\n2560: 8980107b6d3ffff      1751     8       14       0\n2561: 8980107b6d7ffff      2032     4      134       0\n2562: 8980107b6dbffff      1896     9      193       0\n\n\nUma decisão-chave no cálculo de acessibilidade é a escolha da medida a ser utilizada. É extremamente importante pesar as vantagens e desvantagens de cada medida e compreender quais indicadores se adequam às oportunidades para as quais desejamos calcular os níveis de acessibilidade. Neste exemplo, utilizaremos duas medidas distintas:\n\nNo cálculo da acessibilidade a empregos, vamos usar a medida de oportunidades cumulativas. Essa métrica nos permite entender quantos empregos são acessíveis dentro de um determinado custo de viagem. Apesar das suas limitações discutidas no Capítulo 2, este é um dos indicadores mais amplamente utilizados. Isso se deve, em grande medida, à facilidade de comunicar e interpretar os resultados desse indicador. Nesse exemplo, vamos estabelecer como limite de custo um tempo de viagem de 60 minutos, valor muito próximo do tempo médio de deslocamento casa-trabalho por transporte público de Fortaleza em 2019 (cerca de 58 minutos, segundo o Pasfor).\nNo cálculo da acessibilidade a escolas públicas, vamos usar a medida de custo mínimo de viagem. Essa métrica é especialmente útil para avaliar a cobertura de serviços públicos essenciais, como educação e saúde básica. Com ela, podemos, por exemplo, identificar as parcelas da população que estão a uma distância maior do que a considerada razoável para acessar esses serviços essenciais.\n\nComo mostrado anteriormente no Capítulo 3, o cálculo dessas medidas pode ser feito com as funções cumulative_cutoff() e cost_to_closest(), respectivamente, do pacote {accessibility}:\n\n# carrega a biblioteca\nlibrary(accessibility)\n\n# calcula a medida de oportunidades cumulativas\nacesso_a_empregos &lt;- cumulative_cutoff(\n  matriz,\n  land_use_data = dados_fortaleza,\n  opportunity = \"empregos\",\n  travel_cost = \"travel_time_p50\",\n  cutoff = 60,\n  group_by = \"cenario\"\n)\n\nacesso_a_empregos\n\n                   id cenario empregos\n   1: 89801040323ffff   antes    48271\n   2: 89801040327ffff   antes    26918\n   3: 8980104032bffff   antes    48271\n   4: 8980104032fffff   antes    69550\n   5: 89801040333ffff   antes    26918\n  ---                                 \n5120: 8980107b6cbffff  depois   379488\n5121: 8980107b6cfffff  depois   285899\n5122: 8980107b6d3ffff  depois   347678\n5123: 8980107b6d7ffff  depois   359536\n5124: 8980107b6dbffff  depois   373652\n\n# calcula a medida de tempo mínimo de viagem\ntempo_a_escolas &lt;- cost_to_closest(\n  matriz,\n  land_use_data = dados_fortaleza,\n  opportunity = \"escolas\",\n  travel_cost = \"travel_time_p50\",\n  group_by = \"cenario\"\n)\n\ntempo_a_escolas\n\n                   id cenario travel_time_p50\n   1: 89801040323ffff   antes              28\n   2: 89801040323ffff  depois              28\n   3: 89801040327ffff   antes              37\n   4: 89801040327ffff  depois              37\n   5: 8980104032bffff   antes              28\n  ---                                        \n5120: 8980107b6d3ffff  depois              18\n5121: 8980107b6d7ffff   antes              14\n5122: 8980107b6d7ffff  depois              14\n5123: 8980107b6dbffff   antes              15\n5124: 8980107b6dbffff  depois              15\n\n\nO resultado da função de custo mínimo de viagem inclui alguns valores Inf (abreviação de infinito). Esse valor é utilizado para sinalizar origens que não conseguem alcançar nenhuma oportunidade, dadas as viagens que compõem a matriz. Em nosso caso, isso significa que as origens listadas com esse valor não conseguem alcançar nenhuma escola pública de nível médio dentro de 60 minutos (limite de tempo de viagem imposto no cálculo da matriz). Para simplificar os cálculos daqui em diante, vamos considerar que essas regiões estão a 80 minutos de viagem de sua escola mais próxima:\n\n# substitui valores Inf por tempos de viagem de 80 minutos\ntempo_a_escolas[\n  ,\n  travel_time_p50 := ifelse(is.infinite(travel_time_p50), 80, travel_time_p50)\n]\n\nFeito isso, podemos calcular a diferença dos níveis de acessibilidade entre os dois cenários. Esta informação é útil para comunicar de forma mais direta o efeito da implementação da linha Leste e das mudanças de frequência dos outros corredores sobre as condições de acessibilidade na cidade. Para isso, usamos o código adiante:\n\nacesso_a_empregos[\n  ,\n  diferenca := data.table::shift(empregos, type = \"lead\") - empregos,\n  by = id\n]\n\ntempo_a_escolas[\n  ,\n  diferenca := data.table::shift(travel_time_p50, type = \"lead\") -\n    travel_time_p50,\n  by = id\n]"
  },
  {
    "objectID": "6_cenarios_transporte.html#análise-dos-níveis-de-acessibilidade-antes-e-depois",
    "href": "6_cenarios_transporte.html#análise-dos-níveis-de-acessibilidade-antes-e-depois",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.5 Análise dos níveis de acessibilidade antes e depois",
    "text": "6.5 Análise dos níveis de acessibilidade antes e depois\nAgora que calculamos os níveis de acessibilidade em cada cenário e a diferença entre eles, nós conseguimos analisar como a futura implementação da linha Leste em conjunto com o aumento da frequência das linhas de metrô e VLT deverão impactar as condições de acessibilidade em nossa área de estudo. Como primeira análise exploratória, podemos investigar o impacto dessas mudanças sobre a acessibilidade média da cidade. Olhando primeiro para a acessibilidade a oportunidades de emprego, vamos calcular a quantidade média de empregos acessíveis em cada cenário. Aqui, é importante calcular a média de acessibilidade ponderada pela população de cada célula da grade espacial que estamos usando, visto que células com maiores populações contribuem mais para o nível médio da população como um todo do que células com poucas pessoas.\n\n# carrega bibliotecas de visualização de dados\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# une tabela de acessibilidade com informações de pessoas residentes e renda em\n# renda nos hexágonos\nacesso_a_empregos &lt;- merge(\n  acesso_a_empregos,\n  dados_fortaleza,\n  by = \"id\"\n)\n\n# renomeia colunas com nomes ambíguos pós-união\ndata.table::setnames(\n  acesso_a_empregos,\n  old = c(\"empregos.x\", \"empregos.y\"),\n  new = c(\"acesso_a_empregos\", \"empregos_no_hexagono\")\n)\n\n# calcula a média ponderada de acessibilidade em cada cenário\nacesso_medio &lt;- acesso_a_empregos[\n  ,\n  .(acesso  = weighted.mean(acesso_a_empregos, w = as.numeric(populacao))),\n  by = cenario\n]\n\nggplot(data = acesso_medio, aes(x = cenario, y = acesso / 1000)) +\n  geom_col(fill = \"#0f3c53\") +\n  geom_text(\n    aes(label = round(acesso / 1000, digits = 1)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Empregos acessíveis\\n(em milhares)\") +\n  theme_minimal()\n\n\n\n\nFigura 6.4: Média de acessibilidade ao emprego em Fortaleza por cenário de transporte\n\n\n\n\nOs resultados mostram que a população de Fortaleza conseguia acessar em média 244.137 empregos em até 60 minutos de viagem por transporte público antes da expansão do metrô, em 2019. A implementação da linha Leste e os aumentos nas frequências do metrô e do VLT aumentam esse valor em 5,3%, para 257.177 empregos em média.\nAnalisando o tempo médio de acesso à escola pública de ensino médio mais próxima, notamos que as mudanças no sistema de transportes pouco alteram a acessibilidade a essas escolas. Em média, a população de Fortaleza demorava cerca de 12 minutos e meio para chegar à escola pública de ensino médio mais próxima de sua casa em 2019. Após a conclusão da extensão do metrô e do aumento da frequência das linhas de metrô e VLT, esse resultado permanece praticamente inalterado.\n\n# une tabela de tempo a escolas com informações de pessoas residentes nos\n# hexágonos\ntempo_a_escolas &lt;- merge(\n  tempo_a_escolas,\n  dados_fortaleza,\n  by = \"id\"\n)\n\n# calcula a média ponderada de acessibilidade em cada cenário\ntempo_medio &lt;- tempo_a_escolas[\n  ,\n  .(tempo  = weighted.mean(travel_time_p50, w = as.numeric(populacao))),\n  by = cenario\n]\n\nggplot(data = tempo_medio, aes(x = cenario, y = tempo)) +\n  geom_col(fill = \"#0d6556\") +\n  geom_text(\n    aes(label = round(tempo, digits = 2)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Média do tempo até a escola\\nmais próxima (em minutos)\") +\n  theme_minimal()\n\n\n\n\nFigura 6.5: Média do tempo até a escola pública de nível médio mais próxima em Fortaleza por cenário de transporte\n\n\n\n\nEm síntese, os resultados mostram que o plano de construção da Linha Leste do metrô e de ajuste das frequências de outros corredores de transporte público da cidade deverão afetar mais significativamente a acessibilidade a oportunidades de emprego do que a acessibilidade a escolas públicas de nível médio. Isso se explica principalmente pela distribuição espacial desses dois tipos de oportunidade na cidade de Fortaleza: enquanto os empregos se distribuem de forma muito mais concentrada no centro da cidade, as escolas estão muito mais bem distribuídas em todo o território. As mudanças no sistema de transporte público, portanto, devem facilitar o acesso de moradores de regiões mais afastadas aos empregos localizados no centro. Por outro lado, a distribuição mais equitativa de escolas públicas resulta em condições relativamente boas de acesso a esses locais mesmo antes das mudanças na rede de transporte, explicando por que tais mudanças deverão ter impacto tão pequeno no tempo médio de acesso a escolas.\nEsses resultados podem ser melhor compreendidos quando observamos a sua distribuição espacial. Antes de fazer isso, no entanto, vamos criar um objeto espacial que descreve o traçado dos corredores de transporte da cidade - o que torna ainda mais evidente o impacto das mudanças no sistema de transportes sobre os níveis de acessibilidade.\n\n# lê arquivos gtfs necessários para gerar as geometrias de cada corredor\ngtfs_metrofor &lt;- read_gtfs(end_metrofor)\ngtfs_linha_leste &lt;- read_gtfs(end_linha_leste)\n\n# gtfs da metrofor não contém tabela shapes, logo vamos criar a geometria\n# a partir das tabelas stops e stop_times com a função get_trip_geometry()\nviagens_corredores &lt;- c(\"4\", \"34\", \"159\")\n\n# a sequência de paradas de uma das viagens não está ordenada corretamente,\n# então precisamos ordená-las manualmente\ngtfs_metrofor$stop_times &lt;- gtfs_metrofor$stop_times[\n  order(trip_id, stop_sequence)\n]\ntraj_metrofor &lt;- gtfstools::get_trip_geometry(\n  gtfs_metrofor,\n  trip_id = viagens_corredores\n)\n\n# converte o trajeto em um dos sentidos da linha leste em geometria espacial\ntraj_linha_leste &lt;- gtfstools::convert_shapes_to_sf(\n  gtfs_linha_leste,\n  shape_id = \"LL_0\"\n)\n\n# nomeia cada uma das linhas e une as tabelas\ntraj_linha_leste$corredor &lt;- \"Linha Leste\"\ntraj_metrofor$corredor &lt;- data.table::fcase(\n  traj_metrofor$trip_id == 4, \"Linha Oeste\",\n  traj_metrofor$trip_id == 34, \"Linha Sul\",\n  traj_metrofor$trip_id == 159, \"VLT\"\n)\n\ntraj_metrofor$origin_file &lt;- NULL\ntraj_metrofor$trip_id &lt;- NULL\ntraj_linha_leste$shape_id &lt;- NULL\n\ntraj_corredores &lt;- rbind(traj_metrofor, traj_linha_leste)\n\n# duplica a tabela, adiciona coluna identificando cada cenário e remove a linha\n# leste do cenário pré-implementação das mudanças\ntraj_corredores &lt;- rbind(traj_corredores, traj_corredores)\ntraj_corredores$cenario &lt;- rep(c(\"antes\", \"depois\"), each = 4)\ntraj_corredores &lt;- subset(\n  traj_corredores,\n  corredor != \"Linha Leste\" | cenario != \"antes\"\n)\n\nggplot() +\n  geom_sf(data = grade_fortaleza, fill = \"gray90\", color = NA) +\n  geom_sf(data = traj_corredores, aes(color = corredor)) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  facet_wrap(~ cenario, nrow = 1) +\n  theme_void()\n\n\n\n\nFigura 6.6: Distribuição dos corredores de transporte de média e alta capacidade em Fortaleza por cenário de transporte\n\n\n\n\nPodemos, então, analisar a distribuição espacial dos níveis de acessibilidade nos cenários antes e depois, bem como a diferença de acessibilidade entre eles. Para isso, temos que juntar as estimativas de acessibilidade com a grade espacial da nossa área de estudo. Primeiro, para a acessibilidade a empregos, como mostrado a seguir.\n\n# une os dados de acessibilidade com a grade espacial de fortaleza e os converte\n# em objetos espaciais\nacesso_a_empregos &lt;- merge(\n  acesso_a_empregos,\n  grade_fortaleza,\n  by.x = \"id\",\n  by.y = \"id_hex\"\n)\nacesso_a_empregos_sf &lt;- sf::st_sf(acesso_a_empregos)\n\n# configura mapas da distribuição de acessibilidade nos cenários antes e depois\ndist_acesso &lt;- ggplot() +\n  geom_sf(\n    data = acesso_a_empregos_sf,\n    aes(fill = acesso_a_empregos),\n    color = NA\n  ) +\n  facet_wrap(~ cenario, nrow = 1) +\n  scale_fill_viridis_c(\n    option = \"inferno\",\n    label = scales::label_number(scale = 1 / 1000)\n  ) +\n  labs(fill = \"Empregos\\nacessíveis\\n(em milhares)\", color = \"Corredores\") +\n  geom_sf(\n    data = traj_corredores,\n    aes(color = corredor),\n    alpha = 0.8,\n    show.legend = FALSE\n  ) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# configura mapa de diferença entre cenários\ndist_diferenca &lt;- ggplot() +\n  geom_sf(\n    data = subset(acesso_a_empregos_sf, !is.na(diferenca)),\n    aes(fill = diferenca),\n    color = NA\n  ) +\n  scale_fill_viridis_c(\n    option = \"cividis\",\n    label = scales::label_number(scale = 1 / 1000)\n  ) +\n  labs(\n    fill = \"Diferença de\\nempregos\\nacessíveis\\n(em milhares)\",\n    color=\"Corredores\"\n  ) +\n  geom_sf(data = traj_corredores, aes(color = corredor), alpha = 0.8) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# combina as duas figuras\ndist_acesso / dist_diferenca + plot_layout(ncol = 1, heights = c(1, 1))\n\n\n\n\nFigura 6.7: Distribuição espacial dos níveis de acessibilidade ao emprego por cenário de transporte e da diferença entre eles\n\n\n\n\nA figura mostra que as regiões que mais se beneficiam das mudanças no sistema de transportes são aquelas afastadas do centro da cidade, mas que ainda se encontram próximas a estações de média e alta capacidade. Os ganhos de acessibilidade ao emprego se concentram principalmente próximos às estações dos corredores das linhas Sul e Oeste do metrô e, em menor medida, em torno de algumas estações do corredor de VLT Parangaba-Mucuripe. Mesmo regiões próximas a esses corredores, embora não imediatamente adjacentes a eles, mostram grandes ganhos de acessibilidade, ressaltando o papel da conectividade da rede na garantia de boas condições de acessibilidade. Por sua vez, a região no entorno da linha Leste, que já concentrava os maiores níveis de acessibilidade da cidade mesmo antes da implementação do novo corredor, apresenta melhora nas condições de acessibilidade muito menos expressiva.\nOs mapas de distribuição do tempo de acesso até a escola de nível médio mais próxima, no entanto, apresentam uma situação diferente, como mostrado a seguir.\n\n# une os dados de tempo de acesso com a grade espacial de fortaleza e os\n# converte em objetos espaciais\ntempo_a_escolas &lt;- merge(\n  tempo_a_escolas,\n  grade_fortaleza,\n  by.x = \"id\",\n  by.y = \"id_hex\"\n)\ntempo_a_escolas_sf &lt;- sf::st_sf(tempo_a_escolas)\n\n# configura mapas da distribuição de tempo a escolas nos cenários antes e depois\ndist_tempo &lt;- ggplot() +\n  geom_sf(data = tempo_a_escolas_sf, aes(fill = travel_time_p50), color = NA) +\n  facet_wrap(~ cenario, nrow = 1) +\n  scale_fill_viridis_c(option = \"plasma\", direction = -1) +\n  labs(fill = \"Tempo até\\n a escola\\nmais próxima\\n(em minutos)\") +\n  geom_sf(\n    data = traj_corredores,\n    aes(color = corredor),\n    alpha = 0.8,\n    show.legend = FALSE\n  ) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# configura mapa de diferença entre cenários\ndist_dif_tempo &lt;- ggplot() +\n  geom_sf(\n    data = subset(tempo_a_escolas_sf, !is.na(diferenca)),\n    aes(fill = diferenca),\n    color = NA\n  ) +\n  scale_fill_viridis_c(option = \"viridis\", direction = -1) +\n  labs(\n    fill = \"Diferença no\\ntempo até\\n a escola\\nmais próxima\\n(em minutos)\"\n  ) +\n  geom_sf(data = traj_corredores, aes(color = corredor), alpha = 0.8) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# combina as duas figuras\ndist_tempo / dist_dif_tempo + plot_layout(ncol = 1, heights = c(1, 1))\n\n\n\n\nFigura 6.8: Distribuição espacial do tempo de acesso à escola público de nível médio mais próxima por cenário de transporte e da diferença entre eles\n\n\n\n\nA linha Leste e as mudanças de frequência nas outras linhas do metrô e do VLT praticamente não alteram o panorama da acessibilidade a escolas de nível médio em Fortaleza, o que faz com que pouquíssimos hexágonos apresentem algum tipo de ganho de acessibilidade entre os dois cenários - apenas alguns poucos nas imediações de estações de metrô apresentam alguma redução no tempo de acesso a escolas. Como podemos ver, a distribuição da acessibilidade a escolas na cidade segue um padrão muito menos concêntrico do que o da distribuição da acessibilidade a empregos. Novamente, isso é uma consequência da distribuição de escolas públicas na cidade: ao contrário da distribuição de empregos, que tende a seguir critérios econômico-financeiros, a distribuição de equipamentos públicos no Brasil tende a seguir critérios equitativos, buscando priorizar regiões periféricas e de maior concentração de grupos populacionais vulneráveis. Mesmo antes da implementação das mudanças no sistema de transportes, áreas com baixíssima acessibilidade ao emprego, como a região no extremo sul da cidade, já possuíam boas condições de acessibilidade a escolas públicas de nível médio. No entanto, o grau de sucesso das políticas de educação em promover um acesso equitativo pode variar muito entre cidades e para diferentes níveis de ensino, como infantil ou fundamental (Saraiva et al. 2023)."
  },
  {
    "objectID": "6_cenarios_transporte.html#desigualdade-de-acessibilidade",
    "href": "6_cenarios_transporte.html#desigualdade-de-acessibilidade",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "6.6 Desigualdade de acessibilidade",
    "text": "6.6 Desigualdade de acessibilidade\nUma dimensão-chave para a avaliação de políticas de transporte está relacionada aos seus aspectos distributivos. Quem são os principais beneficiados e prejudicados por essas políticas? Sob uma perspectiva de equidade, espera-se que políticas governamentais priorizem melhorar as condições de acessibilidade das pessoas em piores condições socioeconômicas e que mais dependem do transporte público (Pereira, Schwanen, e Banister 2017; van Wee 2022).\nNesta seção, vamos examinar como os ganhos de acessibilidade ao emprego decorrentes da construção da linha Leste e do aumento das frequências das linhas do metrô e do VLT estão distribuídos entre pessoas de diferentes níveis de renda. Para isso, precisamos entender como era a distribuição do nível de acesso a empregos entre a população em 2019, antes das mudanças no sistema de transportes, e como ela passará a ser após implementadas essas mudanças. Com o código a seguir, utilizamos a informação do decil de renda per capita em que cada célula da nossa grade espacial se encontra para entender a distribuição dos níveis de acessibilidade entre grupos socioeconômicos antes e depois das mudanças.\n\nggplot(data = acesso_a_empregos[populacao &gt; 0]) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decil),\n      y = acesso_a_empregos / 1000,\n      color = as.factor(decil),\n      weight = populacao,\n      group = decil\n    ),\n    show.legend = FALSE\n  ) +\n  facet_wrap(~ cenario, nrow = 1) +\n  scale_colour_brewer(palette = \"RdBu\") +\n  labs(x = \"Decil de renda\", y = \"Empregos acessíveis\\n(em milhares)\") +\n  scale_x_discrete(\n    labels = c(\"D1\\nmais\\npobres\", paste0(\"D\", 2:9), \"D10\\nmais\\nricos\")\n  ) +\n  theme_minimal()\n\n\n\n\nFigura 6.9: Distribuição dos níveis de acessibilidade ao emprego entre decis de renda por cenário de transporte\n\n\n\n\nOs dois gráficos mostram claramente que as pessoas mais ricas de Fortaleza possuem maiores níveis de acesso a empregos do que seus pares mais pobres, tanto antes quanto depois das mudanças no sistema de transportes. Em Fortaleza, assim como na maior parte das grandes cidades brasileiras, os mais ricos tendem a morar próximo às grandes concentrações de emprego e do centro da cidade, enquanto os mais pobres tendem a ocupar regiões periféricas (Pereira et al. 2022). Consequentemente, os mais ricos costumam ter melhores condições de acessibilidade urbana do que os mais pobres. Não apenas porque moram mais perto dos empregos, mas também porque, geralmente, moram em regiões centrais mais bem servidas de transporte público do que as periferias.\nNo entanto, é difícil enxergar na figura anterior grandes mudanças nas condições de acessibilidade entre os dois cenários. Lançando mão do mesmo recurso que usamos anteriormente, apresentamos na próxima figura como os ganhos de acessibilidade entre os cenários se distribuem por decil de renda.\n\nggplot(subset(acesso_a_empregos, populacao &gt; 0 & !is.na(diferenca))) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decil),\n      y = diferenca / 1000,\n      color = as.factor(decil),\n      weight = populacao,\n      group = decil\n    ),\n    show.legend = FALSE\n  ) +\n  scale_colour_brewer(palette = \"RdBu\") +\n  labs(\n    x = \"Decil de renda\",\n    y = \"Diferença da quantidade de\\nempregos acessíveis (em milhares)\"\n  ) +\n  scale_x_discrete(\n    labels = c(\"D1\\nmais\\npobres\", paste0(\"D\", 2:9), \"D10\\nmais\\nricos\")\n  ) +\n  theme_minimal()\n\n\n\n\nFigura 6.10: Distribuição da diferença dos níveis de acessibilidade ao emprego entre cenários de transporte\n\n\n\n\nComo podemos ver, a distribuição de ganhos de acessibilidade segue o formato de U-invertido, com maiores ganhos entre as camadas médias da população e menores entre as camadas mais ricas e mais pobres. A célula na qual houve maior aumento de acessibilidade aparece como outlier do oitavo decil, apresentando um ganho de quase 200.000 empregos em relação ao cenário antes das mudanças.\nGráficos como os das últimas duas figuras não são os mais simples de comunicar, exatamente por serem ricos em nuances e interpretações. Visando a facilitar essa comunicação, medidas sintéticas de desigualdade são frequentemente utilizadas como uma maneira simples de medir o impacto de políticas de transporte sobre a desigualdade de acessibilidade. Esse tipo de medida busca resumir a distribuição dos níveis de acessibilidade entre grupos populacionais (aqui, decis de renda) em um único indicador que facilite a compreensão dos resultados e que possa ser usado, por exemplo, na elaboração de planos e metas. As medidas de desigualdade mais frequentemente utilizadas na literatura de acessibilidade são a Razão de Palma e o Índice de Gini (Lucas, van Wee, e Maat 2016; Guzman e Oviedo 2018; Pritchard et al. 2019).\nNesse exemplo, vamos calcular a Razão de Palma dos cenários antes e depois. Essa medida é o resultado da divisão da acessibilidade média dos 10% mais ricos pela acessibilidade média dos 40% mais pobres:\n\\[P = \\frac{\\overline{A_{tp10}}}{\\overline{A_{bt40}}}\\]\nem que \\(P\\) é a Razão de Palma, \\(\\overline{A_{tp10}}\\) é a acessibilidade média dos 10% mais ricos e \\(\\overline{A_{bt40}}\\) é a acessibilidade média dos 40% mais pobres.\n\n\n\n\n\n\nPor que usar a Razão de Palma?\n\n\n\n\n\nUma das vantagens da Razão de Palma frente ao Índice de Gini é a sua facilidade de comunicação e interpretação. Valores maiores do que 1 indicam um cenário em que os ricos possuem níveis médios de acessibilidade maiores do que os dos pobres, e valores menores do que 1, a situação inversa. Outra vantagem da Razão de Palma é que ela reflete claramente como a desigualdade varia entre dois grupos de especial interesse para nós: os mais privilegiados e os mais vulneráveis de uma população. O Índice de Gini, por sua vez, estima o quanto uma distribuição desvia de uma situação hipotética em que todos possuem o mesmo nível de acesso, mas nada diz sobre as condições socioeconômicas daqueles que detêm os maiores e menores níveis de acessibilidade. Se uma determinada política aumenta os níveis de acessibilidades de pessoas de alta renda que moram em locais de baixa acessibilidade, por exemplo, o Índice de Gini indicaria que houve uma diminuição da desigualdade, mesmo que nenhuma população vulnerável tenha se beneficiado dessa política. Dificilmente uma política como essa poderia ser considerada equitativa.\n\n\n\nAo calcularmos a Razão de Palma nos cenários antes e depois da implementação da linha Leste e das mudanças de frequência das linhas de metrô e VLT, conseguimos entender o impacto dessas políticas na desigualdade de acesso a empregos em Fortaleza:\n\n# calcula a acessibilidade média dos mais ricos nos dois cenários\nacesso_mais_ricos &lt;- acesso_a_empregos[\n  decil == 10,\n  .(acesso = weighted.mean(acesso_a_empregos, w = as.numeric(populacao))),\n  by = cenario\n]\n\n# calcula a acessibilidade média dos mais pobres nos dois cenários\nacesso_mais_pobres &lt;- acesso_a_empregos[\n  decil %in% 1:4,\n  .(acesso = weighted.mean(acesso_a_empregos, w = as.numeric(populacao))),\n  by = cenario\n]\n\n# combina a acessibilidade dos mais ricos e mais pobres\nrazao_de_palma &lt;- merge(\n  acesso_mais_ricos,\n  acesso_mais_pobres,\n  by = \"cenario\",\n  suffixes = c(\"_mais_ricos\", \"_mais_pobres\")\n)\n\n# calculando Razão de Palma\nrazao_de_palma[, palma := acesso_mais_ricos / acesso_mais_pobres]\n\nggplot(data = razao_de_palma, aes(x = cenario, y = palma)) +\n  geom_col(fill = \"#0d6556\") +\n  geom_text(\n    aes(label = round(palma, digits = 2)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Razão de Palma\") +\n  theme_minimal()\n\n\n\n\nFigura 6.11: Razão de Palma da acessibilidade ao emprego em Fortaleza por cenário de transporte\n\n\n\n\nA Figura 6.11 aponta que em 2019 a população mais rica de Fortaleza conseguia acessar, em média, 2,17 vezes mais empregos do que a população mais pobre em até 60 minutos por transporte público. O gráfico também mostra que a desigualdade medida pela Razão de Palma sofreu uma pequena queda entre os cenários pré e pós-intervenções. Ou seja, podemos concluir que, nesse nosso cenário simplificado de avaliação da linha Leste, a política de expansão do metrô de Fortaleza combinada com o aumento da frequência das linhas Sul e Oeste do metrô e do VLT seria progressiva. Em outras palavras, essas mudanças, quando analisadas sem considerar as demais intervenções previstas no Pasfor, contribuem para a redução da desigualdade de acesso a oportunidades de emprego em Fortaleza.\n\n\n\n\n\n\nÉ importante lembrar que a avaliação apresentada neste capítulo considera um cenário de intervenção simplificado para fins didáticos. Para uma avaliação mais completa da linha Leste do metrô de Fortaleza e das mudanças previstas no Pasfor, que também considera alterações nas linhas de ônibus da cidade, veja o trabalho de Braga et al. (2022).\n\n\n\nNeste capítulo, focamos na avaliação do impacto de uma política de transporte sobre as condições de acessibilidade da população. Vale ressaltar, no entanto, que a avaliação completa de uma política pública deve considerar também critérios como a participação social em sua formulação, além de outros possíveis impactos ambientais, econômicos e sociais. Embora uma avaliação de impacto de acessibilidade seja muito importante para identificar quais grupos se beneficiam de uma política de transporte e entender como essa política impacta o desempenho do sistema de transportes como um todo, esse tipo de análise é apenas uma dimensão de avaliação e deve complementar ou ser complementada por outras análises.\n\n\n\n\nBraga, Carlos Kaue Vieira, Diego Bogado Tomasiello, Daniel Herszenhut, João Lucas Albuquerque Oliveira, e Rafael H. M. Pereira. 2022. «Impactos da expansão do metrô de Fortaleza sobre o acesso a oportunidades de emprego, saúde e educação». {Texto para Discuss\\~ao} 2767. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nGuzman, Luis A., e Daniel Oviedo. 2018. «Accessibility, Affordability and Equity: Assessing “Pro-Poor” Public Transport Subsidies in Bogotá». Transport Policy 68 (setembro): 37–51. https://doi.org/10.1016/j.tranpol.2018.04.012.\n\n\nLucas, Karen, Bert van Wee, e Kees Maat. 2016. «A Method to Evaluate Equitable Accessibility: Combining Ethical Theories and Accessibility-Based Approaches». Transportation 43 (3): 473–90. https://doi.org/10.1007/s11116-015-9585-2.\n\n\nPereira, Rafael H. M., Carlos Kauê Vieira Braga, Daniel Herszenhut, Marcus Saraiva, e Diego Bogado Tomasiello. 2022. «Estimativas de acessibilidade a empregos e serviços públicos via transporte ativo, público e privado nas 20 maiores cidades do Brasil em 2017, 2018, 2019». Texto para Discussão IPEA 2800.\n\n\nPereira, Rafael H. M., Tim Schwanen, e David Banister. 2017. «Distributive Justice and Equity in Transportation». Transport Reviews 37 (2): 170–91. https://doi.org/10.1080/01441647.2016.1257660.\n\n\nPritchard, John P., Diego Tomasiello, Mariana Giannotti, e Karst Geurs. 2019. «An International Comparison of Equity in Accessibility to Jobs: London, São Paulo and the Randstad». Findings, fevereiro. https://doi.org/10.32866/7412.\n\n\nSaraiva, Marcus, Luiz Pedro Silva, Carlos Kauê Vieira Braga, e Rafael Henrique Moraes Pereira. 2023. «Transporte urbano e insuficiência de acesso a escolas no Brasil». {Texto para Discuss\\~ao} 2854. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nvan Wee, Bert. 2022. «Accessibility and Equity: A Conceptual Framework and Research Agenda». Journal of Transport Geography 104 (outubro): 103421. https://doi.org/10.1016/j.jtrangeo.2022.103421."
  },
  {
    "objectID": "6_cenarios_transporte.html#footnotes",
    "href": "6_cenarios_transporte.html#footnotes",
    "title": "6  Comparando a acessibilidade entre dois cenários de transporte",
    "section": "",
    "text": "Disponível em https://www.pasfor.com.br/.↩︎\nUma avaliação mais completa, que leva em consideração todas as mudanças previstas no Pasfor, pode ser encontrada em Braga et al. (2022).↩︎\nPara mais detalhes, ver a descrição da tabela frequencies no Capítulo 4).↩︎\nMais detalhes sobre o pacote são apresentados na Seção 5.↩︎"
  },
  {
    "objectID": "s5_dados_aop.html#footnotes",
    "href": "s5_dados_aop.html#footnotes",
    "title": "SEÇÃO 5: Dados do Projeto Acesso a Oportunidades",
    "section": "",
    "text": "O GTFS de Goiânia descreve a rede de transporte público não apenas do município, mas de toda a sua região metropolitana.↩︎"
  },
  {
    "objectID": "7_aopdata_populacao.html#mapa-de-população-total",
    "href": "7_aopdata_populacao.html#mapa-de-população-total",
    "title": "7  Dados de população e socioeconômicos",
    "section": "7.1 Mapa de população total",
    "text": "7.1 Mapa de população total\nNo código a seguir, carregamos bibliotecas de visualização de dados e configuramos o mapa. Com um comando, podemos visualizar a distribuição espacial da população de Fortaleza. A figura mostra um mapa coroplético no qual a cor de cada célula da grade espacial é preenchida com base na quantidade total de pessoas que ali residem (variável P001).\n\nlibrary(patchwork)\nlibrary(ggplot2)\n\nggplot(subset(dados_fortaleza, P001 &gt; 0)) +\n  geom_sf(aes(fill = P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  labs(\n    title = \"Distribuição populacional\",\n    subtitle = \"Fortaleza\",\n    fill = \"Contagem populacional\"\n  ) +\n  theme_void()\n\n\n\n\nFigura 7.1: Distribuição populacional em Fortaleza"
  },
  {
    "objectID": "7_aopdata_populacao.html#mapa-de-população-por-cor",
    "href": "7_aopdata_populacao.html#mapa-de-população-por-cor",
    "title": "7  Dados de população e socioeconômicos",
    "section": "7.2 Mapa de população por cor",
    "text": "7.2 Mapa de população por cor\nAlém da informação sobre a população total em cada célula, os dados também informam a contagem populacional por classificações de cor (variáveis P002 a P005), sexo (variáveis P006 e P007) e faixa etária (variáveis P010 a P016) em cada unidade espacial. O código a seguir ilustra como é simples calcular a proporção de pessoas negras e brancas em cada hexágono e visualizar essas proporções em um mapa.\n\npop_negra &lt;- ggplot(subset(dados_fortaleza, P001 &gt; 0)) +\n  geom_sf(aes(fill = P003 / P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(\n    palette = \"RdPu\",\n    direction = 1,\n    labels = scales::percent,\n    limits = c(0, 1)\n  ) +\n  labs(title = \"Proporção de pessoas negras\", fill = \"Pop. negra\") +\n  theme_void()\n\npop_branca &lt;- ggplot(subset(dados_fortaleza, P001 &gt; 0)) +\n  geom_sf(aes(fill = P002 / P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(\n    palette = \"YlGnBu\",\n    direction = 1,\n    labels = scales::percent,\n    limits = c(0, 1)\n  ) +\n  labs(title = \"Proporção de pessoas brancas\", fill = \"Pop. branca\") +\n  theme_void()\n\npop_negra + pop_branca\n\n\n\n\nFigura 7.2: Proporção de pessoas negras e brancas em Fortaleza"
  },
  {
    "objectID": "7_aopdata_populacao.html#mapa-de-população-por-renda",
    "href": "7_aopdata_populacao.html#mapa-de-população-por-renda",
    "title": "7  Dados de população e socioeconômicos",
    "section": "7.3 Mapa de população por renda",
    "text": "7.3 Mapa de população por renda\nPor fim, os dados também trazem informações sobre a renda domiciliar per capita média de cada hexágono (R001) e sua classificação em termos de quintil (R002) e decil de renda (R003). Com esses dados, podemos visualizar a distribuição espacial dos níveis de renda na cidade.\n\nrenda &lt;- ggplot(subset(dados_fortaleza, P001 &gt; 0)) +\n  geom_sf(aes(fill = R001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  labs(title = \"Renda domiciliar per capita média\", fill = \"Renda (R$)\") +\n  theme_void()\n\ndecis &lt;- ggplot(subset(dados_fortaleza, !is.na(R002))) +\n  geom_sf(aes(fill = factor(R003)), color = NA, alpha = 0.8) +\n  scale_fill_brewer(palette = \"RdBu\") +\n  labs(\n    title = \"Decis de renda domiciliar per capita\",\n    fill = \"Decil de renda\"\n  ) +\n  theme_void() +\n  theme(legend.key.size = unit(0.3, \"cm\"))\n\nrenda + decis\n\n\n\n\nFigura 7.3: Distribuição de renda em Fortaleza"
=======
    "objectID": "5_gtfstools.en.html#reading-and-manipulating-gtfs-files",
    "href": "5_gtfstools.en.html#reading-and-manipulating-gtfs-files",
    "title": "5  GTFS data manipulation and visualization",
    "section": "5.1 Reading and manipulating GTFS files",
    "text": "5.1 Reading and manipulating GTFS files\nReading GTFS files with {gtfstools} is done with the read_gtfs() function, which receives a string with the file path. The package represents a feed as a list of data.tables, a high-performance version of data.frames. Throughout this chapter, we will refer to this list of tables as a GTFS object. By default, the function reads all .txt tables in the feed:\n\n# loads the package\nlibrary(gtfstools)\n\n# points to path of the sample gtfs data installed in {gtfstools}\npath <- system.file(\"extdata/spo_gtfs.zip\", package = \"gtfstools\")\n\n# reads the gtfs\ngtfs <- read_gtfs(path)\n\n# checks the tables inside the gtfs object\nnames(gtfs)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\n\nWe can see that each data.table within the GTFS object is named according to the table it represents, without the .txt extension. This configuration allows us to select and manipulate each table individually. The code below, for example, lists the first 6 rows of the trips table:\n\nhead(gtfs$trips)\n\n   route_id service_id    trip_id trip_headsign direction_id shape_id\n1: CPTM L07        USD CPTM L07-0       JUNDIAI            0    17846\n2: CPTM L07        USD CPTM L07-1           LUZ            1    17847\n3: CPTM L08        USD CPTM L08-0  AMADOR BUENO            0    17848\n4: CPTM L08        USD CPTM L08-1 JULIO PRESTES            1    17849\n5: CPTM L09        USD CPTM L09-0        GRAJAU            0    17850\n6: CPTM L09        USD CPTM L09-1        OSASCO            1    17851\n\n\nTables within a GTFS object can be easily manipulated using the {dplyr} or {data.table} packages, for example. In this book, we opted to show how to do this using the {data.table} package syntax. This package offers several useful features, primarily for manipulating tables with a large number of records, such as updating columns by reference, very fast row subsets and efficient data aggregation1. For example, we can use the code below to add 100 seconds to all the headways listed in the frequencies table and later reverse this change:\n\n# saves original headways\noriginal_headway <- gtfs$frequencies$headway_secs\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          720\n2: CPTM L07-0   05:00:00 05:59:00          360\n3: CPTM L07-0   06:00:00 06:59:00          360\n\n# updates the headways\ngtfs$frequencies[, headway_secs := headway_secs + 100]\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          820\n2: CPTM L07-0   05:00:00 05:59:00          460\n3: CPTM L07-0   06:00:00 06:59:00          460\n\n# restores the original headway\ngtfs$frequencies[, headway_secs := original_headway]\nhead(gtfs$frequencies, 3)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   04:00:00 04:59:00          720\n2: CPTM L07-0   05:00:00 05:59:00          360\n3: CPTM L07-0   06:00:00 06:59:00          360\n\n\nAfter editing a GTFS object in R, we often want to use the processed GTFS to perform different analyses. In order to do this, we frequently need the GTFS file in .zip format again, and not as a list of tables in an R session. To do this, {gtfstools} includes the write_gtfs() function to transform GTFS objects that exist in an R session into GTFS files saved to disk. To use this function, we only need to list the object that should be written to disk and the file path where it should be written to:\n\n# points to the path where the GTFS should be written to\nexport_path <- tempfile(\"new_gtfs\", fileext = \".zip\")\n\n# writes the GTFS to the path\nwrite_gtfs(gtfs, path = export_path)\n\n# lists files within the feed\nzip::zip_list(export_path)[, c(\"filename\", \"compressed_size\", \"timestamp\")]\n\n         filename compressed_size           timestamp\n1      agency.txt             112 2023-04-26 19:55:12\n2    calendar.txt             129 2023-04-26 19:55:12\n3 frequencies.txt            2381 2023-04-26 19:55:12\n4      routes.txt             659 2023-04-26 19:55:12\n5      shapes.txt          160470 2023-04-26 19:55:12\n6  stop_times.txt            7907 2023-04-26 19:55:12\n7       stops.txt           18797 2023-04-26 19:55:12\n8       trips.txt             717 2023-04-26 19:55:12"
  },
  {
    "objectID": "5_gtfstools.en.html#calculating-trip-speed",
    "href": "5_gtfstools.en.html#calculating-trip-speed",
    "title": "5  GTFS data manipulation and visualization",
    "section": "5.2 Calculating trip speed",
    "text": "5.2 Calculating trip speed\nGTFS files are often used in public transport routing applications and to inform the timetable of different routes in a given region to potential passengers. Feeds must, therefore, accurately describe the schedule of public transport trips.\nOne key piece of information of a GTFS quality is the average speed of its trips. To check this information {gtfstools} package includes the function get_trip_speed(). By default, the function returns the speed (in km/h) of all trips included in the feed, but one can choose to calculate the speed of selected trips with the trip_id parameter:\n\n# calculates the speeds of all trips\nspeeds <- get_trip_speed(gtfs)\n\nhead(speeds)\n\n     trip_id origin_file     speed\n1: 2002-10-0      shapes  8.952511\n2: 2105-10-0      shapes 10.253365\n3: 2105-10-1      shapes  9.795292\n4: 2161-10-0      shapes 11.182534\n5: 2161-10-1      shapes 11.784458\n6: 4491-10-0      shapes 13.203560\n\nnrow(speeds)\n\n[1] 36\n\n# calculates the speeds of two specific trips\nspeeds <- get_trip_speed(gtfs, trip_id = c(\"CPTM L07-0\", \"2002-10-0\"))\n\nhead(speeds)\n\n      trip_id origin_file     speed\n1:  2002-10-0      shapes  8.952511\n2: CPTM L07-0      shapes 26.787768\n\n\nTo calculate the speed of a trip we need to know its length and how long it takes to travel from its first to its last stop. Behind the scenes, get_trip_speed() uses two other functions from {gtfstools} toolset: get_trip_length() and get_trip_duration(). The usage of both is very similar to what has been shown before, returning the length/duration of all trips by default, or of for a few specified trips. Below, we show their default behavior:\n\n# calculates the length of all trips\nlengths <- get_trip_length(gtfs, file = \"shapes\")\n\nhead(lengths)\n\n      trip_id   length origin_file\n1: CPTM L07-0 60.71894      shapes\n2: CPTM L07-1 60.71894      shapes\n3: CPTM L08-0 41.79037      shapes\n4: CPTM L08-1 41.79037      shapes\n5: CPTM L09-0 31.88906      shapes\n6: CPTM L09-1 31.88906      shapes\n\n# calculates the duration of all trips\ndurations <- get_trip_duration(gtfs)\n\nhead(durations)\n\n     trip_id duration\n1: 2002-10-0       48\n2: 2105-10-0      108\n3: 2105-10-1      111\n4: 2161-10-0       94\n5: 2161-10-1       93\n6: 4491-10-0       69\n\n\nJust as get_trip_speed() returns speeds in km/h by default, get_trip_length() returns lengths in km and get_trip_duration() returns the duration in minutes. These units can be adjusted with the unit argument, present in all three functions."
  },
  {
    "objectID": "5_gtfstools.en.html#combining-and-filtering-feeds",
    "href": "5_gtfstools.en.html#combining-and-filtering-feeds",
    "title": "5  GTFS data manipulation and visualization",
    "section": "5.3 Combining and filtering feeds",
    "text": "5.3 Combining and filtering feeds\nThe tasks of processing and manipulating GTFS files are often performed manually, which may increase the chances of leaving minor inconsistencies or errors in the data. A common issue in some GTFS feeds is the presence of duplicate records in the same table. SPTrans’ feed, for example, contains duplicate records both in agency.txt and in calendar.txt:\n\ngtfs$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n2:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n2: America/Sao_Paulo          pt\n\ngtfs$calendar\n\n    service_id monday tuesday wednesday thursday friday saturday sunday\n 1:        USD      1       1         1        1      1        1      1\n 2:        U__      1       1         1        1      1        0      0\n 3:        US_      1       1         1        1      1        1      0\n 4:        _SD      0       0         0        0      0        1      1\n 5:        __D      0       0         0        0      0        0      1\n 6:        _S_      0       0         0        0      0        1      0\n 7:        USD      1       1         1        1      1        1      1\n 8:        U__      1       1         1        1      1        0      0\n 9:        US_      1       1         1        1      1        1      0\n10:        _SD      0       0         0        0      0        1      1\n11:        __D      0       0         0        0      0        0      1\n12:        _S_      0       0         0        0      0        1      0\n    start_date   end_date\n 1: 2008-01-01 2020-05-01\n 2: 2008-01-01 2020-05-01\n 3: 2008-01-01 2020-05-01\n 4: 2008-01-01 2020-05-01\n 5: 2008-01-01 2020-05-01\n 6: 2008-01-01 2020-05-01\n 7: 2008-01-01 2020-05-01\n 8: 2008-01-01 2020-05-01\n 9: 2008-01-01 2020-05-01\n10: 2008-01-01 2020-05-01\n11: 2008-01-01 2020-05-01\n12: 2008-01-01 2020-05-01\n\n\n{gtfstools} includes the remove_duplicates() function to keep only unique entries in all tables of the feed. This function takes a GTFS object as input and returns the same object without duplicate entries:\n\nno_dups_gtfs <- remove_duplicates(gtfs)\n\nno_dups_gtfs$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n\nno_dups_gtfs$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:        USD      1       1         1        1      1        1      1\n2:        U__      1       1         1        1      1        0      0\n3:        US_      1       1         1        1      1        1      0\n4:        _SD      0       0         0        0      0        1      1\n5:        __D      0       0         0        0      0        0      1\n6:        _S_      0       0         0        0      0        1      0\n   start_date   end_date\n1: 2008-01-01 2020-05-01\n2: 2008-01-01 2020-05-01\n3: 2008-01-01 2020-05-01\n4: 2008-01-01 2020-05-01\n5: 2008-01-01 2020-05-01\n6: 2008-01-01 2020-05-01\n\n\nWe often have to deal with multiple feeds describing the same study area - for example, when the bus and the rail systems of a single city are described in separate GTFS files. In such cases, we may want to merge both files into a single feed to reduce the data processing effort. To help us with that, {gtfstools} includes the merge_gtfs() function. The example below shows the output of merging SPtrans’ feed (without duplicate entries) with EPTC’s (Porto Alegre’s Transport and Traffic Public Company):\n\n# reads Porto Alegre's GTFS\npoa_path <- system.file(\"extdata/poa_gtfs.zip\", package = \"gtfstools\")\npoa_gtfs <- read_gtfs(poa_path)\n\npoa_gtfs$agency\n\n   agency_id                                 agency_name             agency_url\n1:      EPTC Empresa Publica de Transportes e Circulação http://www.eptc.com.br\n     agency_timezone agency_lang agency_phone\n1: America/Sao_Paulo          pt          156\n                                                  agency_fare_url\n1: http://www2.portoalegre.rs.gov.br/eptc/default.php?p_secao=155\n\nno_dups_gtfs$agency\n\n   agency_id agency_name                               agency_url\n1:         1     SPTRANS http://www.sptrans.com.br/?versao=011019\n     agency_timezone agency_lang\n1: America/Sao_Paulo          pt\n\n# combines Porto Alegre's and São Paulo's GTFS objects\ncombined_gtfs <- merge_gtfs(no_dups_gtfs, poa_gtfs)\n\n# check results\ncombined_gtfs$agency\n\n   agency_id                                 agency_name\n1:         1                                     SPTRANS\n2:      EPTC Empresa Publica de Transportes e Circulação\n                                 agency_url   agency_timezone agency_lang\n1: http://www.sptrans.com.br/?versao=011019 America/Sao_Paulo          pt\n2:                   http://www.eptc.com.br America/Sao_Paulo          pt\n   agency_phone                                                agency_fare_url\n1:                                                                            \n2:          156 http://www2.portoalegre.rs.gov.br/eptc/default.php?p_secao=155\n\n\nWe can see that the tables of both feeds are combined into a single one. This is the case when two (or more) GTFS objects contain the same table (agency, in the example). When a particular table is present in only one of the feeds, the function keeps this table in the output. That’s the case of the frequencies table, in our example, which exists only in SPTrans’ feed:\n\nnames(poa_gtfs)\n\n[1] \"agency\"     \"calendar\"   \"routes\"     \"shapes\"     \"stop_times\"\n[6] \"stops\"      \"trips\"     \n\nnames(no_dups_gtfs)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\nnames(combined_gtfs)\n\n[1] \"agency\"      \"calendar\"    \"frequencies\" \"routes\"      \"shapes\"     \n[6] \"stop_times\"  \"stops\"       \"trips\"      \n\nidentical(no_dups_gtfs$frequencies, combined_gtfs$frequencies)\n\n[1] TRUE\n\n\nAnother frequently used operation when dealing with GTFS files is filtering the data. Feeds are often used to describe large-scale public transport networks, which may result in complex and slow data manipulation, analysis and sharing. Thus, planners and researchers often work with a feed subset. If we want to measure the performance of a transport network during the morning peak, for example, we can filter our GTFS data to keep only the observations that relate to trips that run within this period.\n{gtfstools} includes lots of functions to filter GTFS data. The currently available filtering functions are:\n\nfilter_by_agency_id()\nfilter_by_route_id()\nfilter_by_service_id()\nfilter_by_shape_id()\nfilter_by_stop_id()\nfilter_by_trip_id()\nfilter_by_route_type()\nfilter_by_weekday()\nfilter_by_time_of_day()\nfilter_by_sf()\n\nFiltering by identifiers\nThe six first function from the above list (filter_by_agency_id(), filter_by_route_id(), filter_by_service_id(), filter_by_shape_id(), filter_by_stop_id() e filter_by_trip_id()) work very similarly. They take as input a vector of identifiers and return a GTFS object whose table entries are related to the specified ids. The example below demonstrates the functionality with filter_by_trip_id():\n\n# checks pre-filter object size \nutils::object.size(gtfs)\n\n864568 bytes\n\nhead(gtfs$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id trip_headsign shape_id\n1: CPTM L07-0       JUNDIAI    17846\n2: CPTM L07-1           LUZ    17847\n3: CPTM L08-0  AMADOR BUENO    17848\n4: CPTM L08-1 JULIO PRESTES    17849\n5: CPTM L09-0        GRAJAU    17850\n6: CPTM L09-1        OSASCO    17851\n\n# keeps entries related to the two specified ids\nfiltered_gtfs <- filter_by_trip_id(\n  gtfs,\n  trip_id = c(\"CPTM L07-0\", \"CPTM L07-1\")\n)\n\n# checks post-filter object size\nutils::object.size(filtered_gtfs)\n\n71592 bytes\n\nhead(filtered_gtfs$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id trip_headsign shape_id\n1: CPTM L07-0       JUNDIAI    17846\n2: CPTM L07-1           LUZ    17847\n\nunique(filtered_gtfs$shapes$shape_id)\n\n[1] \"17846\" \"17847\"\n\n\nWe can see from the code snippet above that the function not only filters trips, but all other tables containing a column that relates to trip_id in any way. The shapes of trips CPTM L07-0 and CPTM L07-1, for example, are respectively described by shape_ids 17846 and 17847. Therefore, these are the only shape identifiers kept in the filtered GTFS.\nThe function also supports the opposite behavior: instead of keeping the entries related to the specified identifiers, we can drop them. To do this, we need to set the keep argument to FALSE:\n\n# removes entries related to two trips from the feed\nfiltered_gtfs <- filter_by_trip_id(\n  gtfs,\n  trip_id = c(\"CPTM L07-0\", \"CPTM L07-1\"),\n  keep = FALSE\n)\n\nhead(filtered_gtfs$trips[, .(trip_id, trip_headsign, shape_id)])\n\n      trip_id       trip_headsign shape_id\n1: CPTM L08-0        AMADOR BUENO    17848\n2: CPTM L08-1       JULIO PRESTES    17849\n3: CPTM L09-0              GRAJAU    17850\n4: CPTM L09-1              OSASCO    17851\n5: CPTM L10-0 RIO GRANDE DA SERRA    17852\n6: CPTM L10-1                BRÁS    17853\n\nhead(unique(filtered_gtfs$shapes$shape_id))\n\n[1] \"17848\" \"17849\" \"17850\" \"17851\" \"17852\" \"17853\"\n\n\nWe can see that the specified trips, as well as their shapes, are not present in the filtered GTFS anymore. The same logic, demonstrated here with filter_by_trip_id(), applies to the functions that filter GTFS objects by agency_id, route_id, service_id, shape_id, stop_id and route_type.\nFiltering by day of the week and time of the day\nAnother common operation when dealing with GTFS data is subsetting feeds to keep services that only happen during certain times of the day or days of the week. The package includes the filter_by_weekday() and filter_by_time_of_day() functions to perform these filters.\nfilter_by_weekday() takes as input the days of the week whose services that operate on them should be kept (or dropped). The function also includes a combine parameter, which defines how filters for multi-days should work. When this argument receives the value \"and\", only services that operate on every single specified day are kept. When it receives the value \"or\", services that operate on at least one of the days are kept:\n\n# keeps services that operate on both on saturday AND sunday\nfiltered_gtfs <- filter_by_weekday(\n  no_dups_gtfs,\n  weekday = c(\"saturday\", \"sunday\"),\n  combine = \"and\"\n)\n\nfiltered_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")]\n\n   service_id sunday saturday\n1:        USD      1        1\n2:        _SD      1        1\n\n# keeps services that operate EITHER on saturday OR on sunday\nfiltered_gtfs <- filter_by_weekday(\n  no_dups_gtfs,\n  weekday = c(\"sunday\", \"saturday\"),\n  combine = \"or\"\n)\n\nfiltered_gtfs$calendar[, c(\"service_id\", \"sunday\", \"saturday\")]\n\n   service_id sunday saturday\n1:        USD      1        1\n2:        US_      0        1\n3:        _SD      1        1\n4:        __D      1        0\n5:        _S_      0        1\n\n\nfilter_by_time_of_day(), on the other hand, takes the beginning and the end of a time window and keeps (or drops) the entries related to the trips that run within this window. The behavior of this function depends on whether a frequencies table is included in the feed or not: the stop_times timetable of trips listed in frequencies must not be filtered, because, as previously mentioned, it works as a reference that describes the time between consecutive stops, and the departure and arrival times listed there should not be considered rigorously. If a trip is not listed in frequencies, however, its stop_times entries are filtered according to the specified time window. Let’s see how the function works with some examples:\n\n# keeps trips that run within the 5am to 6am window\nfiltered_gtfs <- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")\n\nhead(filtered_gtfs$frequencies)\n\n      trip_id start_time end_time headway_secs\n1: CPTM L07-0   05:00:00 05:59:00          360\n2: CPTM L07-1   05:00:00 05:59:00          360\n3: CPTM L08-0   05:00:00 05:59:00          480\n4: CPTM L08-1   05:00:00 05:59:00          480\n5: CPTM L09-0   05:00:00 05:59:00          480\n6: CPTM L09-1   05:00:00 05:59:00          480\n\nhead(filtered_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")])\n\n      trip_id departure_time arrival_time\n1: CPTM L07-0       04:00:00     04:00:00\n2: CPTM L07-0       04:08:00     04:08:00\n3: CPTM L07-0       04:16:00     04:16:00\n4: CPTM L07-0       04:24:00     04:24:00\n5: CPTM L07-0       04:32:00     04:32:00\n6: CPTM L07-0       04:40:00     04:40:00\n\n# save the frequencies table and remove it from the original gtfs\nfrequencies <- gtfs$frequencies\ngtfs$frequencies <- NULL\n\nfiltered_gtfs <- filter_by_time_of_day(gtfs, from = \"05:00:00\", to = \"06:00:00\")\n\nhead(filtered_gtfs$stop_times[, c(\"trip_id\", \"departure_time\", \"arrival_time\")])\n\n      trip_id departure_time arrival_time\n1: CPTM L07-0       05:04:00     05:04:00\n2: CPTM L07-0       05:12:00     05:12:00\n3: CPTM L07-0       05:20:00     05:20:00\n4: CPTM L07-0       05:28:00     05:28:00\n5: CPTM L07-0       05:36:00     05:36:00\n6: CPTM L07-0       05:44:00     05:44:00\n\n\nFiltering the stop_times table can work in two different ways. One is to keep entire trips that cross the specified time window. The other is to keep only the timetable entries that take place inside this window (default behavior). This behavior is controlled by the full_trips parameter, as shown below (please pay attention to the times and stops present in each example):\n\n# keeps any trips that cross the 5am to 6am window intact\nfiltered_gtfs <- filter_by_time_of_day(\n  gtfs,\n  from = \"05:00:00\", \n  to = \"06:00:00\",\n  full_trips = TRUE\n)\n\nhead(\n  filtered_gtfs$stop_times[\n    ,\n    c(\"trip_id\", \"departure_time\", \"arrival_time\", \"stop_sequence\")\n  ]\n)\n\n      trip_id departure_time arrival_time stop_sequence\n1: CPTM L07-0       04:00:00     04:00:00             1\n2: CPTM L07-0       04:08:00     04:08:00             2\n3: CPTM L07-0       04:16:00     04:16:00             3\n4: CPTM L07-0       04:24:00     04:24:00             4\n5: CPTM L07-0       04:32:00     04:32:00             5\n6: CPTM L07-0       04:40:00     04:40:00             6\n\n# keeps only the timetable entries that happen inside the 5am to 6am window\nfiltered_gtfs <- filter_by_time_of_day(\n  gtfs,\n  from = \"05:00:00\",\n  to = \"06:00:00\",\n  full_trips = FALSE\n)\n\nhead(\n  filtered_gtfs $stop_times[\n    ,\n    c(\"trip_id\", \"departure_time\", \"arrival_time\", \"stop_sequence\")\n  ]\n)\n\n      trip_id departure_time arrival_time stop_sequence\n1: CPTM L07-0       05:04:00     05:04:00             9\n2: CPTM L07-0       05:12:00     05:12:00            10\n3: CPTM L07-0       05:20:00     05:20:00            11\n4: CPTM L07-0       05:28:00     05:28:00            12\n5: CPTM L07-0       05:36:00     05:36:00            13\n6: CPTM L07-0       05:44:00     05:44:00            14\n\n\nFiltering using a spatial extent\nFinally, {gtfstools} also includes a function that allows one to filter a GTFS object using a spatial polygon. filter_by_sf() takes an sf/sfc object (spatial representation created by the {sf} package), or its bounding box, and keeps the entries related to trips depending on their position in relation to that spatial polygon. Although this might seem complicated, this filtering process is fairly easy to grasp once we illustrate it with an example. To demonstrate this function, we are going to filter SPTrans’ feed using the bounding box of shape 68962. With the code snippet below we show the spatial distribution of unfiltered data along with the bounding box in red:\n\nlibrary(ggplot2)\n\n# creates a polygon with the bounding box of shape 68962\nshape_68962 <- convert_shapes_to_sf(gtfs, shape_id = \"68962\")\nbbox <- sf::st_bbox(shape_68962)\nbbox_geometry <- sf::st_as_sfc(bbox)\n\n# creates a geometry with all the shapes described in the gtfs\nall_shapes <- convert_shapes_to_sf(gtfs)\n\nggplot() +\n  geom_sf(data = all_shapes) +\n  geom_sf(data = bbox_geometry, fill = NA, color = \"red\") +\n  theme_minimal()\n\n\n\n\nPlease note that we have used the convert_shapes_to_sf() function, also included in {gtfstools}, to convert the shapes described in the feed into a sf spatial object. By default, filter_by_sf() keeps all entries related to trips that intersect with the specified polygon:\n\nfiltered_gtfs <- filter_by_sf(gtfs, bbox)\nfiltered_shapes <- convert_shapes_to_sf(filtered_gtfs)\n\nggplot() +\n  geom_sf(data = filtered_shapes) +\n  geom_sf(data = bbox_geometry, fill = NA, color = \"red\") +\n  theme_minimal()\n\n\n\n\nWe can, however, specify different spatial operations to filter the feed. The code below shows how we can keep the entries related to trips that are contained by the specified polygon:\n\nfiltered_gtfs <- filter_by_sf(gtfs, bbox, spatial_operation = sf::st_contains)\nfiltered_shapes <- convert_shapes_to_sf(filtered_gtfs)\n\nggplot() +\n  geom_sf(data = filtered_shapes) +\n  geom_sf(data = bbox_geometry, fill = NA, color = \"red\") +\n  theme_minimal()"
  },
  {
    "objectID": "5_gtfstools.en.html#validating-gtfs-data",
    "href": "5_gtfstools.en.html#validating-gtfs-data",
    "title": "5  GTFS data manipulation and visualization",
    "section": "5.4 Validating GTFS data",
    "text": "5.4 Validating GTFS data\nTransport planners and researchers often want to assess the quality of the GTFS data they are producing or using in their analyses. Are feeds structured following the best practices adopted by the larger GTFS community? Are tables and columns adequately formatted? Is the information described by the feed reasonable (trip speeds, stop locations, etc)? These are some of the questions that may arise when dealing with GTFS data.\nTo answer these and other questions, {gtfstools} includes the validate_gtfs() function. This function works as a wrapper to MobilityData’s Canonical GTFS Validator. The validator requires Java version 11 or higher to run. For more information on how to check the installed version of Java in your computer or on how to install the required version, please check Chapter 3.\nUsing validate_gtfs() is very simple. First, we need to download the validator. To do this, we use the download_validator() function, included in the package, which receives the path to the directory where the validator should be saved to, and the version of the validator that should be downloaded (defaults to the latest available). The function returns the path to the downloaded validator:\n\ntmpdir <- tempdir()\n\nvalidator_path <- download_validator(tmpdir)\nvalidator_path\n\n[1] \"/tmp/RtmpMvq58z/gtfs-validator-v4.0.0.jar\"\n\n\nThe second (and final) step consists in actually validating the GTFS data with validate_gtfs(). This function supports GTFS data in different formats: (a) as a GTFS object in an R session, (b) as a path to a local GTFS file in .zip format, (c) as an URL pointing to a feed or (d) as a directory containing unzipped GTFS tables. The function also takes a path to a directory where the validation result should be saved to, and the path to the validator that should be used in the process. In the example below we validate SPTrans’ feed from its path:\n\noutput_dir <- tempfile(\"gtfs_validation\")\n\nvalidate_gtfs(\n  path,\n  output_path = output_dir,\n  validator_path = validator_path\n)\n\nlist.files(output_dir)\n\n[1] \"report.html\"           \"report.json\"           \"system_errors.json\"   \n[4] \"validation_stderr.txt\"\n\n\nWe can see that the validation process generates a few output files:\n\nreport.html, shown in Figure 5.1, which summarizes the validation result in a nicely formatted HTML page (only available with validator version 3.1.0 or higher);\nreport.json, which summarizes the same information, but in JSON format, which can be used to programatically parse and process the results;\nsystem_errors.json, which summarizes eventual system errors that may have happened during the validation process and may compromise the results;\nvalidation_stderr.txt, which lists informative messages sent by the validator tool, including a list of the tests conducted, eventual error messages, etc2.\n\n\n\n\n\n\nFigure 5.1: Validation report example"
  },
  {
    "objectID": "5_gtfstools.en.html#gtfstools-workflow-example-spatial-visualization-of-headways",
    "href": "5_gtfstools.en.html#gtfstools-workflow-example-spatial-visualization-of-headways",
    "title": "5  GTFS data manipulation and visualization",
    "section": "5.5 {gtfstools} workflow example: spatial visualization of headways",
    "text": "5.5 {gtfstools} workflow example: spatial visualization of headways\nWe have shown in previous sections that {gtfstools} offers a large toolset to process and analyze GTFS files. The package also includes many other functions that could not be shown in this book due to space constraints. The complete list of functions available in {gtfstools} can be checked at the package website.\nIn this final section of the chapter, we illustrates a workflow that combines various functions of {gtfstools} together to answer the following question: how are the times between vehicles operating the same route (the headways) spatially distributed in SPTrans’ GTFS?\nFirst, we need to define the scope of our analysis. In this example, we are only going to consider the services operating during the morning peak, between 7am and 9am, on a typical tuesday. To do this, we need to filter our feed:\n\ngtfs <- read_gtfs(path)\n\n# filters the GTFS\nfiltered_gtfs <- gtfs |>\n  remove_duplicates() |>\n  filter_by_weekday(\"tuesday\") |>\n  filter_by_time_of_day(from = \"07:00:00\", to = \"09:00:00\")\n\n# cheking the result\nfiltered_gtfs$frequencies[trip_id == \"2105-10-0\"]\n\n     trip_id start_time end_time headway_secs\n1: 2105-10-0   07:00:00 07:59:00          900\n2: 2105-10-0   08:00:00 08:59:00         1200\n\nfiltered_gtfs$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:        USD      1       1         1        1      1        1      1\n2:        U__      1       1         1        1      1        0      0\n   start_date   end_date\n1: 2008-01-01 2020-05-01\n2: 2008-01-01 2020-05-01\n\n\nNext, we need to calculate the headways within this time interval. This information can be found at the frequencies table, though there is a factor we have to pay attention to: each trip is associated to more than one headway, as shown above (one entry for the 7am to 7:59am interval and another for the 8am to 8:59am interval). To solve this we are going to calculate the average headway from 7am to 9am.\nThe first few frequencies rows in SPTrans’ feed seem to suggest that the headways are always associated to one-hour intervals, but this is neither a rule set in the official specification nor necessarily a practice adopted by other feed producers. Thus, we have to calculate the average headways weighted by the time duration of each headway. To do this, we need to multiply each headway by the size of the time interval during which it is valid, sum these multiplication results for each trip, and then divide the total amount by the total time interval (two hours in our case). To calculate the time intervals within which the headways are valid, we use the convert_time_to_seconds() function to calculate the start and end time of the time interval in seconds and subtract the latter by the former:\n\nfiltered_gtfs <- convert_time_to_seconds(filtered_gtfs)\n\n# check how the results look like for a particular trip id\nfiltered_gtfs$frequencies[trip_id == \"2105-10-0\"]\n\n     trip_id start_time end_time headway_secs start_time_secs end_time_secs\n1: 2105-10-0   07:00:00 07:59:00          900           25200         28740\n2: 2105-10-0   08:00:00 08:59:00         1200           28800         32340\n\nfiltered_gtfs$frequencies[, time_interval := end_time_secs - start_time_secs]\n\nThen we calculate the average headway:\n\naverage_headway <- filtered_gtfs$frequencies[,\n  .(average_headway = weighted.mean(x = headway_secs, w = time_interval)),\n  by = trip_id\n]\n\naverage_headway[trip_id == \"2105-10-0\"]\n\n     trip_id average_headway\n1: 2105-10-0            1050\n\nhead(average_headway)\n\n      trip_id average_headway\n1: CPTM L07-0             360\n2: CPTM L07-1             360\n3: CPTM L08-0             300\n4: CPTM L08-1             300\n5: CPTM L09-0             240\n6: CPTM L09-1             240\n\n\nNow we need to retrieve each trip geometry to later join this data to the average headways. To do this, we will use the get_trip_geometry() function, which returns the spatial geometries of the trips in the feed. This function allows us to retrieve the geometries for selected trip ids, so we are only going to apply the procedure to those trip ids present in the average headways table:\n\nselected_trips <- average_headway$trip_id\n\ngeometries <- get_trip_geometry(\n  filtered_gtfs,\n  trip_id = selected_trips,\n  file = \"shapes\"\n)\n\nhead(geometries)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -46.98404 ymin: -23.73644 xmax: -46.63535 ymax: -23.19474\nGeodetic CRS:  WGS 84\n     trip_id origin_file                       geometry\n1 CPTM L07-0      shapes LINESTRING (-46.63535 -23.5...\n2 CPTM L07-1      shapes LINESTRING (-46.87255 -23.1...\n3 CPTM L08-0      shapes LINESTRING (-46.64073 -23.5...\n4 CPTM L08-1      shapes LINESTRING (-46.98404 -23.5...\n5 CPTM L09-0      shapes LINESTRING (-46.77604 -23.5...\n6 CPTM L09-1      shapes LINESTRING (-46.69711 -23.7...\n\n\nFinally, we need to join the average headway data to the geometries before plotting a map. In the example below, we plot the trips on a map where the headway of each trip is represented by the variations in colors and line widths:\n\ngeoms_with_headways <- merge(\n  geometries,\n  average_headway,\n  by = \"trip_id\"\n)\n\nggplot(geoms_with_headways) +\n  geom_sf(aes(color = average_headway, size = average_headway), alpha = 0.8) +\n  scale_color_gradient(high = \"#132B43\", low = \"#56B1F7\") +\n  theme_minimal()\n\n\n\n\nAs we can see, {gtfstools} turns analyzing GTFS feeds into a simple task that requires only basic knowledge of table manipulation packages (such as {data.table} or {dplyr}). The example shown in this section illustrates how one could use many of the package’s functions together to reveal important aspects of public transport systems specified in the GTFS format."
  },
  {
    "objectID": "s4_avaliacao_impacto.en.html",
    "href": "s4_avaliacao_impacto.en.html",
    "title": "SECTION 4: Impact assessment of transportation projects",
    "section": "",
    "text": "Although accessibility analyses have been frequently used in scientific literature for more than two decades, only recently transport agencies and decision makers have begun to pay more attention to urban accessibility issues in their day-to-day planning and in the operation of transport systems (Papa et al. 2015; Boisjoly and El-Geneidy 2017). Much of this is due to the difficulty of incorporating accessibility analyses to project evaluation methods and planning activities (Silva et al. 2017; Büttner 2021).\nIn this section, we use a subway expansion project in Fortaleza (Brazil) as a case study to illustrate how to use the methods and R packages presented in the previous chapters to assess the accessibility impacts of transport infrastructure projects. The Chapter 6 presents a method for evaluating the effect of transportation investments not only on the overall accessibility level of the population, but also for examining how this effect is distributed geographically and among different socioeconomic groups, ultimately impacting disparities in access to opportunities. The application of the method involves the use and manipulation of different GTFS files, the calculation of travel time matrices, the decision-making behind the choice of which accessibility measure to use, the estimation of accessibility levels, the spatial visualization of these estimates and the calculation and analysis of inequality indicators. Therefore, this case study covers numerous topics discussed in the book and serves as a practical example of the concepts presented thus far.\nIt is important to mention that the evaluation of transportation projects, investments or policies should ideally encompass a wide range of criteria. These criteria range from aspects of social participation in policy and project formulation to their environmental, economic and social impacts. While an evaluation of accessibility impact is very important for characterizing the potential benefits and performance of a transport network, it offers a limited perspective of the effects of a given policy. Evaluations of this type should therefore complement and be accompanied by other analyses that investigate the other impacts that a transportation project might have.\n\n\n\n\nBoisjoly, Geneviève, and Ahmed M. El-Geneidy. 2017. “How to Get There? A Critical Assessment of Accessibility Objectives and Indicators in Metropolitan Transportation Plans.” Transport Policy 55 (April): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nBüttner, Benjamin. 2021. “Accessibility Tools for Transport Policy and Planning.” In International Encyclopedia of Transportation, edited by Roger Vickerman, 83–86. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10618-9.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, and Angela Hull. 2015. “Accessibility Instruments for Planning Practice: A Review of European Experiences.” Journal of Transport and Land Use, June. https://doi.org/10.5198/jtlu.2015.585.\n\n\nSilva, Cecília, Luca Bertolini, Marco te Brömmelstroet, Dimitris Milakis, and Enrica Papa. 2017. “Accessibility Instruments in Planning Practice: Bridging the Implementation Gap.” Transport Policy 53 (January): 135–45. https://doi.org/10.1016/j.tranpol.2016.09.006."
  },
  {
    "objectID": "6_cenarios_transporte.en.html",
    "href": "6_cenarios_transporte.en.html",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "",
    "text": "In this chapter, we will illustrate how to combine the material taught in previous chapters to assess the impact of a transport infrastructure project on urban accessibility. To measure the impact of a transport project, we need to compare the accessibility levels both before and after the project implementation. We need, therefore:\nIn this chapter, we will look at each one of these steps in detail. First, a brief presentation of our case study."
  },
  {
    "objectID": "6_cenarios_transporte.en.html#case-study-presentation",
    "href": "6_cenarios_transporte.en.html#case-study-presentation",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.1 Case study presentation",
    "text": "6.1 Case study presentation\nAs a case study, we will assess Fortaleza’s subway East Line project (Figure 6.1). The city of Fortaleza is the capital of Ceará state, located in Northeast of Brazil. With an estimated population of 2.7 million inhabitants, Fortaleza is the fifth most populous city in the country.\n\n\n\n\n\nFigure 6.1: Fortaleza’s rapid transit network. Source - Braga et al. (2022)\n\n\n\n\nThe East Line is one of the biggest recent investments in Fortaleza’s transport system. The line extends for 7.3 km and connects the city center to the Papicu neighborhood, connecting the South and West subway lines to the Light Rail and Papicu’s bus terminal (Figure 6.2). The East Line is still under construction as of this book’s publication date, so we will be conducting an ex-ante analysis in this chapter - i.e. one in which we assess the future impacts of a project on urban accessibility conditions. This type of analysis differs from ex-post analyses, which are used to assess the impact of projects that have already been implemented.\n\n\n\n\n\nFigure 6.2: East Line in detail. Source - Braga et al. (2022)\n\n\n\n\n\n\n\n\n\n\nIt’s important to note that East Line’s implementation will also be followed by changes to the frequency of subway’s South and West lines and of Parangaba-Mucuripe light rail, in addition to cuts and adjustments on the municipal bus system, as detailed in Fortaleza’s Sustainable Accessibility Plan (Pasfor)1. For didactic purposes, however, the bus system’s changes were not incorporated into our analyses in this book. Therefore, the case study showcased in this chapter looks at simplified scenarios, in which only East Line’s implementation and the changes to other subway and light rail corridors are considered. For a more complete assessment that considers all the changes foreseen in Pasfor, please check Braga et al. (2022) (in Portuguese).\n\n\n\nFigure 6.3 shows that Fortaleza’s population is mainly distributed in the central and western parts of the city, although some relatively high density neighborhoods can also be seen in the southeastern region. Generally, wealthier groups (shown in blue in the income decile distribution map) tend to reside in the expanded city center, extending towards the southeast, while low-income groups (in red) are mainly located in the western and southern peripheries. Most of the formal jobs are distributed along key avenues, with higher concentrations in the city center. In contrast, public highschools are more equally distributed throughout the city.\n\n\n\n\n\n\n\n\nFigure 6.3: Distribution of population, formal jobs, schools and rapid transit corridors in Fortaleza"
  },
  {
    "objectID": "6_cenarios_transporte.en.html#gtfs-data-used-in-the-analysis",
    "href": "6_cenarios_transporte.en.html#gtfs-data-used-in-the-analysis",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.2 GTFS data used in the analysis",
    "text": "6.2 GTFS data used in the analysis\nIn this analysis, we will use the GTFS files made available by Fortaleza’s Urban Transport Company (Etufor) and Fortaleza’s Subway Company (Metrofor). These feeds describe the public transport network that operated in Fortaleza in October 2019. To access these data, we will download the feeds with the {httr} package with the code below:\n\nmetrofor_path <- tempfile(\"metrofor\", fileext = \".zip\")\netufor_path <- tempfile(\"etufor\", fileext = \".zip\")\n\n# downloads metrofor data\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_metrofor_2021-01.zip\",\n  httr::write_disk(metrofor_path)\n)\n# downloads etufor data\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_for_etufor_2019-10.zip\",\n  httr::progress(),\n  httr::write_disk(etufor_path)\n)\n\nTo simulate the implementation of the subway’s East Line, we also need a feed that describes its operation. This feed must contain some key information, such as the shape of the corridor, the stop locations, the travel time between stations and the frequency of trips. In this example, we will use a GTFS file previously created by the Access to Opportunities team for a more detailed assessment of the accessibility impacts caused by this project (Braga et al. 2022). Just like Etufor’s and Metrofor’s feeds, this feed has been published in the book GitHub repository and can be downloaded with the code below:\n\neast_line_path <- tempfile(\"east_line\", fileext = \".zip\")\n\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/gtfs_linha_leste.zip\",\n  httr::write_disk(east_line_path)\n)\n\nEtufor’s and Metrofor’s feeds, however, do not include the changes to the public transport system foreseen in the Pasfor. Therefore, we have to edit these feeds using the {gtfstools} package to take those changes into consideration in the post-implementation scenario.\nIn our case study, we will consider the changes to frequencies of the subway and light rail services based on Pasfor: an increase in the South Line subway frequency from four to ten trips per hour, an increase in the West Line subway frequency from two to five trips per hour and an increase in the Parangaba-Mucuripe light rail frequency from two to eight trips per hour. As we are only considering changes to the subway and light rail services, we only need to edit Metrofor’s GTFS. First, we need to read this feed with read_gtfs() and understand how the trips are described. To do so, we are going to look at how the routes, trips and calendar tables are structured.\n\nlibrary(gtfstools)\n\nmetrofor_gtfs <- read_gtfs(metrofor_path)\n\nmetrofor_gtfs$routes[, .(route_id, route_long_name)]\n\n   route_id      route_long_name\n1:        8 VLT Parangaba Papicu\n2:        6            Linha Sul\n3:        7          Linha Oeste\n\nmetrofor_gtfs$trips[, .N, by = .(route_id, direction_id, service_id)]\n\n   route_id direction_id service_id  N\n1:        7            0          4 15\n2:        7            1          4 15\n3:        6            0          4 63\n4:        6            1          4 64\n5:        8            0          4 29\n6:        8            1          4 29\n\nmetrofor_gtfs$calendar\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          4      1       1         1        1      1        1      0\n   start_date   end_date\n1: 2020-01-01 2021-12-31\n\n\nThe feed describes three distinct routes: the two subway corridors and the light rail corridor. Since the feed does not include a frequencies table, each route is described by many trips that depart at different times of the day. There is information for trips in both trip directions, and they are all associated with the same service that operates on business days and saturdays.\nThe strategy we are going to adopt to make the necessary changes to the feed include three steps:\n\nFirst, we are going to filter the Metrofor feed to keep only one trip per direction for each route. This trip will tell us the travel time each trip takes between its stops.\nThen we are going to add a frequencies table to the GTFS object, in which we are going to describe the frequency of each trip.\nFinally, we are going to “convert” the recently-added frequencies entries to the timetables described in stop_times. This conversion will be used to keep intact the original feed, which describes trips using only the stop_times table.\n\nStep 1: To keep only one trip per direction for each route, we need to filter the feed using filter_by_trip_id(). To do so, we are going to identify the first trip entry per route and per direction and use the function to keep only these trips.\n\n# identifies the table index in which the first entries per route and per\n# direction are located at\nindex <- metrofor_gtfs$trips[, .I[1], by = .(route_id, direction_id)]$V1\n\n# selects the id of each row\nselected_trips <- metrofor_gtfs$trips[index]$trip_id\n\n# filters the gtfs to keep only the trips above\nfiltered_gtfs <- filter_by_trip_id(\n  metrofor_gtfs,\n  trip_id = selected_trips\n)\n\nfiltered_gtfs$trips\n\n   trip_id     trip_headsign direction_id block_id shape_id service_id route_id\n1:       4           Caucaia            0                            4        7\n2:      19      Moura Brasil            1                            4        7\n3:      34 Carlito Benevides            0                            4        6\n4:      96    Chico da Silva            1                            4        6\n5:     159              Iate            0                            4        8\n6:     181         Parangaba            1                            4        8\n\n\nTo facilitate the data manipulation, we are going to change the trip ids, identifying the corridor and the direction in which they operate. We need to make this change both in the trips and the stop_times tables.\n\nfiltered_gtfs$stop_times[\n  ,\n  trip_id := data.table::fcase(\n    trip_id == \"4\", \"west_subway_0\",\n    trip_id == \"19\", \"west_subway_1\",\n    trip_id == \"34\", \"south_subway_0\",\n    trip_id == \"96\", \"south_subway_1\",\n    trip_id == \"159\", \"light_rail_0\",\n    trip_id == \"181\", \"light_rail_1\"\n  )\n]\n\nfiltered_gtfs$trips[\n  ,\n  trip_id := data.table::fcase(\n    trip_id == \"4\", \"west_subway_0\",\n    trip_id == \"19\", \"west_subway_1\",\n    trip_id == \"34\", \"south_subway_0\",\n    trip_id == \"96\", \"south_subway_1\",\n    trip_id == \"159\", \"light_rail_0\",\n    trip_id == \"181\", \"light_rail_1\"\n  )\n]\n\nfiltered_gtfs$trips\n\n          trip_id     trip_headsign direction_id block_id shape_id service_id\n1:  west_subway_0           Caucaia            0                            4\n2:  west_subway_1      Moura Brasil            1                            4\n3: south_subway_0 Carlito Benevides            0                            4\n4: south_subway_1    Chico da Silva            1                            4\n5:   light_rail_0              Iate            0                            4\n6:   light_rail_1         Parangaba            1                            4\n   route_id\n1:        7\n2:        7\n3:        6\n4:        6\n5:        8\n6:        8\n\n\nStep 2: Now we need to add a frequencies table describing the frequency of each trip. Note however that the GTFS specification requires us to list the headway of each trip, and not its frequency. The headway is the inverse of the frequency, so we need to divide the interval of one hour (3600 seconds) by the frequency of each route (10 trips/hour for the South Line, 5 trips/hours for the West Line and 8 trips/hours for the light rail). As a result, we have that the headway of the South Line, West Line and the light rail will be, respectively, 360, 720 and 450 seconds. With the code below, we create a frequencies table using the {tibble} and {data.table} packages.\n\nfrequencies <- tibble::tribble(\n  ~trip_id,           ~start_time, ~end_time,  ~headway_secs, ~exact_times,\n  \"west_subway_0\",  \"06:00:00\",  \"09:00:00\", 720L,              1,\n  \"west_subway_1\",  \"06:00:00\",  \"09:00:00\", 720L,              1,\n  \"south_subway_0\", \"06:00:00\",  \"09:00:00\", 360L,              1,\n  \"south_subway_1\", \"06:00:00\",  \"09:00:00\", 360L,              1,\n  \"light_rail_0\",   \"06:00:00\",  \"09:00:00\", 450L,              1,\n  \"light_rail_1\",   \"06:00:00\",  \"09:00:00\", 450L,              1\n)\n\n# converts the table to data.table\ndata.table::setDT(frequencies)\n\n# assigns table to gtfs object\nfiltered_gtfs$frequencies <- frequencies\n\nTo keep things simple in this case study, we assume that these headways are valid between 06:00h and 09:00h. This assumption works in our case because we are only going to calculate the travel time matrix during the morning peak. If we wanted to calculate travel times in other periods of the day or to use this GTFS to examine operation of these corridors throughout the day, however, we would have to list the headways for the rest of the day as well. The value 1 in the exact_times column determines that the trips’ timetables during the specified period must follow the headway exactly, not approximately (for more details, please refer to the frequencies table description in Chapter 4).\nStep 3: The GTFS object that results from the modifications done up until this stage can already be used to calculate travel time matrices. However, in order to restore the original feed’s characteristic of not having a frequencies table, we “convert” this table’s entries into timetables described in stop_times. To do so, we use the frequencies_to_stop_times() function. As all trips in the feed are converted, the frequencies table is removed from the GTFS object.\n\nfiltered_gtfs <- frequencies_to_stop_times(filtered_gtfs)\n\nfiltered_gtfs$frequencies\n\nNULL\n\n\nTo check if the data manipulation worked as intended, we look at the West Line trips that head towards Caucaia (whose direction_id is 0). With a frequency of 5 trips/hour between 06:00h and 09:00h, the trips table must contain exactly 16 entries related to this route (5 trips/hour during 3 hours plus a trip starting at 09:00h).\n\nwest_line_subway <- filtered_gtfs$trips[grepl(\"west_subway_0\", trip_id)]\n\nnrow(west_line_subway)\n\n[1] 16\n\nwest_line_subway$trip_id\n\n [1] \"west_subway_0_1\"  \"west_subway_0_2\"  \"west_subway_0_3\"  \"west_subway_0_4\" \n [5] \"west_subway_0_5\"  \"west_subway_0_6\"  \"west_subway_0_7\"  \"west_subway_0_8\" \n [9] \"west_subway_0_9\"  \"west_subway_0_10\" \"west_subway_0_11\" \"west_subway_0_12\"\n[13] \"west_subway_0_13\" \"west_subway_0_14\" \"west_subway_0_15\" \"west_subway_0_16\"\n\n\nThe stop_times table, in turn, must list each one of these trips departing every 12 minutes (equivalent to a 450 seconds headway). Thus, we need to check the first entry of the timetable of each one of the trips listed above.\n\nwest_subway_trips <- west_line_subway$trip_id\n\n# identifies the row of the first entries of the trips above\ntrip_indices <- filtered_gtfs$stop_times[\n  trip_id %in% west_subway_trips,\n  .I[1],\n  by = trip_id\n]$V1\n\nfiltered_gtfs$stop_times[trip_indices, .(trip_id, departure_time)]\n\n             trip_id departure_time\n 1:  west_subway_0_1       06:00:00\n 2:  west_subway_0_2       06:12:00\n 3:  west_subway_0_3       06:24:00\n 4:  west_subway_0_4       06:36:00\n 5:  west_subway_0_5       06:48:00\n 6:  west_subway_0_6       07:00:00\n 7:  west_subway_0_7       07:12:00\n 8:  west_subway_0_8       07:24:00\n 9:  west_subway_0_9       07:36:00\n10: west_subway_0_10       07:48:00\n11: west_subway_0_11       08:00:00\n12: west_subway_0_12       08:12:00\n13: west_subway_0_13       08:24:00\n14: west_subway_0_14       08:36:00\n15: west_subway_0_15       08:48:00\n16: west_subway_0_16       09:00:00\n\n\nWe can see that the “conversion” from frequencies to stop_times worked correctly, allowing us to use this modified feed to calculate the travel time matrix in the post-implementation scenario. To do this, we need to save this GTFS object to disk in .zip format, just like the rest of the feeds we are going to use. We use the write_gtfs() function for that.\n\nmodified_metrofor_path <- tempfile(\"modified_metrofor\", fileext = \".zip\")\n\nwrite_gtfs(filtered_gtfs, modified_metrofor_path)\n\nNow, we have four distinct GTFS files:\n\nEtufor’s feed, describing the bus system that operated in October 2019;\nMetrofor’s feed, describing the operation in October 2019 of the subway (South and West lines) and of the light rail;\nMetrofor’s modified feed, describing the future operation of South and West subway lines and of the light rail, as foreseen in Pasfor;\nEast Line’s feed, describing the future operation of the subway East Line.\n\nThese four GTFS files will be used to calculate the accessibility conditions in Fortaleza before and after the implementation of the East Line. In the pre-implementation scenario, we are going to calculate the travel time matrices using only the October 2019 feeds from Metrofor and Etufor. In the post-implementation scenario, we are going to use Etufor’s feed, Metrofor’s modified feed with updated frequencies and the feed of the new East Line."
  },
  {
    "objectID": "6_cenarios_transporte.en.html#calculating-the-travel-time-matrices",
    "href": "6_cenarios_transporte.en.html#calculating-the-travel-time-matrices",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.3 Calculating the travel time matrices",
    "text": "6.3 Calculating the travel time matrices\nAfter making the necessary changes to the GTFS files and defining which feeds we are going to use in each scenario, we need to calculate the travel time matrices that we are going to use later to estimate the accessibility levels. To do this, we are going to use the travel_time_matrix() function from {r5r}, previously presented in Chapter 3.\nBefore calculating the travel matrices, however, we need to organize our data to use them in `{r5r}. With the code below, we create a separate directory for each scenario (before and after implementation) in which we save the files used in the routing process in each case:\n\n# creates root analysis directory\nanalysis_dir <- \"impact_analysis\"\ndir.create(analysis_dir)\n\n# creates scenarios directories\nbefore_dir <- file.path(analysis_dir, \"before\")\nafter_dir <- file.path(analysis_dir, \"after\")\n\ndir.create(before_dir)\ndir.create(after_dir)\n\n# copy relevant files to \"before\" scenario directory\nfile.copy(from = etufor_path, to = file.path(before_dir, \"etufor.zip\"))\nfile.copy(from = metrofor_path, to = file.path(before_dir, \"metrofor.zip\"))\n\n# copy relevant files to \"after\" scenario directory\nfile.copy(from = etufor_path, to = file.path(after_dir, \"etufor.zip\"))\nfile.copy(\n  from = modified_metrofor_path,\n  to = file.path(after_dir, \"modified_metrofor.zip\")\n)\nfile.copy(\n  from = east_line_path,\n  to = file.path(after_dir, \"east_line.zip\")\n)\n\n# visualizes file structure\nfs::dir_tree(analysis_dir)\n\n\n\n\n\n\nimpact_analysis\n├── after\n│   ├── east_line.zip\n│   ├── etufor.zip\n│   ├── linha_leste.zip\n│   ├── metrofor.zip\n│   └── modified_metrofor.zip\n└── before\n    ├── etufor.zip\n    └── metrofor.zip\n\n\n\n\n\nTo estimate the travel times in our study area, we also need a file representing the local street network extracted from OpenStreetMap in .pbf format. Optionally, we are also going to use a file representing the local topography, in .tif format. These data sets, just like the GTFS files, can also be downloaded from the book repository. Assuming that the implementation of the East Line will not affect the street network, the pedestrian infrastructure and the topography in the region, we can use the same files to calculate both travel time matrices. With the code below, we download these data sets and copy the files to both scenarios’ directories.\n\n# crates temporary files to save data\npbf_path <- tempfile(\"street_network\", fileext = \".osm.pbf\")\ntif_path <- tempfile(\"topography\", fileext = \".tif\")\n\n# downloads OSM data\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/fortaleza.osm.pbf\",\n  httr::write_disk(pbf_path)\n)\n# downloads topography data\nhttr::GET(\n  \"https://github.com/ipeaGIT/intro_access_book/releases/download/data_1st_edition/topografia3_for.tif\",\n  httr::write_disk(tif_path)\n)\n# copies files to both scenarios' directories\nfile.copy(from = pbf_path, to = file.path(before_dir, \"street_network.osm.pbf\"))\nfile.copy(from = pbf_path, to = file.path(after_dir, \"street_network.osm.pbf\"))\n\nfile.copy(from = tif_path, to = file.path(before_dir, \"topography.tif\"))\nfile.copy(from = tif_path, to = file.path(after_dir, \"topography.tif\"))\n\n\n\n\n\nfs::dir_tree(analysis_dir)\n\nimpact_analysis\n├── after\n│   ├── east_line.zip\n│   ├── etufor.zip\n│   ├── linha_leste.zip\n│   ├── metrofor.zip\n│   ├── modified_metrofor.zip\n│   ├── street_network.osm.pbf\n│   └── topography.tif\n└── before\n    ├── etufor.zip\n    ├── metrofor.zip\n    ├── street_network.osm.pbf\n    └── topography.tif\n\n\n\n\n\nWith the data properly organized, we can now start calculating the travel time matrices. The first step is to use the street network, public transport and topography data to build the transport network used by {r5r} in the routing process. To do this, we use the setup_r5() function, which also returns a connection to R5. With the code below, we build two networks, one for each scenario:\n\n# allocates memory to be used by Java Virtual Machine\noptions(java.parameters = \"-Xmx4G\")\n\nlibrary(r5r)\n\nr5r_core_before <- setup_r5(before_dir, verbose = FALSE)\nr5r_core_after <- setup_r5(after_dir, verbose = FALSE)\n\nHaving built the transport networks, we can now proceed to the actual travel time matrices calculation. In this step, we are going to use the centroids of a hexagonal grid covering Fortaleza as our origins and destinations. We are going to use the hexagonal grid made available by {aopdata} (more details on the package are presented in Section 5). Each grid hexagon covers an area of 0.11 km², similar to a city block, which allows for results at a fine spatial resolution.\nFor a proper comparison between both scenarios, we need to calculate the two travel matrices using the same parameters. We consider trips by foot or by public transport, allow walking trips of at most 30 minutes to access or egress from public transport stops and limit the maximum trip duration to 60 minutes. We also consider a departure time of 7am, during the morning peak of a typical monday:\n\n# downloads spatial grid data\nfortaleza_grid <- aopdata::read_grid(\"Fortaleza\")\n\n# gets cells' centroids\npoints <- sf::st_centroid(fortaleza_grid)\n\n# renames the column holding the cell ids\nnames(points)[1] <- \"id\"\n\n# calculates the \"before\" scenario travel time matrix\nttm_before <- travel_time_matrix(\n  r5r_core_before,\n  origins = points,\n  destinations = points,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"02-03-2020 07:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 60,\n  verbose = FALSE,\n  progress = FALSE\n)\n\n# calculates the \"after\" scenario travel time matrix\nttm_after <- travel_time_matrix(\n  r5r_core_after,\n  origins = points,\n  destinations = points,\n  mode = c(\"WALK\", \"TRANSIT\"),\n  departure_datetime = as.POSIXct(\n    \"02-03-2020 07:00:00\",\n    format = \"%d-%m-%Y %H:%M:%S\"\n  ),\n  max_walk_time = 30,\n  max_trip_duration = 60,\n  verbose = FALSE,\n  progress = FALSE\n)\n\nhead(ttm_before)\n\n           from_id           to_id travel_time_p50\n1: 89801040323ffff 89801040323ffff               2\n2: 89801040323ffff 89801040327ffff              22\n3: 89801040323ffff 8980104032bffff              32\n4: 89801040323ffff 8980104032fffff              15\n5: 89801040323ffff 89801040333ffff              10\n6: 89801040323ffff 89801040337ffff              19\n\nhead(ttm_after)\n\n           from_id           to_id travel_time_p50\n1: 89801040323ffff 89801040323ffff               2\n2: 89801040323ffff 89801040327ffff              22\n3: 89801040323ffff 8980104032bffff              32\n4: 89801040323ffff 8980104032fffff              15\n5: 89801040323ffff 89801040333ffff              10\n6: 89801040323ffff 89801040337ffff              19\n\n\n\n\n\nOn first sight, our matrices look exactly the same: all travel times shown in the samples above are identical. This happens because the subway expansion project is limited to a relatively small area near Fortaleza’s city center, and the changes to the frequencies of the other subway and light rail corridors mainly affect these corridors’ immediate surroundings. Thus, many trips that take place in the city are not affected by those transport interventions. The travel time between many origin-destination pairs, however, are impacted:\n\n# joins both scenarios' travel times in the same data set\ncomparison <- merge(\n  ttm_before,\n  ttm_after,\n  by = c(\"from_id\", \"to_id\"),\n  suffixes = c(\"_before\", \"_after\")\n)\n\n# shows the OD pairs whose travel times got faster\ncomparison[travel_time_p50_before < travel_time_p50_after]\n\n           from_id           to_id travel_time_p50_before travel_time_p50_after\n1: 8980104c12fffff 8980104c13bffff                     15                    16\n2: 8980104ce93ffff 8980104c13bffff                     16                    17"
  },
  {
    "objectID": "6_cenarios_transporte.en.html#calculating-accessibility-levels-in-both-scenarios",
    "href": "6_cenarios_transporte.en.html#calculating-accessibility-levels-in-both-scenarios",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.4 Calculating accessibility levels in both scenarios",
    "text": "6.4 Calculating accessibility levels in both scenarios\nCalculating the accessibility levels in both scenarios is really simple, requiring only some basic data processing before we apply one of the functions from the {accessibility} package to estimate accessibility. To facilitate the data manipulation, we merge the travel time matrices of both scenarios into a single table, and identify each scenario with the scenario column:\n\nttm <- rbind(ttm_before, ttm_after, idcol = \"scenario\")\nttm[, scenario := factor(scenario, labels = c(\"before\", \"after\"))]\n\nttm\n\n         scenario         from_id           to_id travel_time_p50\n      1:   before 89801040323ffff 89801040323ffff               2\n      2:   before 89801040323ffff 89801040327ffff              22\n      3:   before 89801040323ffff 8980104032bffff              32\n      4:   before 89801040323ffff 8980104032fffff              15\n      5:   before 89801040323ffff 89801040333ffff              10\n     ---                                                         \n3775198:    after 8980107b6dbffff 8980107b6cbffff               8\n3775199:    after 8980107b6dbffff 8980107b6cfffff              15\n3775200:    after 8980107b6dbffff 8980107b6d3ffff               9\n3775201:    after 8980107b6dbffff 8980107b6d7ffff              16\n3775202:    after 8980107b6dbffff 8980107b6dbffff               0\n\n\nTo calculate the accessibility levels, we need a table with some land used data for Fortaleza. We can download such data using the read_landuse() function from the {aopdata} package, which brings the population and opportunities count in each one of the hexagons that composes the previously downloaded spatial grid.\n\nfortaleza_data <- aopdata::read_landuse(\n  \"Fortaleza\",\n  showProgress = FALSE\n)\n\nFor demonstration purposes, we calculate the accessibility to jobs and public highschools in our study area. The information on the total number of jobs and public highschools in each hexagon is listed in the columns T001 and E004, respectively. We rename them to facilitate their identification. We also keep in the land use data only the few columns that we are going to use latter, including the column P001, which lists the total population in each hexagon, and column R003, which tells the income decile classification of each hexagon:\n\ncols_to_keep <- c(\"id\", \"jobs\", \"schools\", \"population\", \"decile\")\ndata.table::setnames(\n  fortaleza_data,\n  old = c(\"id_hex\", \"T001\", \"E004\", \"P001\", \"R003\"),\n  new = cols_to_keep\n)\n\n# deletes the columns that won't be used\nfortaleza_data[, setdiff(names(fortaleza_data), cols_to_keep) := NULL]\n\nfortaleza_data\n\n                   id population decile jobs schools\n   1: 89801040323ffff         30      1    0       0\n   2: 89801040327ffff        318      1    7       0\n   3: 8980104032bffff          0     NA    0       0\n   4: 8980104032fffff        103      1   98       0\n   5: 89801040333ffff         43      1    0       0\n  ---                                               \n2558: 8980107b6cbffff       2575      4  124       0\n2559: 8980107b6cfffff       2997      3    4       0\n2560: 8980107b6d3ffff       1751      8   14       0\n2561: 8980107b6d7ffff       2032      4  134       0\n2562: 8980107b6dbffff       1896      9  193       0\n\n\nA key decision in any accessibility analysis is which accessibility measure to use. It’s extremely important to weigh the pros and cons of each measure and to comprehend which metrics are more adequate for the type of opportunities we are looking at. In this example, we use two distinct measures:\n\nTo calculate accessibility to jobs, we use a cumulative opportunities measure. This metric allows us to understand how many jobs are accessible within a given time frame. Despite its limitations discussed in Chapter 2, this measure is one of the most commonly used metrics. This is to a large extent because the results from this accessibility indicator are extremely easy to communicate and interpret. In this example, we set a travel time threshold of 60 minutes, which is close to average commuting time by public transport in Fortaleza (approximately 58 minutes, according to Pasfor).\nTo calculate accessibility to public highschools, we use a minimum travel cost measure. This metric is particularly useful to assess the coverage of essential public services, such as basic health and education facilities. We can use this measure, for example, to identify population groups that are farther from these opportunities than a time/distance limit deemed reasonable.\n\nAs previously shown in Chapter 3, we can calculate this measures using the cumulative_cutoff() and cost_to_closest() functions, respectively, from the {accessibility} package:\n\nlibrary(accessibility)\n\naccess_to_jobs <- cumulative_cutoff(\n  ttm,\n  land_use_data = fortaleza_data,\n  opportunity = \"jobs\",\n  travel_cost = \"travel_time_p50\",\n  cutoff = 60,\n  group_by = \"scenario\"\n)\n\naccess_to_jobs\n\n                   id scenario   jobs\n   1: 89801040323ffff   before  48049\n   2: 89801040327ffff   before  26044\n   3: 8980104032bffff   before  25862\n   4: 8980104032fffff   before  69361\n   5: 89801040333ffff   before  48049\n  ---                                \n5120: 8980107b6cbffff    after 378840\n5121: 8980107b6cfffff    after 286878\n5122: 8980107b6d3ffff    after 339878\n5123: 8980107b6d7ffff    after 359648\n5124: 8980107b6dbffff    after 372565\n\ntime_to_schools <- cost_to_closest(\n  ttm,\n  land_use_data = fortaleza_data,\n  opportunity = \"schools\",\n  travel_cost = \"travel_time_p50\",\n  group_by = \"scenario\"\n)\n\ntime_to_schools\n\n                   id scenario travel_time_p50\n   1: 89801040323ffff   before              36\n   2: 89801040323ffff    after              36\n   3: 89801040327ffff   before              41\n   4: 89801040327ffff    after              41\n   5: 8980104032bffff   before              41\n  ---                                         \n5120: 8980107b6d3ffff    after              19\n5121: 8980107b6d7ffff   before              14\n5122: 8980107b6d7ffff    after              14\n5123: 8980107b6dbffff   before              15\n5124: 8980107b6dbffff    after              15\n\n\nHaving done that, we can calculate the accessibility difference between the two scenarios. This information is useful to clearly communicate how the accessibility conditions in the city would be impacted by the future implementation of the East subway line and the changes to service frequency foreseen in Pasfor. To do so, we use the code below:\n\n# substitutes Inf values by 80 minutes\ntime_to_schools[\n  ,\n  travel_time_p50 := ifelse(is.infinite(travel_time_p50), 80, travel_time_p50)\n]\n\nHaving done that, we can calculate the accessibility difference between the two scenarios. This information is useful to clearly communicate the effects of the East Line implementation and the frequency changes foreseen in Pasfor on the accessibility conditions in the city. To do so, we use the code below:\n\naccess_to_jobs[\n  ,\n  difference := data.table::shift(jobs, type = \"lead\") - jobs,\n  by = id\n]\n\ntime_to_schools[\n  ,\n  difference := data.table::shift(travel_time_p50, type = \"lead\") -\n    travel_time_p50,\n  by = id\n]"
  },
  {
    "objectID": "6_cenarios_transporte.en.html#analyzing-accessibility-levels-before-and-after",
    "href": "6_cenarios_transporte.en.html#analyzing-accessibility-levels-before-and-after",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.5 Analyzing accessibility levels before and after",
    "text": "6.5 Analyzing accessibility levels before and after\nNow that we have calculated the accessibility levels in both scenarios and the difference between them, we can examine how the future implementation of the East Line coupled with the changes to the frequencies of the subway and light rail services will impact the accessibility conditions in our study area. As a first exploratory analysis, we can investigate how these changes affect the average accessibility in the city. Looking at the accessibility to jobs first, we calculate the average number of accessible jobs in each scenario. Here, it’s important to weigh the accessibility levels by the population of each grid cell, since hexagons with larger populations contribute more to the city’s average than hexagons with fewer residents.\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# merges accessibility table with land use data (population count and income\n# decile)\naccess_to_jobs <- merge(\n  access_to_jobs,\n  fortaleza_data,\n  by = \"id\"\n)\n\n# renames columns with duplicated names\ndata.table::setnames(\n  access_to_jobs,\n  old = c(\"jobs.x\", \"jobs.y\"),\n  new = c(\"access_to_jobs\", \"job_count\")\n)\n\n# calculates avg accessibility in each scenario\navg_access <- access_to_jobs[\n  ,\n  .(access  = weighted.mean(access_to_jobs, w = as.numeric(population))),\n  by = scenario\n]\n\nggplot(data = avg_access, aes(x = scenario, y = access / 1000)) +\n  geom_col(fill = \"#0f3c53\") +\n  geom_text(\n    aes(label = round(access / 1000, digits = 1)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Accessible jobs\\n(thousands)\") +\n  theme_minimal()\n\n\n\n\n\n\n\nThe results show that Fortaleza’s population could reach on average 243,859 jobs in up to 60 minutes by public transport before the subway expansion, in 2019. The East Line’s implementation and the changes to the frequencies of subway and light rail services led to an increase of 0.0554009%, to 257,369 jobs, on average.\nWhen we look at the average time to reach the closest public highschool, we see that the changes to the transport system barely affect the accessibility to these schools. On average, Fortaleza’s population took approximately 13 minutes to reach the nearest public highschool to their home in 2019. After the subway extension and the increase to the subway and light rail frequencies, this value remains virtually unchanged.\n\n# merges time to schools table with land use data\ntime_to_schools <- merge(\n  time_to_schools,\n  fortaleza_data,\n  by = \"id\"\n)\n\n# calculates avg time to schools in each scenario\navg_time <- time_to_schools[\n  ,\n  .(time  = weighted.mean(travel_time_p50, w = as.numeric(population))),\n  by = scenario\n]\n\nggplot(data = avg_time, aes(x = scenario, y = time)) +\n  geom_col(fill = \"#0d6556\") +\n  geom_text(\n    aes(label = round(time, digits = 2)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Average time to\\nclosest school (in minutes)\") +\n  theme_minimal()\n\n\n\n\nIn summary, the results show that the planned construction of the East Line and the frequency adjustment of the other rail services in Fortaleza would affect accessibility to jobs much more significantly than the accessibility to public highschools. This is mainly a result of how these two types of opportunities are spatially distributed in Fortaleza: while jobs are much more concentrated in the city center, schools are better distributed throughout the city. The changes to the public transport system, therefore, could help the residents of regions far from the city center to reach the jobs located there. On the other hand, public highschools are much more evenly distributed across the city, which results in relatively good accessibility conditions even before the changes to the public transport network. This helps us explain why those transport interventions would have such a low impact on the travel time necessary to reach the nearest schools.\nThese results can be better understood when we observe their spatial distribution. Before doing so, however, we create a spatial object outlining the shape of the public transport corridors in the city, which helps making the impact of the changes to the transport network even clearer.\n\n# reads the gtfs files required to create the geometries of each corridor\nmetrofor_gtfs <- read_gtfs(metrofor_path)\neast_line_gtfs <- read_gtfs(east_line_path)\n\n# metrofor's gtfs does not contain a shapes table, se we have to create the\n# geometries from the stops and stop_times tables with get_trip_geometry()\ncorridors_trips <- c(\"4\", \"34\", \"159\")\n\n# the stop sequence from one of the trips is not properly order, so we have to\n# manually order them\nmetrofor_gtfs$stop_times <- metrofor_gtfs$stop_times[\n  order(trip_id, stop_sequence)\n]\nmetrofor_shape <- gtfstools::get_trip_geometry(\n  metrofor_gtfs,\n  trip_id = corridors_trips\n)\n\n# converts the east line shape in one of the directions to spatial geometry\neast_line_shape <- gtfstools::convert_shapes_to_sf(\n  east_line_gtfs,\n  shape_id = \"LL_0\"\n)\n\n# names each route and bind the two tables together\neast_line_shape$corridor <- \"East Line\"\nmetrofor_shape$corridor <- data.table::fcase(\n  metrofor_shape$trip_id == 4, \"West Line\",\n  metrofor_shape$trip_id == 34, \"South Line\",\n  metrofor_shape$trip_id == 159, \"Light Rail\"\n)\n\nmetrofor_shape$origin_file <- NULL\nmetrofor_shape$trip_id <- NULL\neast_line_shape$shape_id <- NULL\n\ncorridors_shapes <- rbind(metrofor_shape, east_line_shape)\n\n# duplicates the table, adds a column identifying each scenario and removes\n# east line from the pre-implementation scenario\ncorridors_shapes <- rbind(corridors_shapes, corridors_shapes)\ncorridors_shapes$scenario <- rep(c(\"before\", \"after\"), each = 4)\ncorridors_shapes <- subset(\n  corridors_shapes,\n  corridor != \"East Line\" | scenario != \"before\"\n)\n\nggplot() +\n  geom_sf(data = fortaleza_grid, fill = \"gray90\", color = NA) +\n  geom_sf(data = corridors_shapes, aes(color = corridor)) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  facet_wrap(~ scenario, nrow = 1) +\n  theme_void()\n\n\n\n\nNow we can analyze the spatial distribution of accessibility levels in both scenarios, as well as the accessibility difference between them. To do this, we need to merge the accessibility estimates with the spatial grid of our study area. We first look at access to jobs:\n\n# merges accessibility data with fortaleza's spatial grid and convert the result into a\n# spatial object\naccess_to_jobs <- merge(\n  access_to_jobs,\n  fortaleza_grid,\n  by.x = \"id\",\n  by.y = \"id_hex\"\n)\naccess_to_jobs_sf <- sf::st_sf(access_to_jobs)\n\n# configures access distribution maps in both scenarios\naccess_dist <- ggplot() +\n  geom_sf(\n    data = access_to_jobs_sf,\n    aes(fill = access_to_jobs),\n    color = NA\n  ) +\n  facet_wrap(~ scenario, nrow = 1) +\n  scale_fill_viridis_c(\n    option = \"inferno\",\n    label = scales::label_number(scale = 1 / 1000)\n  ) +\n  labs(fill = \"Accessible jobs\\n(in thousands)\", color = \"Corridors\") +\n  geom_sf(\n    data = corridors_shapes,\n    aes(color = corridor),\n    alpha = 0.8,\n    show.legend = FALSE\n  ) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# configures difference map\ndifference_dist <- ggplot() +\n  geom_sf(\n    data = subset(access_to_jobs_sf, !is.na(difference)),\n    aes(fill = difference),\n    color = NA\n  ) +\n  scale_fill_viridis_c(\n    option = \"cividis\",\n    label = scales::label_number(scale = 1 / 1000)\n  ) +\n  labs(\n    fill = \"Accessibility to\\njobs difference\\n(in thousands)\",\n    color = \"Corridors\"\n  ) +\n  geom_sf(data = corridors_shapes, aes(color = corridor), alpha = 0.8) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# combines both plots\naccess_dist / difference_dist + plot_layout(ncol = 1, heights = c(1, 1))\n\n\n\n\nThe map shows that the regions that benefit the most from the changes to the transport system are those distant from the city center, but which are still close to rapid transit stations. The job accessibility gains concentrate mainly around the South and West subway corridors, and, to a smaller extent, around some of the light rail stations. Even regions close to these corridors, although not immediately adjacent to them, have large accessibility gains, highlighting the importance of the transport network connectivity to guarantee good accessibility conditions. The region around the new East Line, on the other hand, which already concentrated some of the highest accessibility levels in the city even before the implementation of the new corridor, shows only modest accessibility gains.\nThe maps of travel time to the nearest school, however, depict a different story:\n\n# merges time to schools data with Fortaleza's spatial grid and converts the result\n# into a spatial object\ntime_to_schools <- merge(\n  time_to_schools,\n  fortaleza_grid,\n  by.x = \"id\",\n  by.y = \"id_hex\"\n)\ntime_to_schools_sf <- sf::st_sf(time_to_schools)\n\n# configures time to schools distribution maps in both scenarios\ntime_dist <- ggplot() +\n  geom_sf(data = time_to_schools_sf, aes(fill = travel_time_p50), color = NA) +\n  facet_wrap(~ scenario, nrow = 1) +\n  scale_fill_viridis_c(option = \"plasma\", direction = -1) +\n  labs(fill = \"Time to\\n closest highschool\\n\\n(in minutes)\") +\n  geom_sf(\n    data = corridors_shapes,\n    aes(color = corridor),\n    alpha = 0.8,\n    show.legend = FALSE\n  ) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# configures difference map\ntime_diff_dist <- ggplot() +\n  geom_sf(\n    data = subset(time_to_schools_sf, !is.na(difference)),\n    aes(fill = difference),\n    color = NA\n  ) +\n  scale_fill_viridis_c(option = \"viridis\", direction = -1) +\n  labs(\n    fill = \"Time to\\nclosest highschool\\ndifference\\n(in minutes)\"\n  ) +\n  geom_sf(data = corridors_shapes, aes(color = corridor), alpha = 0.8) +\n  scale_color_manual(values = c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\")) +\n  theme_void() +\n  theme(legend.key.size = unit(0.4, \"cm\"))\n\n# combines both plots\ntime_dist / time_diff_dist + plot_layout(ncol = 1, heights = c(1, 1))\n\n\n\n\nThe East Line and the changes to the subway and light rail frequencies barely affect the accessibility to public highschools in Fortaleza. Very few hexagons present any accessibility gain between scenarios, with the exception of a small number of grid cells very close to subway stations. As we can see, the spatial distribution of access to schools presents a much more evenly distributed pattern than the job accessibility distribution pattern. Again, this is a consequence of how public highschools are distributed in the city: unlike the jobs distribution, which tends to follow economic criteria, the spatial planning of public schools in Brazil are guided by proximity and equity guidelines aiming to increase the proximity between schools and vulnerable population groups. Nonetheless, the degree of success of education policies in promoting equitable accessibility can greatly vary between cities and for different education levels such as early childhood and primary education (Saraiva et al. 2023)."
  },
  {
    "objectID": "6_cenarios_transporte.en.html#accessibility-inequality",
    "href": "6_cenarios_transporte.en.html#accessibility-inequality",
    "title": "6  Comparing accessibility between two transport scenarios",
    "section": "6.6 Accessibility inequality",
    "text": "6.6 Accessibility inequality\nA key dimension to assess transport policies is related to their distributive aspects. Who are the winners and losers? From an equity perspective, we expect public policies to prioritize improvements on the accessibility conditions of those with worse socioeconomic conditions and who depend on public transport the most (Pereira, Schwanen, and Banister 2017; van Wee 2022).\nIn this section, we look at how the job accessibility gains that result from the East Line implementation coupled with changes to subway and light rail frequencies are distributed between different income groups. To do this, we need to understand how the accessibility levels were distributed among the population in 2019, before the transport intervention, and after the implementation of such changes. With the code below, we use the information of the classification of each hexagon in terms of income decile to investigate the accessibility distribution between income groups, before and after the changes to the transport system.\n\nggplot(data = access_to_jobs[population > 0]) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decile),\n      y = access_to_jobs / 1000,\n      color = as.factor(decile),\n      weight = population,\n      group = decile\n    ),\n    show.legend = FALSE\n  ) +\n  facet_wrap(~ scenario, nrow = 1) +\n  scale_colour_brewer(palette = \"RdBu\") +\n  labs(x = \"Income decile\", y = \"Accessible jobs\\n(in thousands)\") +\n  scale_x_discrete(\n    labels = c(\"D1\\npoorest\", paste0(\"D\", 2:9), \"D10\\nwealthiest\")\n  ) +\n  theme_minimal()\n\n\n\n\nThis figure clearly shows that the wealthiest people in Fortaleza have higher job accessibility than their poorer counterparts, both before and after the changes to the transport system. In Fortaleza, as in most Brazilian cities, the wealthiest populations tend to live closer to the city center and areas with higher concentration of jobs, whereas the poorest tend to reside in the city’s outskirts (Pereira et al. 2022). Consequently, the wealthiest usually have better urban accessibility conditions than the poorest - not only because they tend to live closer to their jobs, but also because these regions tend to be better served by public transport than urban peripheries.\nHowever, it is difficult to see in this figure the magnitude of the variation in accessibility between the two scenarios. Using the same strategy that we have previously used, we present in the following figure the distribution of accessibility gains between the scenarios for the population in each income decile:\n\nggplot(subset(access_to_jobs, population > 0 & !is.na(difference))) +\n  geom_boxplot(\n    aes(\n      x = as.factor(decile),\n      y = difference / 1000,\n      color = as.factor(decile),\n      weight = population,\n      group = decile\n    ),\n    show.legend = FALSE\n  ) +\n  scale_colour_brewer(palette = \"RdBu\") +\n  labs(\n    x = \"Income decile\",\n    y = \"Job accessibility difference\\n(in thousands)\"\n  ) +\n  scale_x_discrete(\n    labels = c(\"D1\\npoorest\", paste0(\"D\", 2:9), \"D10\\nwealthiest\")\n  ) +\n  theme_minimal()\n\n\n\n\nAs we can see, the distribution of accessibility gains follows an inverted-U shape. There are relatively higher gains among middle-income groups and smaller gains for the poorest and wealthiest populations. The hexagon that gained the most accessibility falls into the 8th decile category, and it is an outlier that would be able to access almost 200,000 jobs more in comparison to the pre-changes scenario.\nCharts such as the ones shown in the last two figures are not the simplest to communicate, exactly because they contain lots of information. To facilitate this communication, summary measures are frequently used to assess the impact of transport policies on accessibility inequalities. This type of measure tries to summarize the distribution of accessibility levels among population groups (here, income deciles) into a single indicator that facilitates the understanding and interpretation of the results and that can be used, for example, when developing plans and setting goals. In the accessibility literature, two of the most frequently used inequality measures are the Palma Ratio and the Gini Index (Lucas, van Wee, and Maat 2016; Guzman and Oviedo 2018; Pritchard et al. 2019).\nIn this example, we calculate the Palma Ratio before and after the intervention to the transport system. This measure is the result of dividing the average accessibility of the wealthiest 10% by the average accessibility of the poorest 40%:\n\\[P = \\frac{\\overline{A_{tp10}}}{\\overline{A_{bt40}}}\\]\nin which \\(P\\) is the Palma Ratio, \\(\\overline{A_{tp10}}\\) is the average accessibility of the richest 10% and \\(\\overline{A_{bt40}}\\) is the average accessibility of the poorest 40%.\n\n\n\n\n\n\nWhy use the Palma Ratio?\n\n\n\n\n\nOne of the main advantages of the Palma Ratio over the Gini Index is how easy it is to communicate and interpret. Values higher than 1 indicate a scenario in which the wealthiest have higher average accessibility levels than the poorest, and values lower than 1 the opposite situation. Another advantage of the Palma Ratio is that it clearly reflects how the inequality varies between two groups of particular interest to us: in this case the wealthy and the poor population. The Gini Index, on the other hand, estimates how much a distribution deviates from a hypothetical situation in which everyone has the exact same access level, but says nothing about the socioeconomic conditions of those with the highest and lowest accessibility levels. If a given policy increases the accessibility levels of wealthy people that live in low-accessibility regions, for example, the Gini Index would point to an inequality decrease, even if not a single vulnerable citizen had benefited from this policy. Such a policy can hardly be assessed as equitable, even if the summary measure (the Gini Index, in this case) suggests otherwise.\n\n\n\nCalculating the Palma Ratio before and after the East Line implementation and the changes to the subway and light rail frequencies allows us to understand how these policies impact the inequality in access to employment opportunities in Fortaleza:\n\n# calculates the wealthiest's average accessibility in both scenarios\nwealthiest_access <- access_to_jobs[\n  decile == 10,\n  .(access = weighted.mean(access_to_jobs, w = as.numeric(population))),\n  by = scenario\n]\n\n# calculates the poorest's average accessibility in both scenarios\npoorest_access <- access_to_jobs[\n  decile %in% 1:4,\n  .(access = weighted.mean(access_to_jobs, w = as.numeric(population))),\n  by = scenario\n]\n\n# combines the wealthiest's and the poorest's accessibility\npalma_ratio <- merge(\n  wealthiest_access,\n  poorest_access,\n  by = \"scenario\",\n  suffixes = c(\"_wealthiest\", \"_poorest\")\n)\n\n# calculates the palma ratio\npalma_ratio[, palma := access_wealthiest / access_poorest]\n\nggplot(data = palma_ratio, aes(x = scenario, y = palma)) +\n  geom_col(fill = \"#0d6556\") +\n  geom_text(\n    aes(label = round(palma, digits = 2)),\n    vjust = 1.5,\n    color = \"white\",\n    size = 10\n  ) +\n  ylab(\"Palma Ratio\") +\n  theme_minimal()\n\n\n\n\nThe figure above shows that, in 2019, the wealthiest groups in Fortaleza could access on average, 2.16 times more jobs than the poorest population by public transport in 60 minutes. The chart also shows that the inequality, as measured by the Palma Ratio, slightly decreased between the pre- and post-intervention scenarios. Thus, we can say that, in this simplified case study, the proposed subway expansion combined with the changes to the subway and light rail frequencies would be slightly progressive. In other words, these interventions would reduce inequality in access to jobs between high- and low-income populations in Fortaleza.\n\n\n\n\n\n\nIt’s important to emphasize that the transport project assessment presented in this chapter looks at a simplified intervention scenario for didactic purposes. For a more complete assessment of the East Line implementation and the changes foreseen in the Pasfor, which also includes changes to the bus network, please see Braga et al. (2022) (in Portuguese).\n\n\n\nIn this chapter, we have focused on assessing the accessibility impact of a transport policy. It’s worth noting, however, that a complete assessment of a public policy must also consider other criteria such as community engagement with the policy development and decision-making process, as well as other environmental, economic and social impacts of the policy. Although an accessibility impact assessment is very important to determine who benefit from the transport policy and how such policy impact the performance of the transport network, this type of analysis only looks at a single impact dimension, and should be complemented by other analyzes.\n\n\n\n\nBraga, Carlos Kaue Vieira, Diego Bogado Tomasiello, Daniel Herszenhut, João Lucas Albuquerque Oliveira, and Rafael H. M. Pereira. 2022. “Impactos da expansão do metrô de Fortaleza sobre o acesso a oportunidades de emprego, saúde e educação.” {Texto para Discuss\\~ao} 2767. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nGuzman, Luis A., and Daniel Oviedo. 2018. “Accessibility, Affordability and Equity: Assessing ‘Pro-Poor’ Public Transport Subsidies in Bogotá.” Transport Policy 68 (September): 37–51. https://doi.org/10.1016/j.tranpol.2018.04.012.\n\n\nLucas, Karen, Bert van Wee, and Kees Maat. 2016. “A Method to Evaluate Equitable Accessibility: Combining Ethical Theories and Accessibility-Based Approaches.” Transportation 43 (3): 473–90. https://doi.org/10.1007/s11116-015-9585-2.\n\n\nPereira, Rafael H. M., Carlos Kauê Vieira Braga, Daniel Herszenhut, Marcus Saraiva, and Diego Bogado Tomasiello. 2022. “Estimativas de acessibilidade a empregos e serviços públicos via transporte ativo, público e privado nas 20 maiores cidades do Brasil em 2017, 2018, 2019.” Texto para Discussão IPEA 2800.\n\n\nPereira, Rafael H. M., Tim Schwanen, and David Banister. 2017. “Distributive Justice and Equity in Transportation.” Transport Reviews 37 (2): 170–91. https://doi.org/10.1080/01441647.2016.1257660.\n\n\nPritchard, John P., Diego Tomasiello, Mariana Giannotti, and Karst Geurs. 2019. “An International Comparison of Equity in Accessibility to Jobs: London, São Paulo and the Randstad.” Findings, February. https://doi.org/10.32866/7412.\n\n\nSaraiva, Marcus, Luiz Pedro Silva, Carlos Kauê Vieira Braga, and Rafael Henrique Moraes Pereira. 2023. “Transporte urbano e insuficiência de acesso a escolas no Brasil.” {Texto para Discuss\\~ao} 2854. Instituto de Pesquisa Econômica Aplicada (Ipea).\n\n\nvan Wee, Bert. 2022. “Accessibility and Equity: A Conceptual Framework and Research Agenda.” Journal of Transport Geography 104 (October): 103421. https://doi.org/10.1016/j.jtrangeo.2022.103421."
  },
  {
    "objectID": "s5_dados_aop.en.html",
    "href": "s5_dados_aop.en.html",
    "title": "SECTION 5: Data from the Access to Opportunity Project",
    "section": "",
    "text": "In the previous chapters, we learned about the concept of accessibility, and how to calculate accessibility measures using R. However, we often come across situations when we do not want to calculate accessibility levels on our own, either because we do not have the time or data necessary for this or simply because others have already calculated these estimates. Throughout the next chapters, we will present the database output of the Access to Opportunities Project (AOP).\nThe Access to Opportunities Project is a research initiative led by the Institute for Applied Economic Research (Ipea) with the aim to study transport accessibility and inequalities in access to opportunities in Brazilian cities. All of the data outputs produced by the AOP team are made publicly available. The AOP data includes not only urban accessibility estimates, but also information on the spatial distribution of the population, economic activities and public services. The data is spatially aggregated into a hexagonal grid that follows the H3, originally developed by Uber (Brodsky 2018). Each hexagonal cell is about 0.11 km², an area similar to that covered by a city block, allowing analysis at a high spatial resolution. As shown in Figure 1, accessibility estimates are available for the years 2017, 2018 and 2019 and for the 20 largest cities in Brazil, considering different modes of transport (walking, cycling, public transport and automobile), times of day (peak and off-peak), population groups (aggregated by income, race, sex and age) and types of activity (jobs, schools, health services and social assistance centers).\n\n\n\n\n\n\nThe methods used to generate these data are presented in detail in separate publications for population and land use data (Pereira, Herszenhut, et al. 2022) and for accessibility data (Pereira, Braga, et al. 2022).\n\n\n\n\n\n\n\n\nFigure 1: Scope of the AOP data\n\n\n\n\nAccessibility estimates by public transport were estimated only for the cities with good quality GTFS data shared with the AOP team. These cities are Belo Horizonte, Campinas, Curitiba, Fortaleza, Goiânia1, Porto Alegre, Recife, Rio de Janeiro and São Paulo. The GTFS feeds of a few cities were only available for a few years, or had quality issues and were not representative of public transportation operations. Accessibility estimates by public transport were not calculated for these cases. Figure 2 shows the cities included in the project and the transport modes considered in each city.\n\n\n\n\n\nFigure 2: Geographic scope of the AOP data (* indicates the cities that do not have accessibility estimates by public transport for all years)\n\n\n\n\nThe following tables summarize the data made available by the project. Table 1 presents the data on urban accessibility:\n\n\n\n\nTable 1: Accessibility indicators calculated in the Opportunity Access Project\n\n\n\n\n\n\n\n\nIndicator (code)\nDescription\nType of opportunities\nTravel time thresholds\n\n\n\n\nMinimum travel time (TMI)\nTime to nearest opportunity\nHealth, Education, reference centers for social assistance (CRAS)\nOn foot (60 mins); bicycle, public transport and car (120 mins)\n\n\nActive cumulative accessibility measure (CMA)\nNumber of accessible opportunities in a given travel time threshold\nWork, Health, Education, CRAS\nOn foot and bicycle (15, 30, 45 and 60 mins); public transport and car (15, 30, 60, 90 and 120 mins)\n\n\nPassive cumulative accessibility measure (CMP)\nNumber of people that can access a given place in a given travel time threshold\n-\nOn foot and bicycle (15, 30, 45 and 60 mins); public transport and car (15, 30, 60, 90 and 120 mins)\n\n\n\n\n\n\nMeanwhile, Table 2 presents data on socioeconomic characteristics of the population and spatial distribution of opportunities:\n\n\n\n\nTable 2: Socioeconomic information of the population and spatial distribution of activities by year of reference and data source\n\n\n\n\n\n\n\n\nData\nInformation\nYears\nSource\n\n\n\n\nSociodemographic characteristics of the population\nNumber of people by sex, age and race; average household income per capita\n2010\nDemographic Census, IBGE\n\n\nEducation services\nNumber of public schools by level of education (early childhood, primary and secondary education)\n2017, 2018, 2019\nSchool Census, Inep\n\n\nHealth services\nNumber of health facilities that serve the SUS according to the level of care (low, medium and high complexity)\n2017, 2018, 2019\nNational Registry of Health Facilities (CNES), Ministry of Health\n\n\nEconomic activity\nNumber of formal jobs by to the level of education of workers (primary, secondary and tertiary education)\n2017, 2018, 2019\nNational register of firms and workers (RAIS), Ministry of Economy\n\n\nSocial welfare services\nNumber of reference centers for social assistance (CRAS)\n2017, 2018, 2019\nUnified Social Assistance System Census (SUAS Census), Ministry of Citizenship\n\n\n\n\n\n\nAll data sets created by AOP are available for download from the project website or through the R package {aopdata}. The data dictionary can be accessed at this link or, in an R session, with the command aopdata::aopdata_dictionary(lang = \"en\"). The chapters in this section provide several examples of how to download and visualize these data in R.\n\n\n\n\nBrodsky, Isaac. 2018. “H3: Uber’s Hexagonal Hierarchical Spatial Index.” Uber Engineering Blog. https://eng.uber.com/h3/.\n\n\nPereira, Rafael H. M., Carlos Kauê Vieira Braga, Daniel Herszenhut, Marcus Saraiva, and Diego Bogado Tomasiello. 2022. “Estimativas de acessibilidade a empregos e serviços públicos via transporte ativo, público e privado nas 20 maiores cidades do Brasil em 2017, 2018, 2019.” Texto para Discussão IPEA 2800.\n\n\nPereira, Rafael H. M., Daniel Herszenhut, Carlos Kauê Vieira Braga, João Pedro Bazzo, João Lucas Albuquerque Oliveira, João Pedro Parga, Marcus Saraiva, Luiz Pedro Silva, Lucas Warwar, and Diego Bogado Tomasiello. 2022. “Distribuição espacial de características sociodemográficas e localização de empregos e serviços públicos das vinte maiores cidades do Brasil.” Texto para Discussão IPEA 2772 (June): 28. https://doi.org/10.38116/td2772.\n\n\n\n\n\nThe GTFS of Goiânia covers the public transport network of its entire metropolitan region, not only the municipality.↩︎"
  },
  {
    "objectID": "7_aopdata_populacao.en.html",
    "href": "7_aopdata_populacao.en.html",
    "title": "7  Population and socioeconomic data",
    "section": "",
    "text": "The population data used in the Access to Opportunities project comes from the 2010 Census. This data brings aggregate information on the spatial distribution of the population by income per capita, race, sex, and age, , and it can be downloaded with the aopdata::read_population() function. To download data for a specific city, the function needs a value to be provided for the city parameter. To download the data with the spatial information of each grid cell, the geometry parameter must receive the value TRUE (by default, this value is FALSE, so that the geometry of the cells is not downloaded).\nIn the example below, we show how to download the population and socioeconomic data of Fortaleza:\nThe data table includes the reference year of the population census, the ids of hexagons and municipality, and socioeconomic data in multiple columns with encoded names:\nTable 7.1 presents the data dictionary, with the description of each of the columns in the data, as well as observations about some of its values. This description can also be found in the documentation of the function by running in R the ?read_population.\nThe following sections show examples of how to visualize these data in the form of maps."
  },
  {
    "objectID": "7_aopdata_populacao.en.html#spatial-distribution-of-population",
    "href": "7_aopdata_populacao.en.html#spatial-distribution-of-population",
    "title": "7  Population and socioeconomic data",
    "section": "7.1 Spatial distribution of population",
    "text": "7.1 Spatial distribution of population\nIn the code below, we load a couple data visualization libraries and create the map. With a single command, we can visualize the spatial distribution of the population of Fortaleza. The figure shows a choropleth map where the color of each grid cell represents the total size of its resident population (variable P001).\n\nlibrary(patchwork)\nlibrary(ggplot2)\n\nggplot(subset(data_fortaleza, P001 > 0)) +\n  geom_sf(aes(fill = P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  labs(\n      title = \"Spatial distribution of the population\",\n      subtitle = \"Fortaleza\",\n      fill = \"Population count\"\n  ) +\n  theme_void()"
  },
  {
    "objectID": "7_aopdata_populacao.en.html#map-of-population-by-race",
    "href": "7_aopdata_populacao.en.html#map-of-population-by-race",
    "title": "7  Population and socioeconomic data",
    "section": "7.2 Map of population by race",
    "text": "7.2 Map of population by race\nBesides reporting the total population count in each cell, the data also includes information on population count by race (variables P002 to P005), gender (variables P006 and P007) and age group (variables P010 to P016). The code below illustrates how simple it is to calculate the proportion of black and white people in each hexagon and visualize these proportions on a map.\n\npop_black <- ggplot(subset(data_fortaleza, P001 > 0)) +\n  geom_sf(aes(fill = P003 / P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(\n      palette = \"RdPu\",\n      direction = 1,\n      labels = scales::percent,\n      limits = c(0, 1)\n  ) +\n  labs(title = \"Proportion of black people\", fill = \"Black pop\") +\n  theme_void()\n\npop_white <- ggplot(subset(data_fortaleza, P001 > 0)) +\n  geom_sf(aes(fill = P002 / P001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(\n      palette = \"YlGnBu\",\n      direction = 1,\n      labels = scales::percent,\n      limits = c(0, 1)\n  ) +\n  labs(title = \"Proportion of white people\", fill = \"White pop\") +\n  theme_void()\n\npop_black + pop_white"
  },
  {
    "objectID": "7_aopdata_populacao.en.html#map-of-population-by-income",
    "href": "7_aopdata_populacao.en.html#map-of-population-by-income",
    "title": "7  Population and socioeconomic data",
    "section": "7.3 Map of population by income",
    "text": "7.3 Map of population by income\nFinally, the data also provide information about the average income per capita of each hexagon (R001) and its classification in terms of quintile (R002) and income decile (R003). Using this data, we can visualize the spatial distribution of income levels in the city.\n\nincome <- ggplot(subset(data_fortaleza, P001 > 0)) +\n  geom_sf(aes(fill = R001), color = NA, alpha = 0.8) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  labs(title = \"Average income per capita\", fill = \"Income (R$)\") +\n  theme_void()\n\ndeciles <- ggplot(subset(data_fortaleza, !is.na(R002))) +\n  geom_sf(aes(fill = factor(R003)), color = NA, alpha = 0.8) +\n  scale_fill_brewer(palette = \"RdBu\") +\n  labs(\n      title = \"Deciles of average income per capita\",\n      fill = \"Income decile\"\n  ) +\n  theme_void() +\n  theme(legend.key.size = unit(0.3, \"cm\"))\n\nincome + deciles"
  },
  {
    "objectID": "8_aopdata_uso_solo.en.html",
    "href": "8_aopdata_uso_solo.en.html",
    "title": "8  Data on the spatial distribution of opportunities",
    "section": "",
    "text": "The {aopdata} package also allows you the download data on the spatial distribution of jobs (of low, middle and high education), public health facilities (of low, medium and high complexity), public schools (at early childhood, primary and secondary school levels) and Social Assistance Reference Centers (CRAS). This data is available for all cities included in the project for the years 2017, 2018 and 2019.\nThis data can be downloaded with the read_landuse() function, which works similarly to read_population(). To use it, simply indicate the desired city data using the city parameter, along with the reference year (year) and whether or not you would like to include the spatial information of hexagons (geometry).\nIn the example below, we show how to download the land use data for the year 2019 for the city of Belo Horizonte. Note that this function results in a table that also automatically includes the sociodemographic data.\nTable 8.1 shows the data dictionary with the description of the columns in the data (excluding those previously included in the sociodemographic data table). This description can also be found in the documentation of the function by running?read_landuse in R.\nThe following sections show examples of how to visualize these data in the form of maps."
  },
  {
    "objectID": "8_aopdata_uso_solo.en.html#map-of-employment",
    "href": "8_aopdata_uso_solo.en.html#map-of-employment",
    "title": "8  Data on the spatial distribution of opportunities",
    "section": "8.1 Map of employment",
    "text": "8.1 Map of employment\nIn the code below, we load a couple data visualization libraries and create the map. The variables starting with the letter T are those that describe the spatial distribution of jobs in each city. The code below shows the spatial distribution of the total number of jobs in each hexagon (variable T001) in Belo Horizonte:\n\nlibrary(patchwork)\nlibrary(ggplot2)\n\nggplot(data_bh) +\n  geom_sf(aes(fill = T001), color = NA, alpha = 0.9) +\n  scale_fill_distiller(palette = \"YlGnBu\", direction = 1) +\n  labs(\n      title = \"Spatial distribution of jobs\",\n      subtitle = \"Belo Horizonte\",\n      fill = \"N. of jobs\"\n  ) +\n  theme_void()"
>>>>>>> Stashed changes
  },
  {
    "objectID": "8_aopdata_uso_solo.en.html#map-of-schools",
    "href": "8_aopdata_uso_solo.en.html#map-of-schools",
    "title": "8  Data on the spatial distribution of opportunities",
    "section": "8.2 Map of schools",
    "text": "8.2 Map of schools\nVariables with information about the number of public schools in each cell, in turn, begin with the letter E. In the example below, we present the spatial distribution of all public schools in Belo Horizonte (variable E001).\n\nggplot(data_bh) +\n  geom_sf(aes(fill = as.factor(E001)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1) +\n  labs(\n      title = \"Spatial distribution of schools\",\n      subtitle = \"Belo Horizonte\",\n      fill = \"N. of schools\"\n  ) +\n  theme_void()"
  },
  {
    "objectID": "8_aopdata_uso_solo.en.html#map-of-health-facilities",
    "href": "8_aopdata_uso_solo.en.html#map-of-health-facilities",
    "title": "8  Data on the spatial distribution of opportunities",
    "section": "8.3 Map of health facilities",
    "text": "8.3 Map of health facilities\nThe variables related to the number of public health facilities in each cell begin with the letter S. The visualization below compares the spatial distribution of low complexity (S002) and high complexity (S004) public health facilities.\n\nlow_complexity <- ggplot(data_bh) +\n  geom_sf(aes(fill = as.factor(S002)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1, limits = factor(0:4)) +\n  labs(\n      title = \"Health facilities\",\n      subtitle = \"Low complexity\",\n      fill = \"N. of facilities\"\n  ) +\n  theme_void()\n\nhigh_complexity <- ggplot(data_bh) +\n  geom_sf(aes(fill = as.factor(S004)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1, limits = factor(0:4)) +\n  labs(\n      title = \"Health facilities\",\n      subtitle = \"High complexity\",\n      fill = \"N. of facilities\"\n  ) +\n  theme_void()\n\nlow_complexity + high_complexity + plot_layout(guides = \"collect\")"
  },
  {
<<<<<<< Updated upstream
    "objectID": "8_aopdata_uso_solo.html#mapa-de-estabelecimentos-de-saúde",
    "href": "8_aopdata_uso_solo.html#mapa-de-estabelecimentos-de-saúde",
    "title": "8  Dados de distribuição espacial de oportunidades",
    "section": "8.3 Mapa de estabelecimentos de saúde",
    "text": "8.3 Mapa de estabelecimentos de saúde\nAs variáveis que contêm os dados dos estabelecimentos públicos de saúde em cada célula começam com a letra S. A visualização a seguir compara a distribuição espacial de estabelecimentos públicos de saúde de baixa complexidade (S002) e de alta complexidade (S004).\n\nsaude_baixa &lt;- ggplot(dados_bh) +\n  geom_sf(aes(fill = as.factor(S002)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1, limits = factor(0:4)) +\n  labs(\n    title = \"Estabelecimentos de saúde\",\n    subtitle = \"Baixa complexidade\",\n    fill = \"N. de estabelecimentos\"\n  ) +\n  theme_void()\n\nsaude_alta &lt;- ggplot(dados_bh) +\n  geom_sf(aes(fill = as.factor(S004)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1, limits = factor(0:4)) +\n  labs(\n    title = \"Estabelecimentos de saúde\",\n    subtitle = \"Alta complexidade\",\n    fill = \"N. de estabelecimentos\"\n  ) +\n  theme_void()\n\nsaude_baixa + saude_alta + plot_layout(guides = \"collect\")\n\n\n\n\nFigura 8.3: Distribuição espacial de estabelecimentos de saúde de baixa e alta complexidade em Belo Horizonte"
=======
    "objectID": "8_aopdata_uso_solo.en.html#cras-map",
    "href": "8_aopdata_uso_solo.en.html#cras-map",
    "title": "8  Data on the spatial distribution of opportunities",
    "section": "8.4 CRAS map",
    "text": "8.4 CRAS map\nFinally, the variable C001 describes the spatial distribution of Social Assistance Reference Centers (CRAS) in each city. The map below shows the spatial distribution of these services in Belo Horizonte.\n\nggplot(data_bh) +\n  geom_sf(aes(fill = as.factor(C001)), color = NA, alpha = 0.9) +\n  scale_fill_brewer(palette = \"YlGnBu\", direction = 1) +\n  labs(\n      title = \"Social Assistance Reference Centers (CRAS)\",\n      subtitle = \"Belo Horizonte\",\n      fill = \"N. of CRAS\"\n  ) +\n  theme_void()"
>>>>>>> Stashed changes
  },
  {
    "objectID": "9_aopdata_acessibilidade.en.html",
    "href": "9_aopdata_acessibilidade.en.html",
    "title": "9  Accessibility estimates",
    "section": "",
    "text": "Finally, the {aopdata} package also allows you to download estimates of access to jobs, health, education and social assistance services for the years 2017, 2018 and 2019 for all cities included in the project.\nThis data can be downloaded with the read_access() function, which works similarly to the read_population() and read_landuse() functions presented earlier. Besides indicating the city (city parameter) and the reference year (year), though, it is also necessary to inform the mode of transport (mode) and the period of the day with th peak parameter (peak, between 6am and 8am, or off-peak, between 14h and 16h).\nIn the example below, we show how to download accessibility estimates in the peak period in São Paulo for the year 2019. In this example, we downloaded both accessibility estimates by car and public transport and put them together in a single data.frame. Note that this function results in a table that also automatically includes sociodemographic and land use data.\nJust like with the sociodemographic and land use variables, the names of the variables related to accessibility estimates are also encoded with column names such as CMAEF30, TMISB and CMPPM60. These codes result from a combination of three components: the type of accessibility indicator; the type of opportunity for which accessibility levels were calculated or to which people the indicator refers to; and the time threshold used in the calculation of the indicator.\nIn the case of the passive accessibility indicator (CMP), the letters in the middle of the variable name indicate which population group the accessibility estimates refer to:\nExamples:\nThe full description of the variables can also be found in the documentation of function by running the ?read_accesscommand in R. The following sections show examples of how to visualize these accessibility data in the form of maps and charts."
  },
  {
<<<<<<< Updated upstream
    "objectID": "9_aopdata_acessibilidade.html#mapa-do-tempo-para-acessar-o-hospital-mais-próximo",
    "href": "9_aopdata_acessibilidade.html#mapa-do-tempo-para-acessar-o-hospital-mais-próximo",
    "title": "9  Estimativas de acessibilidade",
    "section": "9.1 Mapa do tempo para acessar o hospital mais próximo",
    "text": "9.1 Mapa do tempo para acessar o hospital mais próximo\nNeste exemplo, comparamos o tempo de acesso por automóvel e por transporte público até o hospital mais próximo de cada hexágono. Para analisar o tempo mínimo de viagem (TMI) até hospitais de alta complexidade (SA), utilizamos a variável TMISA. Com o código a seguir, carregamos as bibliotecas de visualização de dados e apresentamos a distribuição espacial do tempo de acesso com os dois modos de transporte. Como os tempos de viagem por transporte público costumam ser muito mais longos do que por automóvel, truncamos a distribuição dos valores da variável em 60 minutos.\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# trunca os tempos de viagem em 60 minutos\ndados_sp$TMISA &lt;- ifelse(dados_sp$TMISA &gt; 60, 60, dados_sp$TMISA)\n\nggplot(subset(dados_sp, !is.na(mode))) +\n  geom_sf(aes(fill = TMISA), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(\n    option = \"cividis\",\n    direction = -1,\n    breaks = seq(0, 60, 10),\n    labels = c(seq(0, 50, 10), \"60+\")\n  ) +\n  labs(\n    title = \"Tempo de viagem até o hospital de alta complex. mais próximo\",\n    subtitle = \"São Paulo\",\n    fill = \"Tempo em\\nminutos\"\n  ) +\n  facet_wrap(~ mode) +\n  theme_void()\n\n\n\n\nFigura 9.1: Tempo de viagem até o hospital de alta complexidade mais próximo em São Paulo"
  },
  {
    "objectID": "9_aopdata_acessibilidade.html#mapa-da-quantidade-de-empregos-acessíveis",
    "href": "9_aopdata_acessibilidade.html#mapa-da-quantidade-de-empregos-acessíveis",
    "title": "9  Estimativas de acessibilidade",
    "section": "9.2 Mapa da quantidade de empregos acessíveis",
    "text": "9.2 Mapa da quantidade de empregos acessíveis\nOs dados do {aopdata} também tornam muito simples a comparação da quantidade de oportunidades acessíveis em diferentes tempos de viagem. Com o código a seguir, por exemplo, ilustramos como visualizar lado a lado as distribuições espaciais do número de empregos acessíveis em até 60 e 90 minutos de viagem, respectivamente, por transporte público.\n\n# estabelece valores usados na legenda do mapa\nlimites_legenda &lt;- c(0, max(acesso_tp$CMATT90, na.rm = TRUE) / 1000)\n\n# configura os mapas\n\nfig60 &lt;- ggplot(subset(acesso_tp, !is.na(mode))) +\n  geom_sf(aes(fill = CMATT60 / 1000), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(option = \"inferno\", limits = limites_legenda) +\n  labs(subtitle = \"em até 60 min.\", fill = \"Empregos\\nem milhares\") +\n  theme_void()\n\nfig90 &lt;- ggplot(subset(acesso_tp, !is.na(mode))) +\n  geom_sf(aes(fill = CMATT90 / 1000), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(option = \"inferno\", limits = limites_legenda) +\n  labs(subtitle = \"em até 90 min.\", fill = \"Empregos\\nem milhares\") +\n  theme_void()\n\nfig60 +\n  fig90 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(\n    title = \"Quantidade de empregos acessíveis por transporte público\",\n    subtitle = \"São Paulo\"\n  )\n\n\n\n\nFigura 9.2: Quantidade de empregos acessíveis por transporte público em São Paulo"
  },
  {
    "objectID": "9_aopdata_acessibilidade.html#desigualdades-de-acesso-a-oportunidades",
    "href": "9_aopdata_acessibilidade.html#desigualdades-de-acesso-a-oportunidades",
    "title": "9  Estimativas de acessibilidade",
    "section": "9.3 Desigualdades de acesso a oportunidades",
    "text": "9.3 Desigualdades de acesso a oportunidades\nExistem diversas maneiras de analisar quão desiguais são as condições de acesso a oportunidades nas cidades brasileiras a partir dos dados do {aopdata}. Nesta subseção, apresentamos três exemplos deste tipo de análise.\n\n9.3.1 Desigualdade no tempo de acesso a oportunidades\nNeste primeiro exemplo, vamos comparar o tempo médio de viagem até o hospital público mais próximo de pessoas de diferentes níveis de renda. Para isso, calculamos o tempo médio de acesso a estabelecimentos de saúde de alta complexidade ponderado pela população de cada célula da nossa grade espacial. Essa ponderação é necessária porque cada célula, por abrigar um número de pessoas diferentes das demais, contribui de forma diferente para a média da população como um todo.\nAntes de realizar o cálculo, cabe observar que algumas células da cidade não conseguem acessar nenhum hospital em até duas horas de viagem. Nesses casos, o valor das variáveis de tempo mínimo de viagem é infinito (Inf). Para lidar com isso, neste exemplo substituímos todos os valores Inf por um tempo de viagem de 120 minutos.\n\n# copia os dados de acesso em um novo dataframe\ndesigualdade_tp &lt;- data.table::as.data.table(acesso_tp)\n\n# substitui os valores Inf por 120\ndesigualdade_tp[, TMISA := ifelse(is.infinite(TMISA), 120, TMISA)]\n\n# calcula o tempo de viagem médio por decil de renda\ndesigualdade_tp &lt;- desigualdade_tp[\n  ,\n  .(media = weighted.mean(x = TMISA, w = P001, na.rm = TRUE)),\n  by = R003\n]\ndesigualdade_tp &lt;- subset(desigualdade_tp, !is.na(media))\n\nggplot(desigualdade_tp) +\n  geom_col(aes(y = media, x = factor(R003)), fill = \"#2c9e9e\", color = NA) +\n  scale_x_discrete(\n    labels = c(\"D1\\nmais\\npobres\", paste0(\"D\", 2:9), \"D10\\nmais\\nricos\")\n  ) +\n  labs(\n    title = \"Média de tempo de viagem até o hospital mais proximo\",\n    subtitle = \"por transporte público em São Paulo\",\n    x = \"Decil de renda\",\n    y = \"Tempo de viagem\\nem min.\"\n  ) +\n  theme_minimal()\n\n\n\n\nFigura 9.3: Média de tempo de viagem por transporte público em São Paulo até o hospital mais próximo\n\n\n\n\n\n\n9.3.2 Desigualdade no número de oportunidades acessíveis\nOutra maneira de examinar a desigualdade de acesso a oportunidades é comparar a quantidade de oportunidades acessíveis por diferentes grupos populacionais considerando os mesmos modos de transporte e limites de tempo de viagem. Nesse caso, analisamos o indicador de acessibilidade cumulativa ativa, representado por variáveis cujos códigos começam com CMA na base de dados do {aopdata}. No exemplo a seguir, comparamos a quantidade de empregos acessíveis por pessoas de diferentes decis de renda, considerando viagens de transporte público limitadas em 60 minutos de viagem.\n\nggplot(subset(acesso_tp, !is.na(R003))) +\n  geom_boxplot(\n    aes(x = factor(R003), y = CMATT60 / 1000, color = factor(R003))\n  ) +\n  scale_color_brewer(palette = \"RdBu\") +\n  labs(\n    title = \"Distribução do número de empregos acessíveis em até 60 min.\",\n    color = \"Decil\\nde renda\",\n    subtitle = \"por transporte público, São Paulo\",\n    x = \"Decil de renda\",\n    y = \"N. de empregos acessíveis\\n(em milhares)\"\n  ) +\n  scale_x_discrete(\n    labels = c(\"D1\\nmais\\npobres\", paste0(\"D\", 2:9), \"D10\\nmais\\nricos\")\n  ) +\n  theme_minimal()\n\n\n\n\nFigura 9.4: Distribuição do número de empregos acessíveis por transporte público em São Paulo\n\n\n\n\nPor fim, podemos também comparar como o uso de diferentes modos de transporte resulta em diferentes níveis de acessibilidade para a população e como essa diferença varia entre cidades. No exemplo a seguir, comparamos a quantidade de empregos acessíveis em até 30 minutos de viagem a pé e de carro. Para isso, precisamos primeiro baixar os dados de acessibilidade por ambos os modos para todas as cidades do projeto.\n\ndados_carro &lt;- aopdata::read_access(\n  city = \"all\",\n  mode = \"car\",\n  year = 2019,\n  showProgress = FALSE\n)\n\ndados_caminhada &lt;- aopdata::read_access(\n  city = \"all\",\n  mode = \"walk\",\n  year = 2019,\n  showProgress = FALSE\n)\n\nEm seguida, calculamos para cada cidade e para cada modo de transporte a média ponderada do número de empregos acessíveis em até 30 minutos (CMATT30). Feito isso, juntamos essas estimativas em uma única tabela e calculamos a razão entre os níveis de acessibilidade por carro e os níveis de acessibilidade a pé.\n\n# calcula a média de empregos acessíveis em 30 minutos\n\nmedia_carro &lt;- dados_carro[\n  ,\n  .(acesso_carro = weighted.mean(CMATT30, w = P001, na.rm = TRUE)),\n  by = name_muni\n]\n\nmedia_caminhada &lt;- dados_caminhada[\n  ,\n  .(acesso_caminhada = weighted.mean(CMATT30, w = P001, na.rm = TRUE)),\n  by = name_muni\n]\n\n# junta os dados e calcula a razão entre o nível de acesso por carro e a pé\nmedia_acesso &lt;- merge(media_carro, media_caminhada)\nmedia_acesso[, razao := acesso_carro / acesso_caminhada]\n\nhead(media_acesso)\n\n        name_muni acesso_carro acesso_caminhada    razao\n1:          Belem     155270.4         9392.235 16.53179\n2: Belo Horizonte     529890.0        12464.233 42.51284\n3:       Brasilia     220575.9         4110.703 53.65892\n4:       Campinas     256333.1         6748.923 37.98133\n5:   Campo Grande     172680.5         4181.209 41.29919\n6:       Curitiba     494376.9        10471.135 47.21331\n\n\nFinalmente, podemos visualizar os resultados graficamente:\n\nggplot(media_acesso, aes(x = razao, y = reorder(name_muni, razao))) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(x = razao + 4 , label = paste0(round(razao), \"x\"))) +\n  labs(\n    title = \"Diferença entre a quantidade de empregos acessiveis por\\nautomóvel e por caminhada\",\n    subtitle = \"em até 30 min. de viagem\",\n    y = \"\",\n    x = \"Razão entre a acessibilidade de carro e a pé\"\n  ) +\n  theme_classic()\n\n\n\n\nFigura 9.5: Diferença entre a quantidade de empregos acessíveis por automóvel e por caminhada em até 30 minutos de viagem nas 20 maiores cidades do Brasil\n\n\n\n\nComo esperado, a Figura 9.5 mostra que é possível acessar muito mais empregos em até 30 minutos com viagens de carro do que com viagens a pé. Essa diferença, porém, varia muito entre cidades. Em São Paulo e em Brasília, viagens de automóvel de até 30 minutos permitem acessar, em média, um número de empregos 54 vezes maior do que viagens a pé de mesma duração. Em Belém, onde observamos a menor diferença, o automóvel permite acessar 17 vezes mais empregos do que a caminhada - razão ainda considerável, porém menor do que a das demais cidades."
=======
    "objectID": "9_aopdata_acessibilidade.en.html#map-of-travel-time-to-access-the-nearest-hospital",
    "href": "9_aopdata_acessibilidade.en.html#map-of-travel-time-to-access-the-nearest-hospital",
    "title": "9  Accessibility estimates",
    "section": "9.1 Map of travel time to access the nearest hospital",
    "text": "9.1 Map of travel time to access the nearest hospital\nIn this example, we compared the access time by car and public transport to the nearest hospital for each hexagon. To analyze the minimum travel time (TMI) to high complexity hospitals (SA), we used the variable TMISA. With the code below, we load the data visualization libraries and create the maps showing the spatial distribution of access time for both cars and public transport. Because travel times by public transport are usually much longer than by car, we truncate the distribution of values to 60 minutes or more.\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\n# truncates travel times to 60 minutes\ndata_sp$TMISA <- ifelse(data_sp$TMISA > 60, 60, data_sp$TMISA)\n\nggplot(subset(data_sp, !is.na(mode))) +\n  geom_sf(aes(fill = TMISA), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(\n      option = \"cividis\",\n      direction = -1,\n      breaks = seq(0, 60, 10),\n      labels = c(seq(0, 50, 10), \"60+\")\n  ) +\n  labs(\n      title = \"Travel time to the nearest high complex hospital\",\n      subtitle = \"São Paulo\",\n      fill = \"Time in\\nminutes\"\n  ) +\n  facet_wrap(~ mode) +\n  theme_void()"
  },
  {
    "objectID": "9_aopdata_acessibilidade.en.html#map-of-employment-accessibility",
    "href": "9_aopdata_acessibilidade.en.html#map-of-employment-accessibility",
    "title": "9  Accessibility estimates",
    "section": "9.2 Map of employment accessibility",
    "text": "9.2 Map of employment accessibility\n{aopdata} data also makes it very easy to compare the number of opportunities accessible at different travel times. Using the code below, for example, we illustrate how to visualize side-by-side the spatial distribution of employment accessibility in up to 60 and 90 minutes of travel by public transport.\n\n# determine min and max values for the legend\nlimit_values  <-c(0, max(access_pt $CMATT90, na.rm = TRUE) / 1000)\n\n# create maps\n\nfig60 <- ggplot(subset(access_pt, ! is.na(mode))) +\n  geom_sf(aes(fill = CMATT60 / 1000), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(option = \"inferno\", limits = limit_values) +\n  labs( subtitle = \"in up to 60 min.\" , fill = \"Jobs\\n(in thousands)\") +\n  theme_void()\n\nfig90 <- ggplot(subset(access_pt, !is.na(mode))) +\n  geom_sf(aes(fill = CMATT90 / 1000), color = NA, alpha = 0.9) +\n  scale_fill_viridis_c(option = \"inferno\", limits = limit_values) +\n  labs(subtitle = \"up to 90 min.\", fill = \"Jobs\\n(in thousands)\") +\n  theme_void()\n\nfig60 +\n  fig90 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(\n    title = \"Number of jobs accessible by public transport\",\n    subtitle = \"São Paulo\"\n  )"
  },
  {
    "objectID": "9_aopdata_acessibilidade.en.html#inequalities-in-access-to-opportunities",
    "href": "9_aopdata_acessibilidade.en.html#inequalities-in-access-to-opportunities",
    "title": "9  Accessibility estimates",
    "section": "9.3 Inequalities in access to opportunities",
    "text": "9.3 Inequalities in access to opportunities\nFinally, the data from {aopdata} can be used in different ways to analyze the level of inequality in access to opportunities across different cities in Brazil. In this subsection, we present three examples of this type of analysis.\nInequality in travel time to access opportunities\nIn this first example, we will compare the average travel time to the nearest public hospital for people of different income levels. To do this, we first need to calculate for each income group the average travel time to reach the nearest high complexity health facility weighted by the population of each hexagon. This weighting is necessary because each hexagon has a different population size and thus contributes differently to the average accessibility of the population as a whole.\nBefore performing the calculation, it should be noted that some hexagons in the city cannot access any hospital within two hours of travel. In these cases, the value of the minimum travel time variables is infinite (Inf). To deal with these cases, we will replace all Inf values with a travel time of 120 minutes for this example.\n\n# copies access data into a new data.frame\nineq_pt <-data.table::as.data.table(access_pt)\n\n# replaces Inf values with 120\nineq_pt [, TMISA := ifelse(is.infinite(TMISA), 120, TMISA)]\n\n# calculates the average travel time by income decile\nineq_pt <- ineq_pt[\n  ,\n  .( avrg = weighted.mean(x = TMISA, w = P001, na.rm = TRUE)),\n  by = R003\n]\nineq_pt <- subset(ineq_pt, ! is.na(avrg))\n\nggplot(ineq_pt) +\n  geom_col(aes(y = avrg, x = factor(R003)), fill = \"#2c9e9e\", color = NA) +\n  scale_x_discrete(\n      labels = c(\"D1\\npoorest\", paste0(\"D\", 2:9), \"D10\\nwealthiest\")\n  ) +\n  labs(\n    title = \"Average travel time to the nearest hospital\",\n    subtitle = \"by public transport in São Paulo \",\n    x = \"Income Decile\",\n    y = \"Travel time in min.\"\n  ) +\n  theme_minimal()\n\n\n\n\nInequality in the number of accessible opportunities\nAnother way to examine the inequality of access to opportunities is to compare the number of opportunities accessible by different population groups considering the same modes of transport and travel time limits. In this example, we analyze the active cumulative opportunity accessibility metric, available through the variables starting with CMA in the {aopdata} database. Using the code below, we compare the number of jobs accessible by people of different income deciles by public transport in up to 60 minutes.\n\nggplot(subset(access_pt, !is.na(R003))) +\n  geom_boxplot(\n      aes(x = factor(R003), y = CMATT60 / 1000, color = factor(R003))\n  ) +\n  scale_color_brewer(palette = \"RdBu\") +\n  labs(\n      title = \"Distribution of the number of jobs accessible within 60 min.\",\n      color = \"Income\\ndecile\",\n      subtitle = \"by public transport, São Paulo\",\n      x = \"Income decile\",\n      y = \"N. of accessible jobs\\n(in thousands)\"\n  ) +\n  scale_x_discrete(\n      labels = c(\"D1\\npoorest\", paste0(\"D\", 2:9), \"D10\\nwealthiest\")\n  ) +\n  theme_minimal()\n\n\n\n\nFinally, we can also compare how different modes of transport can lead to different levels of accessibility and how this difference varies between cities. In the example below, we compare the number of jobs accessible in up to 30 minutes of walking and driving. To do this, we first need to download accessibility data by both transport modes for all cities in the AOP project.\n\ndata_car <- aopdata::read_access(\n  city = \"all\",\n  mode = \"car\",\n  year = 2019,\n  showProgress = FALSE\n)\n\ndata_walk <- aopdata::read_access(\n  city = \"all\",\n  mode = \"walk\",\n  year = 2019,\n  showProgress = FALSE\n)\n\nNext, we calculate for each city and for each mode of transport the weighted average number of jobs accessible in up to 30 minutes (CMATT30). Once this is done, we put these estimates together into a single table and calculate the ratio between accessibility levels by car and walking.\n\n# calculates the average of affordable jobs in 30\n\navg_car <- data_car[\n  ,\n  .( access_car = weighted.mean(CMATT30, w = P001, na.rm = TRUE)),\n  by = name_muni\n]\n\navg_walk <- data_walk[\n  ,\n  .( access_walk = weighted.mean(CMATT30, w = P001, na.rm = TRUE)),\n  by = name_muni\n]\n\n# merges the data and calculates the ratio between access by car and on foot\navg_access <- merge(avg_car, avg_walk)\navg_access[, ratio := access_car / access_walk]\n\nhead(avg_access)\n\n        name_muni access_car access_walk    ratio\n1:          Belem   155270.4    9392.235 16.53179\n2: Belo Horizonte   529890.0   12464.233 42.51284\n3:       Brasilia   220575.9    4110.703 53.65892\n4:       Campinas   256333.1    6748.923 37.98133\n5:   Campo Grande   172680.5    4181.209 41.29919\n6:       Curitiba   494376.9   10471.135 47.21331\n\n\nFinally, we can visualize the results in a chart:\n\nggplot(avg_access, aes(x = ratio, y = reorder(name_muni, ratio))) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(x = ratio + 4 , label = paste0(round(ratio), \"x\"))) +\n  labs(\n      title = \"Difference between the number of jobs accessible by \\nautomobile and by foot\",\n      subtitle = \"in up to 30 min.\",\n      y = \"\",\n      x = \"Ratio between accessibility by car and walking\"\n  ) +\n  theme_classic()\n\n\n\n\nAs expected, the figure shows that it is possible to access many more jobs in 30 minutes by car than on walking trips. This difference, however, varies greatly across cities. In São Paulo and Brasília, a 30-minute car trip allows one to access, on average, 54 times more jobs than what it would be possible to access with walking trips. In Belém, the city with the smallest difference, one can access 17 times more jobs by car than walking - still a substantial difference but much smaller than those in the other cities."
>>>>>>> Stashed changes
  },
  {
    "objectID": "references.en.html",
    "href": "references.en.html",
    "title": "References",
    "section": "",
    "text": "Anda, Cuauhtemoc, Alexander Erath, and Pieter Jacobus Fourie. 2017.\n“Transport Modelling in the Age of Big Data.”\nInternational Journal of Urban Sciences 21 (sup1): 19–42. https://doi.org/10.1080/12265934.2017.1281150.\n\n\nArbex, Renato, and Claudio B. Cunha. 2020. “Estimating the\nInfluence of Crowding and Travel Time Variability on Accessibility to\nJobs in a Large Public Transport Network Using Smart Card Big\nData.” Journal of Transport Geography 85 (May): 102671.\nhttps://doi.org/10.1016/j.jtrangeo.2020.102671.\n\n\nBanister, David. 2008. “The Sustainable Mobility Paradigm.”\nTransport Policy 15 (2): 73–80. https://doi.org/10.1016/j.tranpol.2007.10.005.\n\n\n———. 2011. “The Trilogy of Distance, Speed and Time.”\nJournal of Transport Geography 19 (4): 950–59. https://doi.org/10.1016/j.jtrangeo.2010.12.004.\n\n\nBarrington-Leigh, Christopher, and Adam Millard-Ball. 2017. “The\nWorld’s User-Generated Road Map Is More Than 80% Complete.”\nPLOS ONE 12 (8): e0180698. https://doi.org/10.1371/journal.pone.0180698.\n\n\nBertolini, L., F. le Clercq, and L. Kapoen. 2005. “Sustainable\nAccessibility: A Conceptual Framework to Integrate Transport and Land\nUse Plan-Making. Two Test-Applications in the\nNetherlands and a Reflection on the Way Forward.”\nTransport Policy 12 (3): 207–20. https://doi.org/10.1016/j.tranpol.2005.01.006.\n\n\nBoisjoly, Geneviève, and Ahmed M. El-Geneidy. 2017. “How to Get\nThere? A Critical Assessment of Accessibility Objectives\nand Indicators in Metropolitan Transportation Plans.”\nTransport Policy 55 (April): 38–50. https://doi.org/10.1016/j.tranpol.2016.12.011.\n\n\nBraga, Carlos Kaue Vieira, Diego Bogado Tomasiello, Daniel Herszenhut,\nJoão Lucas Albuquerque Oliveira, and Rafael H. M. Pereira. 2022.\n“Impactos da expansão do metrô de Fortaleza sobre o acesso a\noportunidades de emprego, saúde e educação.” {Texto para\nDiscuss\\~ao} 2767. Instituto de Pesquisa Econômica Aplicada\n(Ipea).\n\n\nBrodsky, Isaac. 2018. “H3: Uber’s Hexagonal\nHierarchical Spatial Index.” Uber Engineering\nBlog. https://eng.uber.com/h3/.\n\n\nBüttner, Benjamin. 2021. “Accessibility Tools for\nTransport Policy and Planning.” In\nInternational Encyclopedia of\nTransportation, edited by Roger Vickerman, 83–86.\nOxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10618-9.\n\n\nCamboim, Silvana Philippi, João Vitor Meza Bravo, and Claudia Robbi\nSluter. 2015. “An Investigation into the\nCompleteness of, and the Updates to,\nOpenStreetMap Data in a Heterogeneous Area in\nBrazil.” ISPRS International Journal of\nGeo-Information 4 (3): 1366–88. https://doi.org/10.3390/ijgi4031366.\n\n\nCervero, Robert. 2005. “Accessible Cities and\nRegions: A Framework for Sustainable\nTransport and Urbanism in the 21st\nCentury.” Center for Future Urban Transport\nWorking Paper, no. UCB-ITS-VWP-2005-3 (August).\n\n\nChurch, A, M Frost, and K Sullivan. 2000. “Transport and Social\nExclusion in London.” Transport Policy 7\n(3): 195–205. https://doi.org/10.1016/S0967-070X(00)00024-X.\n\n\nConway, Matthew Wigginton, Andrew Byrd, and Marco van der Linden. 2017.\n“Evidence-Based Transit and Land Use Sketch\nPlanning Using Interactive Accessibility Methods on\nCombined Schedule and Headway-Based\nNetworks.” Transportation Research Record: Journal of\nthe Transportation Research Board 2653 (1): 45–53. https://doi.org/10.3141/2653-06.\n\n\nDijst, Martin, Tom de Jong, and Jan Ritsema van Eck. 2002.\n“Opportunities for Transport Mode Change: An\nExploration of a Disaggregated Approach.”\nEnvironment and Planning B: Planning and Design 29 (3): 413–30.\nhttps://doi.org/10.1068/b12811.\n\n\nDong, Xiaojing, Moshe E. Ben-Akiva, John L. Bowman, and Joan L. Walker.\n2006. “Moving from Trip-Based to Activity-Based Measures of\nAccessibility.” Transportation Research Part A: Policy and\nPractice 40 (2): 163–80. https://doi.org/10.1016/j.tra.2005.05.002.\n\n\nEl-Geneidy, Ahmed, David Levinson, Ehab Diab, Genevieve Boisjoly, David\nVerbich, and Charis Loong. 2016. “The Cost of Equity:\nAssessing Transit Accessibility and Social Disparity Using\nTotal Travel Cost.” Transportation Research Part A: Policy\nand Practice 91 (September): 302–16. https://doi.org/10.1016/j.tra.2016.07.003.\n\n\nFarrington, John, and Conor Farrington. 2005. “Rural\nAccessibility, Social Inclusion and Social Justice: Towards\nConceptualisation.” Journal of Transport Geography 13\n(1): 1–12. https://doi.org/10.1016/j.jtrangeo.2004.10.002.\n\n\nGeurs, Karst, and Bert van Wee. 2004. “Accessibility Evaluation of\nLand-Use and Transport Strategies: Review and Research\nDirections.” Journal of Transport Geography 12 (2):\n127–40. https://doi.org/10.1016/j.jtrangeo.2003.10.005.\n\n\nGrisé, Emily, Geneviève Boisjoly, Meadhbh Maguire, and Ahmed El-Geneidy.\n2019. “Elevating Access: Comparing Accessibility to\nJobs by Public Transport for Individuals with and Without a Physical\nDisability.” Transportation Research Part A: Policy and\nPractice 125 (July): 280–93. https://doi.org/10.1016/j.tra.2018.02.017.\n\n\nGuzman, Luis A., and Daniel Oviedo. 2018. “Accessibility,\nAffordability and Equity: Assessing ‘Pro-Poor’\nPublic Transport Subsidies in Bogotá.” Transport\nPolicy 68 (September): 37–51. https://doi.org/10.1016/j.tranpol.2018.04.012.\n\n\nHerszenhut, Daniel, Rafael H. M. Pereira, Licinio da Silva Portugal, and\nMatheus Henrique de Sousa Oliveira. 2022. “The Impact of Transit\nMonetary Costs on Transport Inequality.” Journal of Transport\nGeography 99 (February): 103309. https://doi.org/10.1016/j.jtrangeo.2022.103309.\n\n\nHiggins, Christopher, Matthew Palm, Amber DeJohn, Luna Xi, James\nVaughan, Steven Farber, Michael Widener, and Eric Miller. 2022.\n“Calculating Place-Based Transit Accessibility:\nMethods, Tools and Algorithmic Dependence.”\nJournal of Transport and Land Use 15 (1). https://doi.org/10.5198/jtlu.2022.2012.\n\n\nKandt, Jens, and Michael Batty. 2021. “Smart Cities, Big Data and\nUrban Policy: Towards Urban Analytics for the Long\nRun.” Cities 109 (February): 102992. https://doi.org/10.1016/j.cities.2020.102992.\n\n\nKim, Hyun-Mi, and Mei-Po Kwan. 2003. “Space-Time Accessibility\nMeasures: A Geocomputational Algorithm with a Focus on the\nFeasible Opportunity Set and Possible Activity Duration.”\nJournal of Geographical Systems 5 (1): 71–91. https://doi.org/10.1007/s101090300104.\n\n\nLevine, Jonathan, Joe Grengs, and Louis A. Merlin. 2019. From\nMobility to Accessibility: Transforming Urban\nTransportation and Land-Use Planning. Cornell University\nPress.\n\n\nLevinson, David, and David King. 2020. Transport Access Manual:\nA Guide for Measuring Connection Between People and\nPlaces. Committee of the Transport Access Manual, University\nof Sydney.\n\n\nLucas, Karen, Giulio Mattioli, Ersilia Verlinghieri, and Alvaro Guzman.\n2016. “Transport Poverty and Its Adverse Social\nConsequences.” Proceedings of the Institution of Civil\nEngineers - Transport 169 (6): 353–65. https://doi.org/10.1680/jtran.15.00073.\n\n\nLucas, Karen, Bert van Wee, and Kees Maat. 2016. “A Method to\nEvaluate Equitable Accessibility: Combining Ethical Theories and\nAccessibility-Based Approaches.” Transportation 43 (3):\n473–90. https://doi.org/10.1007/s11116-015-9585-2.\n\n\nLuo, Wei, and Fahui Wang. 2003. “Measures of Spatial\nAccessibility to Health Care in a GIS\nEnvironment: Synthesis and a Case Study\nin the Chicago Region.” Environment and Planning\nB: Planning and Design 30 (6): 865–84. https://doi.org/10.1068/b29120.\n\n\nLuz, Gregório, and Licinio Portugal. 2022. “Understanding\nTransport-Related Social Exclusion Through the Lens of Capabilities\nApproach.” Transport Reviews 42 (4): 503–25. https://doi.org/10.1080/01441647.2021.2005183.\n\n\nMartens, Karel. 2012. “Justice in Transport as Justice in\nAccessibility: Applying Walzer’s\n‘Spheres of Justice’ to the\nTransport Sector.” Transportation 39 (6): 1035–53. https://doi.org/10.1007/s11116-012-9388-7.\n\n\nMcHugh, Bibiana. 2013. “Pioneering Open Data\nStandards: The GTFS Story.” In Beyond\nTransparency: Open Data and the\nFuture of Civic Innovation, edited by\nBrett Goldstein and Lauren Dyson, First, 125–35. San Francisco,\nCA: Code for America Press.\n\n\nMiller, Eric J. 2018. “Accessibility: Measurement and Application\nin Transportation Planning.” Transport Reviews 38 (5):\n551–55. https://doi.org/10.1080/01441647.2018.1492778.\n\n\nNeutens, Tijs, Matthias Delafontaine, Darren M. Scott, and Philippe De\nMaeyer. 2012. “An Analysis of Day-to-Day Variations in Individual\nSpacetime Accessibility.” Journal of Transport\nGeography, Special Issue on Time\nGeography, 23 (July): 81–91. https://doi.org/10.1016/j.jtrangeo.2012.04.001.\n\n\nNeutens, Tijs, Tim Schwanen, Frank Witlox, and Philippe De Maeyer. 2010.\n“Equity of Urban Service Delivery: A\nComparison of Different Accessibility\nMeasures.” Environment and Planning A: Economy and\nSpace 42 (7): 1613–35. https://doi.org/10.1068/a4230.\n\n\nPaez, Antonio, Christopher D. Higgins, and Salvatore F. Vivona. 2019.\n“Demand and Level of Service Inflation in Floating Catchment\nArea (FCA) Methods.” Edited by Tayyab Ikram\nShah. PLOS ONE 14 (6): e0218773. https://doi.org/10.1371/journal.pone.0218773.\n\n\nPáez, Antonio, Darren M. Scott, and Catherine Morency. 2012.\n“Measuring Accessibility: Positive and Normative Implementations\nof Various Accessibility Indicators.” Journal of Transport\nGeography 25 (November): 141–53. https://doi.org/10.1016/j.jtrangeo.2012.03.016.\n\n\nPapa, Enrica, Cecilia Silva, Marco Te Brömmelstroet, and Angela Hull.\n2015. “Accessibility Instruments for Planning Practice: A Review\nof European Experiences.” Journal of Transport\nand Land Use, June. https://doi.org/10.5198/jtlu.2015.585.\n\n\nPereira, Rafael H. M., Pedro R. Andrade, and João Pedro Bazzo Vieira.\n2022. “Exploring the Time Geography of Public Transport Networks\nwith the Gtfs2gps Package.” Journal of Geographical\nSystems, December. https://doi.org/10.1007/s10109-022-00400-x.\n\n\nPereira, Rafael H. M., Carlos Kaue Vieira Braga, Bernardo Serra, and\nVanessa Nadalin. 2019. “Desigualdades socioespaciais de\nacesso a oportunidades nas cidades brasileiras, 2019.”\n{Texto para Discuss\\~ao} 2535. Instituto de Pesquisa Econômica\nAplicada (Ipea).\n\n\nPereira, Rafael H. M., Carlos Kauê Vieira Braga, Daniel Herszenhut,\nMarcus Saraiva, and Diego Bogado Tomasiello. 2022.\n“Estimativas de acessibilidade a empregos e serviços\npúblicos via transporte ativo, público e privado nas 20 maiores cidades\ndo Brasil em 2017, 2018, 2019.” Texto para Discussão\nIPEA 2800.\n\n\nPereira, Rafael H. M., Daniel Herszenhut, Carlos K. V. Braga, Diego B.\nTomasiello, and Marcus Saraiva. 2022. “Aopdata: Data\nfrom the Access to Opportunities\nProject.” CRAN.\n\n\nPereira, Rafael H. M., Daniel Herszenhut, Carlos Kauê Vieira Braga, João\nPedro Bazzo, João Lucas Albuquerque Oliveira, João Pedro Parga, Marcus\nSaraiva, Luiz Pedro Silva, Lucas Warwar, and Diego Bogado Tomasiello.\n2022. “Distribuição espacial de características\nsociodemográficas e localização de empregos e serviços públicos das\nvinte maiores cidades do Brasil.” Texto para Discussão\nIPEA 2772 (June): 28. https://doi.org/10.38116/td2772.\n\n\nPereira, Rafael H. M., and Alex Karner. 2021. “Transportation\nEquity.” In International\nEncyclopedia of Transportation, edited by\nRoger Vickerman, 271–77. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10053-3.\n\n\nPereira, Rafael H. M., Marcus Saraiva, Daniel Herszenhut, Carlos Kaue\nVieira Braga, and Matthew Wigginton Conway. 2021. “R5r:\nRapid Realistic Routing on Multimodal Transport\nNetworks with R5 in\nR.” Transport Findings, March, 21262. https://doi.org/10.32866/001c.21262.\n\n\nPereira, Rafael H. M., Tim Schwanen, and David Banister. 2017.\n“Distributive Justice and Equity in Transportation.”\nTransport Reviews 37 (2): 170–91. https://doi.org/10.1080/01441647.2016.1257660.\n\n\nPritchard, John P., Diego Tomasiello, Mariana Giannotti, and Karst\nGeurs. 2019. “An International Comparison of\nEquity in Accessibility to Jobs:\nLondon, São Paulo and the\nRandstad.” Findings, February. https://doi.org/10.32866/7412.\n\n\nSaraiva, Marcus, Luiz Pedro Silva, Carlos Kauê Vieira Braga, and Rafael\nHenrique Moraes Pereira. 2023. “Transporte urbano e\ninsuficiência de acesso a escolas no Brasil.” {Texto para\nDiscuss\\~ao} 2854. Instituto de Pesquisa Econômica Aplicada\n(Ipea).\n\n\nSilva, Cecília, Luca Bertolini, Marco te Brömmelstroet, Dimitris\nMilakis, and Enrica Papa. 2017. “Accessibility Instruments in\nPlanning Practice: Bridging the Implementation Gap.”\nTransport Policy 53 (January): 135–45. https://doi.org/10.1016/j.tranpol.2016.09.006.\n\n\nvan Wee, Bert. 2021. “Transport Modes and\nAccessibility.” In International\nEncyclopedia of Transportation, edited by\nRoger Vickerman, 32–37. Oxford: Elsevier. https://doi.org/10.1016/B978-0-08-102671-7.10402-6.\n\n\n———. 2022. “Accessibility and Equity: A Conceptual\nFramework and Research Agenda.” Journal of Transport\nGeography 104 (October): 103421. https://doi.org/10.1016/j.jtrangeo.2022.103421.\n\n\nVasconcellos, Eduardo Alcantara. 2018. “Urban Transport Policies\nin Brazil: The Creation of a Discriminatory\nMobility System.” Journal of Transport Geography 67\n(February): 85–91. https://doi.org/10.1016/j.jtrangeo.2017.08.014.\n\n\nVenter, Christoffel. 2016. “Assessing the Potential of Bus Rapid\nTransit-Led Network Restructuring for Enhancing Affordable Access to\nEmployment The Case of Johannesburg’s\nCorridors of Freedom.” Research in\nTransportation Economics 59 (November): 441–49. https://doi.org/10.1016/j.retrec.2016.05.006."
  }
]